Collection { inner: CollectionInner { client: Client { inner: TrackingArc { inner: Inner { value: ClientInner { topology: Topology { watcher: TopologyWatcher { receiver: Receiver { shared: Shared { value: RwLock(PhantomData<std::sync::poison::rwlock::RwLock<mongodb::sdam::topology::TopologyState>>, RwLock { data: TopologyState { description: TopologyDescription { single_seed: false, topology_type: Unknown, set_name: None, max_set_version: None, max_election_id: None, compatibility_error: None, logical_session_timeout: None, transaction_support_status: Undetermined, cluster_time: None, local_threshold: None, heartbeat_freq: None, servers: {}, srv_max_hosts: None }, servers: {} } }), version: Version(0), is_closed: false, ref_count_rx: 2 }, version: Version(0) }, sender: Sender { shared: Shared { value: RwLock(PhantomData<std::sync::poison::rwlock::RwLock<u32>>, RwLock { data: 0 }), version: Version(0), is_closed: false, ref_count_rx: 0 } }, requested_check: false }, updater: TopologyUpdater { sender: UnboundedSender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x7fffa005a5c0, tail_position: 0 }, semaphore: Semaphore(0), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } } }, _worker_handle: WorkerHandle { _receiver: Receiver { shared: Shared { value: RwLock(PhantomData<std::sync::poison::rwlock::RwLock<()>>, RwLock { data: () }), version: Version(0), is_closed: false, ref_count_rx: 1 }, version: Version(0) } } }, options: ClientOptions { hosts: [Tcp { host: "nf4_db_proposer", port: Some(27017) }], app_name: None, connect_timeout: None, credential: None, direct_connection: None, driver_info: None, heartbeat_freq: None, load_balanced: None, local_threshold: None, max_idle_time: None, max_pool_size: None, min_pool_size: None, max_connecting: None, read_concern: None, repl_set_name: None, retry_reads: None, retry_writes: None, server_monitoring_mode: None, selection_criteria: None, server_api: None, server_selection_timeout: None, default_database: None, srv_service_name: None, tls: None, write_concern: None, srv_max_hosts: None, .. }, session_pool: ServerSessionPool { pool: Mutex { data: [] } }, shutdown: Shutdown { pending_drops: Mutex { data: IdSet { values: [], free: [] }, poisoned: false, .. }, executed: false }, dropped: false, end_sessions_token: Mutex { data: AsyncDropToken { .. }, poisoned: false, .. } } } } }, db: Database { inner: DatabaseInner { client: Client { inner: TrackingArc { inner: Inner { value: ClientInner { topology: Topology { watcher: TopologyWatcher { receiver: Receiver { shared: Shared { value: RwLock(PhantomData<std::sync::poison::rwlock::RwLock<mongodb::sdam::topology::TopologyState>>, RwLock { data: TopologyState { description: TopologyDescription { single_seed: false, topology_type: Unknown, set_name: None, max_set_version: None, max_election_id: None, compatibility_error: None, logical_session_timeout: None, transaction_support_status: Undetermined, cluster_time: None, local_threshold: None, heartbeat_freq: None, servers: {}, srv_max_hosts: None }, servers: {} } }), version: Version(0), is_closed: false, ref_count_rx: 2 }, version: Version(0) }, sender: Sender { shared: Shared { value: RwLock(PhantomData<std::sync::poison::rwlock::RwLock<u32>>, RwLock { data: 0 }), version: Version(0), is_closed: false, ref_count_rx: 0 } }, requested_check: false }, updater: TopologyUpdater { sender: UnboundedSender { chan: Tx { inner: Chan { tx: Tx { block_tail: 0x7fffa005a5c0, tail_position: 0 }, semaphore: Semaphore(0), rx_waker: AtomicWaker, tx_count: 2, rx_fields: "..." } } } }, _worker_handle: WorkerHandle { _receiver: Receiver { shared: Shared { value: RwLock(PhantomData<std::sync::poison::rwlock::RwLock<()>>, RwLock { data: () }), version: Version(0), is_closed: false, ref_count_rx: 1 }, version: Version(0) } } }, options: ClientOptions { hosts: [Tcp { host: "nf4_db_proposer", port: Some(27017) }], app_name: None, connect_timeout: None, credential: None, direct_connection: None, driver_info: None, heartbeat_freq: None, load_balanced: None, local_threshold: None, max_idle_time: None, max_pool_size: None, min_pool_size: None, max_connecting: None, read_concern: None, repl_set_name: None, retry_reads: None, retry_writes: None, server_monitoring_mode: None, selection_criteria: None, server_api: None, server_selection_timeout: None, default_database: None, srv_service_name: None, tls: None, write_concern: None, srv_max_hosts: None, .. }, session_pool: ServerSessionPool { pool: Mutex { data: [] } }, shutdown: Shutdown { pending_drops: Mutex { data: IdSet { values: [], free: [] }, poisoned: false, .. }, executed: false }, dropped: false, end_sessions_token: Mutex { data: AsyncDropToken { .. }, poisoned: false, .. } } } } }, name: "nightfall", selection_criteria: None, read_concern: None, write_concern: None } }, name: "commitment_tree_metadata", selection_criteria: None, read_concern: None, write_concern: None }, _phantom: PhantomData<fn() -> lib::merkle_trees::trees::TreeMetadata<ark_ff::fields::models::fp::Fp<ark_ff::fields::models::fp::montgomery_backend::MontBackend<ark_bn254::fields::fr::FrConfig, 4>, 4>>> }