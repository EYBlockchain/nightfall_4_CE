pub use sha::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod sha {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::None,
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("parseMessage1024"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("parseMessage1024"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("paddedMessage"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Array(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Bytes,
                                        ),
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes[]"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("parseMessageBlock1024"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned(
                                "parseMessageBlock1024",
                            ),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("messageBlock"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::FixedArray(
                                        ::std::boxed::Box::new(
                                            ::ethers::core::abi::ethabi::ParamType::Uint(256usize),
                                        ),
                                        16usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256[16]"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::Pure,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("sha512"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("sha512"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("message"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static SHA_ABI: ::ethers::contract::Lazy<::ethers::core::abi::Abi> = ::ethers::contract::Lazy::new(
        __abi,
    );
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x12\xBD\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x05d\x94\xF9\x14a\0CW\x80c`\x81{\\\x14a\0lW\x80c\x87=r\x9E\x14a\0\x8CW[__\xFD[a\0Va\0Q6`\x04a\x0E\x10V[a\0\xACV[`@Qa\0c\x91\x90a\x0E\xACV[`@Q\x80\x91\x03\x90\xF3[a\0\x7Fa\0z6`\x04a\x0E\x10V[a\x01\xB9V[`@Qa\0c\x91\x90a\x0F\x0FV[a\0\x9Fa\0\x9A6`\x04a\x0E\x10V[a\x02:V[`@Qa\0c\x91\x90a\x0F@V[``_a\0\xBA`\x80\x84a\x0FzV[\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xD6Wa\0\xD6a\x0F\x8DV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\tW\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0\xF4W\x90P[P\x90P_\x80[a\x01\x1A\x84`\x80a\x0F\xA1V[\x81\x10\x15a\x01\xACW\x86\x81\x87a\x01/\x82`\x80a\x0F\xB8V[\x92a\x01<\x93\x92\x91\x90a\x0F\xCBV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x86\x92P\x85\x91Pa\x01}\x90P\x81a\x0F\xF2V[\x94P\x81Q\x81\x10a\x01\x8FWa\x01\x8Fa\x10\nV[` \x90\x81\x02\x91\x90\x91\x01\x01Ra\x01\xA5\x81`\x80a\x0F\xB8V[\x90Pa\x01\x0FV[P\x90\x92PPP[\x92\x91PPV[a\x01\xC1a\r\xB3V[a\x01\xC9a\r\xB3V[_\x80[`\x80\x81\x10\x15a\x020W\x85\x81\x86a\x01\xE3\x82`\x08a\x0F\xB8V[\x92a\x01\xF0\x93\x92\x91\x90a\x0F\xCBV[a\x01\xF9\x91a\x10\x1EV[`\xC0\x1C\x83\x83a\x02\x07\x81a\x0F\xF2V[\x94P`\x10\x81\x10a\x02\x19Wa\x02\x19a\x10\nV[` \x02\x01Ra\x02)\x81`\x08a\x0F\xB8V[\x90Pa\x01\xCCV[P\x90\x94\x93PPPPV[``_a\x02G\x84\x84a\x06\xB0V[`@Qc\x05d\x94\xF9`\xE0\x1B\x81R\x90\x91P_\x900\x90c\x05d\x94\xF9\x90a\x02o\x90\x85\x90`\x04\x01a\x0F@V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x89W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02\xB0\x91\x90\x81\x01\x90a\x10\x87V[\x80Q\x90\x91Pa\x02\xBDa\r\xD2V[_a\x02\xC6a\x07\xE3V[\x90P_a\x02\xD1a\x08eV[\x90P_[\x84\x81\x10\x15a\x06\x10W_0`\x01`\x01`\xA0\x1B\x03\x16c`\x81{\\\x88\x84\x81Q\x81\x10a\x02\xFFWa\x02\xFFa\x10\nV[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03#\x91\x90a\x0F@V[a\x02\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03?W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03c\x91\x90a\x11\xAFV[\x90P_[`\x10\x81\x10\x15a\x03\xA6W\x81\x81`\x10\x81\x10a\x03\x82Wa\x03\x82a\x10\nV[` \x02\x01Q\x86\x82`P\x81\x10a\x03\x99Wa\x03\x99a\x10\nV[` \x02\x01R`\x01\x01a\x03gV[P`\x10[`P\x81\x10\x15a\x04dWa\x04Ea\x04\x08a\x03\xE2\x88a\x03\xC8`\x02\x86a\x12,V[`P\x81\x10a\x03\xD8Wa\x03\xD8a\x10\nV[` \x02\x01Qa\x0C\xDCV[\x88a\x03\xEE`\x07\x86a\x12,V[`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[` \x02\x01Qa\r\nV[a\x04@a\x044\x89a\x04\x1A`\x0F\x87a\x12,V[`P\x81\x10a\x04*Wa\x04*a\x10\nV[` \x02\x01Qa\r*V[\x89a\x03\xEE`\x10\x87a\x12,V[a\r\nV[\x86\x82`P\x81\x10a\x04WWa\x04Wa\x10\nV[` \x02\x01R`\x01\x01a\x03\xAAV[Pa\x04ma\r\xF1V[_[`\x08\x81\x10\x15a\x04\xAEW\x85\x81`\x08\x81\x10a\x04\x8AWa\x04\x8Aa\x10\nV[` \x02\x01Q\x82\x82`\x08\x81\x10a\x04\xA1Wa\x04\xA1a\x10\nV[` \x02\x01R`\x01\x01a\x04oV[P_[`P\x81\x10\x15a\x05\xAEW_a\x05\x1Ca\x04\xD9\x84`\x07` \x02\x01Qa\x04@\x86`\x04` \x02\x01Qa\rPV[`\x80\x85\x01Q`\xA0\x86\x01Q`\xC0\x87\x01Qa\x04@\x92a\x05\n\x92\x81\x16\x90\x19\x90\x91\x16\x18\x8A\x87`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x8B\x86`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x90P_a\x05Na\x051\x85\x83` \x02\x01Qa\rrV[\x85Q` \x87\x01Q`@\x88\x01Q\x80\x82\x16\x90\x83\x16\x91\x90\x92\x16\x18\x18a\r\nV[`\xC0\x85\x01\x80Q`\xE0\x87\x01R`\xA0\x86\x01\x80Q\x90\x91R`\x80\x86\x01Q\x90R``\x85\x01Q\x90\x91Pa\x05{\x90\x83a\r\nV[`\x80\x85\x01R`@\x84\x01\x80Q``\x86\x01R` \x85\x01\x80Q\x90\x91R\x84Q\x90Ra\x05\xA2\x82\x82a\r\nV[\x84RPP`\x01\x01a\x04\xB1V[P_[`\x08\x81\x10\x15a\x06\x05Wa\x05\xE6\x82\x82`\x08\x81\x10a\x05\xCFWa\x05\xCFa\x10\nV[` \x02\x01Q\x87\x83`\x08\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x86\x82`\x08\x81\x10a\x05\xF8Wa\x05\xF8a\x10\nV[` \x02\x01R`\x01\x01a\x05\xB1V[PPP`\x01\x01a\x02\xD5V[PP\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q``\x80\x87\x01Q`\x80\x88\x01Q`\xA0\x89\x01Q`\xC0\x80\x8B\x01Q`\xE0\x90\x9B\x01Q\x87Q`\x01`\x01`\xC0\x1B\x03\x19\x9B\x83\x1B\x8C\x16\x9A\x81\x01\x9A\x90\x9AR\x97\x81\x1B\x8A\x16`(\x8A\x01R\x94\x85\x1B\x89\x16`0\x89\x01R\x91\x84\x1B\x88\x16`8\x88\x01R\x83\x1B\x87\x16\x86\x85\x01R\x82\x1B\x86\x16`H\x86\x01R\x95\x81\x1B\x85\x16`P\x85\x01R\x91\x90\x91\x1B\x90\x92\x16`X\x82\x01R\x81Q\x80\x82\x03\x83\x01\x81R\x92\x01\x90R\x97\x96PPPPPPPV[``_a\x06\xBE\x83`\x08a\x0F\xA1V[\x90P_a\x04\0a\x06\xCF\x83`\x01a\x0F\xB8V[a\x06\xD9\x91\x90a\x12?V[\x90P_a\x04\0a\x06\xEB\x83a\x07\x80a\x12,V[a\x06\xF5\x91\x90a\x12?V[\x90P_`\x08a\x07\x05\x83`\x01a\x0F\xB8V[a\x07\x0F\x91\x90a\x0FzV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07'Wa\x07'a\x0F\x8DV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x07QW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x80`\xF8\x1B\x81_\x81Q\x81\x10a\x07kWa\x07ka\x10\nV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`@\x80Q`\x80\x86\x90\x1Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01R\x81Q`\x10\x81\x83\x03\x01\x81R`0\x82\x01\x90\x92Ra\x07\xC7\x90\x89\x90\x89\x90\x85\x90\x85\x90`P\x01a\x12iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x95PPPPPP\x92\x91PPV[a\x07\xEBa\r\xF1V[a\x07\xF3a\r\xF1V[gj\t\xE6g\xF3\xBC\xC9\x08\x81Rg\xBBg\xAE\x85\x84\xCA\xA7;` \x82\x01Rg<n\xF3r\xFE\x94\xF8+`@\x82\x01Rg\xA5O\xF5:_\x1D6\xF1``\x82\x01RgQ\x0ER\x7F\xAD\xE6\x82\xD1`\x80\x82\x01Rg\x9B\x05h\x8C+>l\x1F`\xA0\x82\x01Rg\x1F\x83\xD9\xAB\xFBA\xBDk`\xC0\x82\x01Rg[\xE0\xCD\x19\x13~!y`\xE0\x82\x01R\x91\x90PV[a\x08ma\r\xD2V[`@Q\x80a\n\0\x01`@R\x80gB\x8A/\x98\xD7(\xAE\"\x81R` \x01gq7D\x91#\xEFe\xCD\x81R` \x01g\xB5\xC0\xFB\xCF\xECM;/\x81R` \x01g\xE9\xB5\xDB\xA5\x81\x89\xDB\xBC\x81R` \x01g9V\xC2[\xF3H\xB58\x81R` \x01gY\xF1\x11\xF1\xB6\x05\xD0\x19\x81R` \x01g\x92?\x82\xA4\xAF\x19O\x9B\x81R` \x01g\xAB\x1C^\xD5\xDAm\x81\x18\x81R` \x01g\xD8\x07\xAA\x98\xA3\x03\x02B\x81R` \x01g\x12\x83[\x01Epo\xBE\x81R` \x01g$1\x85\xBEN\xE4\xB2\x8C\x81R` \x01gU\x0C}\xC3\xD5\xFF\xB4\xE2\x81R` \x01gr\xBE]t\xF2{\x89o\x81R` \x01g\x80\xDE\xB1\xFE;\x16\x96\xB1\x81R` \x01g\x9B\xDC\x06\xA7%\xC7\x125\x81R` \x01g\xC1\x9B\xF1t\xCFi&\x94\x81R` \x01g\xE4\x9Bi\xC1\x9E\xF1J\xD2\x81R` \x01g\xEF\xBEG\x868O%\xE3\x81R` \x01g\x0F\xC1\x9D\xC6\x8B\x8C\xD5\xB5\x81R` \x01g$\x0C\xA1\xCCw\xAC\x9Ce\x81R` \x01g-\xE9,oY+\x02u\x81R` \x01gJt\x84\xAAn\xA6\xE4\x83\x81R` \x01g\\\xB0\xA9\xDC\xBDA\xFB\xD4\x81R` \x01gv\xF9\x88\xDA\x83\x11S\xB5\x81R` \x01g\x98>QR\xEEf\xDF\xAB\x81R` \x01g\xA81\xC6m-\xB42\x10\x81R` \x01g\xB0\x03'\xC8\x98\xFB!?\x81R` \x01g\xBFY\x7F\xC7\xBE\xEF\x0E\xE4\x81R` \x01g\xC6\xE0\x0B\xF3=\xA8\x8F\xC2\x81R` \x01g\xD5\xA7\x91G\x93\n\xA7%\x81R` \x01g\x06\xCAcQ\xE0\x03\x82o\x81R` \x01g\x14))g\n\x0Enp\x81R` \x01g'\xB7\n\x85F\xD2/\xFC\x81R` \x01g.\x1B!8\\&\xC9&\x81R` \x01gM,m\xFCZ\xC4*\xED\x81R` \x01gS8\r\x13\x9D\x95\xB3\xDF\x81R` \x01ge\nsT\x8B\xAFc\xDE\x81R` \x01gvj\n\xBB<w\xB2\xA8\x81R` \x01g\x81\xC2\xC9.G\xED\xAE\xE6\x81R` \x01g\x92r,\x85\x14\x825;\x81R` \x01g\xA2\xBF\xE8\xA1L\xF1\x03d\x81R` \x01g\xA8\x1AfK\xBCB0\x01\x81R` \x01g\xC2K\x8Bp\xD0\xF8\x97\x91\x81R` \x01g\xC7lQ\xA3\x06T\xBE0\x81R` \x01g\xD1\x92\xE8\x19\xD6\xEFR\x18\x81R` \x01g\xD6\x99\x06$Ue\xA9\x10\x81R` \x01g\xF4\x0E5\x85Wq *\x81R` \x01g\x10j\xA0p2\xBB\xD1\xB8\x81R` \x01g\x19\xA4\xC1\x16\xB8\xD2\xD0\xC8\x81R` \x01g\x1E7l\x08QA\xABS\x81R` \x01g'HwL\xDF\x8E\xEB\x99\x81R` \x01g4\xB0\xBC\xB5\xE1\x9BH\xA8\x81R` \x01g9\x1C\x0C\xB3\xC5\xC9Zc\x81R` \x01gN\xD8\xAAJ\xE3A\x8A\xCB\x81R` \x01g[\x9C\xCAOwc\xE3s\x81R` \x01gh.o\xF3\xD6\xB2\xB8\xA3\x81R` \x01gt\x8F\x82\xEE]\xEF\xB2\xFC\x81R` \x01gx\xA5coC\x17/`\x81R` \x01g\x84\xC8x\x14\xA1\xF0\xABr\x81R` \x01g\x8C\xC7\x02\x08\x1Ad9\xEC\x81R` \x01g\x90\xBE\xFF\xFA#c\x1E(\x81R` \x01g\xA4Pl\xEB\xDE\x82\xBD\xE9\x81R` \x01g\xBE\xF9\xA3\xF7\xB2\xC6y\x15\x81R` \x01g\xC6qx\xF2\xE3rS+\x81R` \x01g\xCA'>\xCE\xEA&a\x9C\x81R` \x01g\xD1\x86\xB8\xC7!\xC0\xC2\x07\x81R` \x01g\xEA\xDA}\xD6\xCD\xE0\xEB\x1E\x81R` \x01g\xF5}O\x7F\xEEn\xD1x\x81R` \x01g\x06\xF0g\xAAr\x17o\xBA\x81R` \x01g\nc}\xC5\xA2\xC8\x98\xA6\x81R` \x01g\x11?\x98\x04\xBE\xF9\r\xAE\x81R` \x01g\x1Bq\x0B5\x13\x1CG\x1B\x81R` \x01g(\xDBw\xF5#\x04}\x84\x81R` \x01g2\xCA\xAB{@\xC7$\x93\x81R` \x01g<\x9E\xBE\n\x15\xC9\xBE\xBC\x81R` \x01gC\x1Dg\xC4\x9C\x10\rL\x81R` \x01gL\xC5\xD4\xBE\xCB>B\xB6\x81R` \x01gY\x7F)\x9C\xFCe~*\x81R` \x01g_\xCBo\xAB:\xD6\xFA\xEC\x81R` \x01glD\x19\x8CJGX\x17\x81RP\x90P\x90V[_g\x03\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x06\x83\x90\x1C\x16a\x0C\xF7`=\x84a\r\x90V[a\r\x02`\x13\x85a\r\x90V[\x18\x18\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16_a\r#\x82\x84a\x0F\xB8V[\x93\x92PPPV[_g\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x07\x83\x90\x1C\x16a\rE`\x08\x84a\r\x90V[a\r\x02`\x01\x85a\r\x90V[_a\r\\`)\x83a\r\x90V[a\rg`\x12\x84a\r\x90V[a\r\x02`\x0E\x85a\r\x90V[_a\r~`'\x83a\r\x90V[a\r\x89`\"\x84a\r\x90V[a\r\x02`\x1C\x85[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_a\r\xA6\x83`@a\x12,V[\x82\x90\x1B\x91\x90\x92\x1C\x17\x91\x90PV[`@Q\x80a\x02\0\x01`@R\x80`\x10\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\n\0\x01`@R\x80`P\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[__` \x83\x85\x03\x12\x15a\x0E!W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E7W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0EGW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E]W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0EnW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x0F\x03W`?\x19\x87\x86\x03\x01\x84Ra\x0E\xEE\x85\x83Qa\x0E~V[\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x0E\xD2V[P\x92\x96\x95PPPPPPV[a\x02\0\x81\x01\x81\x83_[`\x10\x81\x10\x15a\x0F7W\x81Q\x83R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01a\x0F\x18V[PPP\x92\x91PPV[` \x81R_a\r#` \x83\x01\x84a\x0E~V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_\x82a\x0F\x88Wa\x0F\x88a\x0FRV[P\x04\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x01\xB3Wa\x01\xB3a\x0FfV[\x80\x82\x01\x80\x82\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[__\x85\x85\x11\x15a\x0F\xD9W__\xFD[\x83\x86\x11\x15a\x0F\xE5W__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[_`\x01\x82\x01a\x10\x03Wa\x10\x03a\x0FfV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x805`\x01`\x01`\xC0\x1B\x03\x19\x81\x16\x90`\x08\x84\x10\x15a\x10OW`\x01`\x01`\xC0\x1B\x03\x19`\x08\x85\x90\x03`\x03\x1B\x81\x90\x1B\x82\x16\x16\x91P[P\x92\x91PPV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x10\x7FWa\x10\x7Fa\x0F\x8DV[`@R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x10\x97W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xADW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x10\xBDW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xD7Wa\x10\xD7a\x0F\x8DV[\x80`\x05\x1Ba\x10\xE7` \x82\x01a\x10VV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x11\x02W__\xFD[` \x85\x01\x92P[\x83\x83\x10\x15a\x11\xA4W\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11'W__\xFD[\x85\x01`?\x81\x01\x89\x13a\x117W__\xFD[` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11TWa\x11Ta\x0F\x8DV[a\x11g`\x1F\x82\x01`\x1F\x19\x16` \x01a\x10VV[\x81\x81R`@\x83\x83\x01\x01\x8B\x10\x15a\x11{W__\xFD[\x81`@\x84\x01` \x83\x01^_` \x83\x83\x01\x01R\x80\x85RPPP` \x82\x01\x91P` \x83\x01\x92Pa\x11\tV[\x97\x96PPPPPPPV[_a\x02\0\x82\x84\x03\x12\x15a\x11\xC0W__\xFD[\x82`\x1F\x83\x01\x12a\x11\xCEW__\xFD[`@Qa\x02\0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x11\xF2Wa\x11\xF2a\x0F\x8DV[`@R\x80a\x02\0\x84\x01\x85\x81\x11\x15a\x12\x07W__\xFD[\x84[\x81\x81\x10\x15a\x12!W\x80Q\x83R` \x92\x83\x01\x92\x01a\x12\tV[P\x91\x95\x94PPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[_\x82a\x12MWa\x12Ma\x0FRV[P\x06\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x83\x85\x827_\x84\x82\x01_\x81Ra\x11\xA4a\x12\x81\x82\x87a\x12RV[\x85a\x12RV\xFE\xA2dipfsX\"\x12 \\\xC0Jp(\x9F\x08\xCC\xCF\x8D,\xE8\xB5\xE9\xCFI\xE3\x18aP\n\xC5F{\xC1?\xE7*\xE6\x98g0dsolcC\0\x08\x1C\x003";
    /// The bytecode of the contract.
    pub static SHA_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x05d\x94\xF9\x14a\0CW\x80c`\x81{\\\x14a\0lW\x80c\x87=r\x9E\x14a\0\x8CW[__\xFD[a\0Va\0Q6`\x04a\x0E\x10V[a\0\xACV[`@Qa\0c\x91\x90a\x0E\xACV[`@Q\x80\x91\x03\x90\xF3[a\0\x7Fa\0z6`\x04a\x0E\x10V[a\x01\xB9V[`@Qa\0c\x91\x90a\x0F\x0FV[a\0\x9Fa\0\x9A6`\x04a\x0E\x10V[a\x02:V[`@Qa\0c\x91\x90a\x0F@V[``_a\0\xBA`\x80\x84a\x0FzV[\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xD6Wa\0\xD6a\x0F\x8DV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\tW\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0\xF4W\x90P[P\x90P_\x80[a\x01\x1A\x84`\x80a\x0F\xA1V[\x81\x10\x15a\x01\xACW\x86\x81\x87a\x01/\x82`\x80a\x0F\xB8V[\x92a\x01<\x93\x92\x91\x90a\x0F\xCBV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x86\x92P\x85\x91Pa\x01}\x90P\x81a\x0F\xF2V[\x94P\x81Q\x81\x10a\x01\x8FWa\x01\x8Fa\x10\nV[` \x90\x81\x02\x91\x90\x91\x01\x01Ra\x01\xA5\x81`\x80a\x0F\xB8V[\x90Pa\x01\x0FV[P\x90\x92PPP[\x92\x91PPV[a\x01\xC1a\r\xB3V[a\x01\xC9a\r\xB3V[_\x80[`\x80\x81\x10\x15a\x020W\x85\x81\x86a\x01\xE3\x82`\x08a\x0F\xB8V[\x92a\x01\xF0\x93\x92\x91\x90a\x0F\xCBV[a\x01\xF9\x91a\x10\x1EV[`\xC0\x1C\x83\x83a\x02\x07\x81a\x0F\xF2V[\x94P`\x10\x81\x10a\x02\x19Wa\x02\x19a\x10\nV[` \x02\x01Ra\x02)\x81`\x08a\x0F\xB8V[\x90Pa\x01\xCCV[P\x90\x94\x93PPPPV[``_a\x02G\x84\x84a\x06\xB0V[`@Qc\x05d\x94\xF9`\xE0\x1B\x81R\x90\x91P_\x900\x90c\x05d\x94\xF9\x90a\x02o\x90\x85\x90`\x04\x01a\x0F@V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x89W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02\xB0\x91\x90\x81\x01\x90a\x10\x87V[\x80Q\x90\x91Pa\x02\xBDa\r\xD2V[_a\x02\xC6a\x07\xE3V[\x90P_a\x02\xD1a\x08eV[\x90P_[\x84\x81\x10\x15a\x06\x10W_0`\x01`\x01`\xA0\x1B\x03\x16c`\x81{\\\x88\x84\x81Q\x81\x10a\x02\xFFWa\x02\xFFa\x10\nV[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03#\x91\x90a\x0F@V[a\x02\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03?W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03c\x91\x90a\x11\xAFV[\x90P_[`\x10\x81\x10\x15a\x03\xA6W\x81\x81`\x10\x81\x10a\x03\x82Wa\x03\x82a\x10\nV[` \x02\x01Q\x86\x82`P\x81\x10a\x03\x99Wa\x03\x99a\x10\nV[` \x02\x01R`\x01\x01a\x03gV[P`\x10[`P\x81\x10\x15a\x04dWa\x04Ea\x04\x08a\x03\xE2\x88a\x03\xC8`\x02\x86a\x12,V[`P\x81\x10a\x03\xD8Wa\x03\xD8a\x10\nV[` \x02\x01Qa\x0C\xDCV[\x88a\x03\xEE`\x07\x86a\x12,V[`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[` \x02\x01Qa\r\nV[a\x04@a\x044\x89a\x04\x1A`\x0F\x87a\x12,V[`P\x81\x10a\x04*Wa\x04*a\x10\nV[` \x02\x01Qa\r*V[\x89a\x03\xEE`\x10\x87a\x12,V[a\r\nV[\x86\x82`P\x81\x10a\x04WWa\x04Wa\x10\nV[` \x02\x01R`\x01\x01a\x03\xAAV[Pa\x04ma\r\xF1V[_[`\x08\x81\x10\x15a\x04\xAEW\x85\x81`\x08\x81\x10a\x04\x8AWa\x04\x8Aa\x10\nV[` \x02\x01Q\x82\x82`\x08\x81\x10a\x04\xA1Wa\x04\xA1a\x10\nV[` \x02\x01R`\x01\x01a\x04oV[P_[`P\x81\x10\x15a\x05\xAEW_a\x05\x1Ca\x04\xD9\x84`\x07` \x02\x01Qa\x04@\x86`\x04` \x02\x01Qa\rPV[`\x80\x85\x01Q`\xA0\x86\x01Q`\xC0\x87\x01Qa\x04@\x92a\x05\n\x92\x81\x16\x90\x19\x90\x91\x16\x18\x8A\x87`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x8B\x86`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x90P_a\x05Na\x051\x85\x83` \x02\x01Qa\rrV[\x85Q` \x87\x01Q`@\x88\x01Q\x80\x82\x16\x90\x83\x16\x91\x90\x92\x16\x18\x18a\r\nV[`\xC0\x85\x01\x80Q`\xE0\x87\x01R`\xA0\x86\x01\x80Q\x90\x91R`\x80\x86\x01Q\x90R``\x85\x01Q\x90\x91Pa\x05{\x90\x83a\r\nV[`\x80\x85\x01R`@\x84\x01\x80Q``\x86\x01R` \x85\x01\x80Q\x90\x91R\x84Q\x90Ra\x05\xA2\x82\x82a\r\nV[\x84RPP`\x01\x01a\x04\xB1V[P_[`\x08\x81\x10\x15a\x06\x05Wa\x05\xE6\x82\x82`\x08\x81\x10a\x05\xCFWa\x05\xCFa\x10\nV[` \x02\x01Q\x87\x83`\x08\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x86\x82`\x08\x81\x10a\x05\xF8Wa\x05\xF8a\x10\nV[` \x02\x01R`\x01\x01a\x05\xB1V[PPP`\x01\x01a\x02\xD5V[PP\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q``\x80\x87\x01Q`\x80\x88\x01Q`\xA0\x89\x01Q`\xC0\x80\x8B\x01Q`\xE0\x90\x9B\x01Q\x87Q`\x01`\x01`\xC0\x1B\x03\x19\x9B\x83\x1B\x8C\x16\x9A\x81\x01\x9A\x90\x9AR\x97\x81\x1B\x8A\x16`(\x8A\x01R\x94\x85\x1B\x89\x16`0\x89\x01R\x91\x84\x1B\x88\x16`8\x88\x01R\x83\x1B\x87\x16\x86\x85\x01R\x82\x1B\x86\x16`H\x86\x01R\x95\x81\x1B\x85\x16`P\x85\x01R\x91\x90\x91\x1B\x90\x92\x16`X\x82\x01R\x81Q\x80\x82\x03\x83\x01\x81R\x92\x01\x90R\x97\x96PPPPPPPV[``_a\x06\xBE\x83`\x08a\x0F\xA1V[\x90P_a\x04\0a\x06\xCF\x83`\x01a\x0F\xB8V[a\x06\xD9\x91\x90a\x12?V[\x90P_a\x04\0a\x06\xEB\x83a\x07\x80a\x12,V[a\x06\xF5\x91\x90a\x12?V[\x90P_`\x08a\x07\x05\x83`\x01a\x0F\xB8V[a\x07\x0F\x91\x90a\x0FzV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07'Wa\x07'a\x0F\x8DV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x07QW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x80`\xF8\x1B\x81_\x81Q\x81\x10a\x07kWa\x07ka\x10\nV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`@\x80Q`\x80\x86\x90\x1Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01R\x81Q`\x10\x81\x83\x03\x01\x81R`0\x82\x01\x90\x92Ra\x07\xC7\x90\x89\x90\x89\x90\x85\x90\x85\x90`P\x01a\x12iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x95PPPPPP\x92\x91PPV[a\x07\xEBa\r\xF1V[a\x07\xF3a\r\xF1V[gj\t\xE6g\xF3\xBC\xC9\x08\x81Rg\xBBg\xAE\x85\x84\xCA\xA7;` \x82\x01Rg<n\xF3r\xFE\x94\xF8+`@\x82\x01Rg\xA5O\xF5:_\x1D6\xF1``\x82\x01RgQ\x0ER\x7F\xAD\xE6\x82\xD1`\x80\x82\x01Rg\x9B\x05h\x8C+>l\x1F`\xA0\x82\x01Rg\x1F\x83\xD9\xAB\xFBA\xBDk`\xC0\x82\x01Rg[\xE0\xCD\x19\x13~!y`\xE0\x82\x01R\x91\x90PV[a\x08ma\r\xD2V[`@Q\x80a\n\0\x01`@R\x80gB\x8A/\x98\xD7(\xAE\"\x81R` \x01gq7D\x91#\xEFe\xCD\x81R` \x01g\xB5\xC0\xFB\xCF\xECM;/\x81R` \x01g\xE9\xB5\xDB\xA5\x81\x89\xDB\xBC\x81R` \x01g9V\xC2[\xF3H\xB58\x81R` \x01gY\xF1\x11\xF1\xB6\x05\xD0\x19\x81R` \x01g\x92?\x82\xA4\xAF\x19O\x9B\x81R` \x01g\xAB\x1C^\xD5\xDAm\x81\x18\x81R` \x01g\xD8\x07\xAA\x98\xA3\x03\x02B\x81R` \x01g\x12\x83[\x01Epo\xBE\x81R` \x01g$1\x85\xBEN\xE4\xB2\x8C\x81R` \x01gU\x0C}\xC3\xD5\xFF\xB4\xE2\x81R` \x01gr\xBE]t\xF2{\x89o\x81R` \x01g\x80\xDE\xB1\xFE;\x16\x96\xB1\x81R` \x01g\x9B\xDC\x06\xA7%\xC7\x125\x81R` \x01g\xC1\x9B\xF1t\xCFi&\x94\x81R` \x01g\xE4\x9Bi\xC1\x9E\xF1J\xD2\x81R` \x01g\xEF\xBEG\x868O%\xE3\x81R` \x01g\x0F\xC1\x9D\xC6\x8B\x8C\xD5\xB5\x81R` \x01g$\x0C\xA1\xCCw\xAC\x9Ce\x81R` \x01g-\xE9,oY+\x02u\x81R` \x01gJt\x84\xAAn\xA6\xE4\x83\x81R` \x01g\\\xB0\xA9\xDC\xBDA\xFB\xD4\x81R` \x01gv\xF9\x88\xDA\x83\x11S\xB5\x81R` \x01g\x98>QR\xEEf\xDF\xAB\x81R` \x01g\xA81\xC6m-\xB42\x10\x81R` \x01g\xB0\x03'\xC8\x98\xFB!?\x81R` \x01g\xBFY\x7F\xC7\xBE\xEF\x0E\xE4\x81R` \x01g\xC6\xE0\x0B\xF3=\xA8\x8F\xC2\x81R` \x01g\xD5\xA7\x91G\x93\n\xA7%\x81R` \x01g\x06\xCAcQ\xE0\x03\x82o\x81R` \x01g\x14))g\n\x0Enp\x81R` \x01g'\xB7\n\x85F\xD2/\xFC\x81R` \x01g.\x1B!8\\&\xC9&\x81R` \x01gM,m\xFCZ\xC4*\xED\x81R` \x01gS8\r\x13\x9D\x95\xB3\xDF\x81R` \x01ge\nsT\x8B\xAFc\xDE\x81R` \x01gvj\n\xBB<w\xB2\xA8\x81R` \x01g\x81\xC2\xC9.G\xED\xAE\xE6\x81R` \x01g\x92r,\x85\x14\x825;\x81R` \x01g\xA2\xBF\xE8\xA1L\xF1\x03d\x81R` \x01g\xA8\x1AfK\xBCB0\x01\x81R` \x01g\xC2K\x8Bp\xD0\xF8\x97\x91\x81R` \x01g\xC7lQ\xA3\x06T\xBE0\x81R` \x01g\xD1\x92\xE8\x19\xD6\xEFR\x18\x81R` \x01g\xD6\x99\x06$Ue\xA9\x10\x81R` \x01g\xF4\x0E5\x85Wq *\x81R` \x01g\x10j\xA0p2\xBB\xD1\xB8\x81R` \x01g\x19\xA4\xC1\x16\xB8\xD2\xD0\xC8\x81R` \x01g\x1E7l\x08QA\xABS\x81R` \x01g'HwL\xDF\x8E\xEB\x99\x81R` \x01g4\xB0\xBC\xB5\xE1\x9BH\xA8\x81R` \x01g9\x1C\x0C\xB3\xC5\xC9Zc\x81R` \x01gN\xD8\xAAJ\xE3A\x8A\xCB\x81R` \x01g[\x9C\xCAOwc\xE3s\x81R` \x01gh.o\xF3\xD6\xB2\xB8\xA3\x81R` \x01gt\x8F\x82\xEE]\xEF\xB2\xFC\x81R` \x01gx\xA5coC\x17/`\x81R` \x01g\x84\xC8x\x14\xA1\xF0\xABr\x81R` \x01g\x8C\xC7\x02\x08\x1Ad9\xEC\x81R` \x01g\x90\xBE\xFF\xFA#c\x1E(\x81R` \x01g\xA4Pl\xEB\xDE\x82\xBD\xE9\x81R` \x01g\xBE\xF9\xA3\xF7\xB2\xC6y\x15\x81R` \x01g\xC6qx\xF2\xE3rS+\x81R` \x01g\xCA'>\xCE\xEA&a\x9C\x81R` \x01g\xD1\x86\xB8\xC7!\xC0\xC2\x07\x81R` \x01g\xEA\xDA}\xD6\xCD\xE0\xEB\x1E\x81R` \x01g\xF5}O\x7F\xEEn\xD1x\x81R` \x01g\x06\xF0g\xAAr\x17o\xBA\x81R` \x01g\nc}\xC5\xA2\xC8\x98\xA6\x81R` \x01g\x11?\x98\x04\xBE\xF9\r\xAE\x81R` \x01g\x1Bq\x0B5\x13\x1CG\x1B\x81R` \x01g(\xDBw\xF5#\x04}\x84\x81R` \x01g2\xCA\xAB{@\xC7$\x93\x81R` \x01g<\x9E\xBE\n\x15\xC9\xBE\xBC\x81R` \x01gC\x1Dg\xC4\x9C\x10\rL\x81R` \x01gL\xC5\xD4\xBE\xCB>B\xB6\x81R` \x01gY\x7F)\x9C\xFCe~*\x81R` \x01g_\xCBo\xAB:\xD6\xFA\xEC\x81R` \x01glD\x19\x8CJGX\x17\x81RP\x90P\x90V[_g\x03\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x06\x83\x90\x1C\x16a\x0C\xF7`=\x84a\r\x90V[a\r\x02`\x13\x85a\r\x90V[\x18\x18\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16_a\r#\x82\x84a\x0F\xB8V[\x93\x92PPPV[_g\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x07\x83\x90\x1C\x16a\rE`\x08\x84a\r\x90V[a\r\x02`\x01\x85a\r\x90V[_a\r\\`)\x83a\r\x90V[a\rg`\x12\x84a\r\x90V[a\r\x02`\x0E\x85a\r\x90V[_a\r~`'\x83a\r\x90V[a\r\x89`\"\x84a\r\x90V[a\r\x02`\x1C\x85[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_a\r\xA6\x83`@a\x12,V[\x82\x90\x1B\x91\x90\x92\x1C\x17\x91\x90PV[`@Q\x80a\x02\0\x01`@R\x80`\x10\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\n\0\x01`@R\x80`P\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[__` \x83\x85\x03\x12\x15a\x0E!W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E7W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0EGW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E]W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0EnW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x0F\x03W`?\x19\x87\x86\x03\x01\x84Ra\x0E\xEE\x85\x83Qa\x0E~V[\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x0E\xD2V[P\x92\x96\x95PPPPPPV[a\x02\0\x81\x01\x81\x83_[`\x10\x81\x10\x15a\x0F7W\x81Q\x83R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01a\x0F\x18V[PPP\x92\x91PPV[` \x81R_a\r#` \x83\x01\x84a\x0E~V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_\x82a\x0F\x88Wa\x0F\x88a\x0FRV[P\x04\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x01\xB3Wa\x01\xB3a\x0FfV[\x80\x82\x01\x80\x82\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[__\x85\x85\x11\x15a\x0F\xD9W__\xFD[\x83\x86\x11\x15a\x0F\xE5W__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[_`\x01\x82\x01a\x10\x03Wa\x10\x03a\x0FfV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x805`\x01`\x01`\xC0\x1B\x03\x19\x81\x16\x90`\x08\x84\x10\x15a\x10OW`\x01`\x01`\xC0\x1B\x03\x19`\x08\x85\x90\x03`\x03\x1B\x81\x90\x1B\x82\x16\x16\x91P[P\x92\x91PPV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x10\x7FWa\x10\x7Fa\x0F\x8DV[`@R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x10\x97W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xADW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x10\xBDW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xD7Wa\x10\xD7a\x0F\x8DV[\x80`\x05\x1Ba\x10\xE7` \x82\x01a\x10VV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x11\x02W__\xFD[` \x85\x01\x92P[\x83\x83\x10\x15a\x11\xA4W\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11'W__\xFD[\x85\x01`?\x81\x01\x89\x13a\x117W__\xFD[` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11TWa\x11Ta\x0F\x8DV[a\x11g`\x1F\x82\x01`\x1F\x19\x16` \x01a\x10VV[\x81\x81R`@\x83\x83\x01\x01\x8B\x10\x15a\x11{W__\xFD[\x81`@\x84\x01` \x83\x01^_` \x83\x83\x01\x01R\x80\x85RPPP` \x82\x01\x91P` \x83\x01\x92Pa\x11\tV[\x97\x96PPPPPPPV[_a\x02\0\x82\x84\x03\x12\x15a\x11\xC0W__\xFD[\x82`\x1F\x83\x01\x12a\x11\xCEW__\xFD[`@Qa\x02\0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x11\xF2Wa\x11\xF2a\x0F\x8DV[`@R\x80a\x02\0\x84\x01\x85\x81\x11\x15a\x12\x07W__\xFD[\x84[\x81\x81\x10\x15a\x12!W\x80Q\x83R` \x92\x83\x01\x92\x01a\x12\tV[P\x91\x95\x94PPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[_\x82a\x12MWa\x12Ma\x0FRV[P\x06\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x83\x85\x827_\x84\x82\x01_\x81Ra\x11\xA4a\x12\x81\x82\x87a\x12RV[\x85a\x12RV\xFE\xA2dipfsX\"\x12 \\\xC0Jp(\x9F\x08\xCC\xCF\x8D,\xE8\xB5\xE9\xCFI\xE3\x18aP\n\xC5F{\xC1?\xE7*\xE6\x98g0dsolcC\0\x08\x1C\x003";
    /// The deployed bytecode of the contract.
    pub static SHA_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct Sha<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for Sha<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for Sha<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for Sha<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for Sha<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(Sha)).field(&self.address()).finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> Sha<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    SHA_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                SHA_ABI.clone(),
                SHA_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `parseMessage1024` (0x056494f9) function
        pub fn parse_message_1024(
            &self,
            padded_message: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::std::vec::Vec<::ethers::core::types::Bytes>,
        > {
            self.0
                .method_hash([5, 100, 148, 249], padded_message)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `parseMessageBlock1024` (0x60817b5c) function
        pub fn parse_message_block_1024(
            &self,
            message_block: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            [::ethers::core::types::U256; 16],
        > {
            self.0
                .method_hash([96, 129, 123, 92], message_block)
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `sha512` (0x873d729e) function
        pub fn sha_512(
            &self,
            message: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<
            M,
            ::ethers::core::types::Bytes,
        > {
            self.0
                .method_hash([135, 61, 114, 158], message)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for Sha<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `parseMessage1024` function with signature `parseMessage1024(bytes)` and selector `0x056494f9`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "parseMessage1024", abi = "parseMessage1024(bytes)")]
    pub struct ParseMessage1024Call {
        pub padded_message: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `parseMessageBlock1024` function with signature `parseMessageBlock1024(bytes)` and selector `0x60817b5c`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "parseMessageBlock1024", abi = "parseMessageBlock1024(bytes)")]
    pub struct ParseMessageBlock1024Call {
        pub message_block: ::ethers::core::types::Bytes,
    }
    ///Container type for all input parameters for the `sha512` function with signature `sha512(bytes)` and selector `0x873d729e`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "sha512", abi = "sha512(bytes)")]
    pub struct Sha512Call {
        pub message: ::ethers::core::types::Bytes,
    }
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum ShaCalls {
        ParseMessage1024(ParseMessage1024Call),
        ParseMessageBlock1024(ParseMessageBlock1024Call),
        Sha512(Sha512Call),
    }
    impl ::ethers::core::abi::AbiDecode for ShaCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <ParseMessage1024Call as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ParseMessage1024(decoded));
            }
            if let Ok(decoded) = <ParseMessageBlock1024Call as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::ParseMessageBlock1024(decoded));
            }
            if let Ok(decoded) = <Sha512Call as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Sha512(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for ShaCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::ParseMessage1024(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::ParseMessageBlock1024(element) => {
                    ::ethers::core::abi::AbiEncode::encode(element)
                }
                Self::Sha512(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for ShaCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::ParseMessage1024(element) => ::core::fmt::Display::fmt(element, f),
                Self::ParseMessageBlock1024(element) => {
                    ::core::fmt::Display::fmt(element, f)
                }
                Self::Sha512(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<ParseMessage1024Call> for ShaCalls {
        fn from(value: ParseMessage1024Call) -> Self {
            Self::ParseMessage1024(value)
        }
    }
    impl ::core::convert::From<ParseMessageBlock1024Call> for ShaCalls {
        fn from(value: ParseMessageBlock1024Call) -> Self {
            Self::ParseMessageBlock1024(value)
        }
    }
    impl ::core::convert::From<Sha512Call> for ShaCalls {
        fn from(value: Sha512Call) -> Self {
            Self::Sha512(value)
        }
    }
    ///Container type for all return fields from the `parseMessage1024` function with signature `parseMessage1024(bytes)` and selector `0x056494f9`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ParseMessage1024Return(pub ::std::vec::Vec<::ethers::core::types::Bytes>);
    ///Container type for all return fields from the `parseMessageBlock1024` function with signature `parseMessageBlock1024(bytes)` and selector `0x60817b5c`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct ParseMessageBlock1024Return(pub [::ethers::core::types::U256; 16]);
    ///Container type for all return fields from the `sha512` function with signature `sha512(bytes)` and selector `0x873d729e`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct Sha512Return(pub ::ethers::core::types::Bytes);
}
