/**

Generated by the following Solidity interface...
```solidity
interface Sha {
    function parseMessage1024(bytes memory paddedMessage) external pure returns (bytes[] memory);
    function parseMessageBlock1024(bytes memory messageBlock) external pure returns (uint256[16] memory);
    function sha512(bytes memory message) external view returns (bytes memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "parseMessage1024",
    "inputs": [
      {
        "name": "paddedMessage",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes[]",
        "internalType": "bytes[]"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "parseMessageBlock1024",
    "inputs": [
      {
        "name": "messageBlock",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[16]",
        "internalType": "uint256[16]"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "sha512",
    "inputs": [
      {
        "name": "message",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "stateMutability": "view"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod Sha {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b506112bd8061001c5f395ff3fe608060405234801561000f575f5ffd5b506004361061003f575f3560e01c8063056494f91461004357806360817b5c1461006c578063873d729e1461008c575b5f5ffd5b610056610051366004610e10565b6100ac565b6040516100639190610eac565b60405180910390f35b61007f61007a366004610e10565b6101b9565b6040516100639190610f0f565b61009f61009a366004610e10565b61023a565b6040516100639190610f40565b60605f6100ba608084610f7a565b90505f8167ffffffffffffffff8111156100d6576100d6610f8d565b60405190808252806020026020018201604052801561010957816020015b60608152602001906001900390816100f45790505b5090505f805b61011a846080610fa1565b8110156101ac5786818761012f826080610fb8565b9261013c93929190610fcb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525086925085915061017d905081610ff2565b94508151811061018f5761018f61100a565b60209081029190910101526101a5816080610fb8565b905061010f565b5090925050505b92915050565b6101c1610db3565b6101c9610db3565b5f805b6080811015610230578581866101e3826008610fb8565b926101f093929190610fcb565b6101f99161101e565b60c01c838361020781610ff2565b9450601081106102195761021961100a565b6020020152610229816008610fb8565b90506101cc565b5090949350505050565b60605f61024784846106b0565b60405163056494f960e01b81529091505f90309063056494f99061026f908590600401610f40565b5f60405180830381865afa158015610289573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102b09190810190611087565b80519091506102bd610dd2565b5f6102c66107e3565b90505f6102d1610865565b90505f5b84811015610610575f306001600160a01b03166360817b5c8884815181106102ff576102ff61100a565b60200260200101516040518263ffffffff1660e01b81526004016103239190610f40565b61020060405180830381865afa15801561033f573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036391906111af565b90505f5b60108110156103a6578181601081106103825761038261100a565b60200201518682605081106103995761039961100a565b6020020152600101610367565b5060105b6050811015610464576104456104086103e2886103c860028661122c565b605081106103d8576103d861100a565b6020020151610cdc565b886103ee60078661122c565b605081106103fe576103fe61100a565b6020020151610d0a565b6104406104348961041a600f8761122c565b6050811061042a5761042a61100a565b6020020151610d2a565b896103ee60108761122c565b610d0a565b8682605081106104575761045761100a565b60200201526001016103aa565b5061046d610df1565b5f5b60088110156104ae5785816008811061048a5761048a61100a565b60200201518282600881106104a1576104a161100a565b602002015260010161046f565b505f5b60508110156105ae575f61051c6104d984600760200201516104408660046020020151610d50565b608085015160a086015160c08701516104409261050a9281169019909116188a87605081106103fe576103fe61100a565b8b86605081106103fe576103fe61100a565b90505f61054e61053185836020020151610d72565b855160208701516040880151808216908316919092161818610d0a565b60c08501805160e087015260a08601805190915260808601519052606085015190915061057b9083610d0a565b60808501526040840180516060860152602085018051909152845190526105a28282610d0a565b845250506001016104b1565b505f5b6008811015610605576105e68282600881106105cf576105cf61100a565b60200201518783600881106103fe576103fe61100a565b8682600881106105f8576105f861100a565b60200201526001016105b1565b5050506001016102d5565b50508051602080830151604080850151606080870151608088015160a089015160c0808b015160e0909b015187516001600160c01b03199b831b8c169a81019a909a5297811b8a1660288a015294851b8916603089015291841b88166038880152831b871686850152821b8616604886015295811b851660508501529190911b909216605882015281518082038301815292019052979650505050505050565b60605f6106be836008610fa1565b90505f6104006106cf836001610fb8565b6106d9919061123f565b90505f6104006106eb8361078061122c565b6106f5919061123f565b90505f6008610705836001610fb8565b61070f9190610f7a565b67ffffffffffffffff81111561072757610727610f8d565b6040519080825280601f01601f191660200182016040528015610751576020820181803683370190505b509050608060f81b815f8151811061076b5761076b61100a565b60200101906001600160f81b03191690815f1a90535060408051608086901b6fffffffffffffffffffffffffffffffff1916602082015281516010818303018152603082019092526107c7908990899085908590605001611269565b6040516020818303038152906040529550505050505092915050565b6107eb610df1565b6107f3610df1565b676a09e667f3bcc908815267bb67ae8584caa73b6020820152673c6ef372fe94f82b604082015267a54ff53a5f1d36f1606082015267510e527fade682d16080820152679b05688c2b3e6c1f60a0820152671f83d9abfb41bd6b60c0820152675be0cd19137e217960e0820152919050565b61086d610dd2565b60405180610a00016040528067428a2f98d728ae228152602001677137449123ef65cd815260200167b5c0fbcfec4d3b2f815260200167e9b5dba58189dbbc8152602001673956c25bf348b53881526020016759f111f1b605d019815260200167923f82a4af194f9b815260200167ab1c5ed5da6d8118815260200167d807aa98a303024281526020016712835b0145706fbe815260200167243185be4ee4b28c815260200167550c7dc3d5ffb4e281526020016772be5d74f27b896f81526020016780deb1fe3b1696b18152602001679bdc06a725c71235815260200167c19bf174cf692694815260200167e49b69c19ef14ad2815260200167efbe4786384f25e38152602001670fc19dc68b8cd5b5815260200167240ca1cc77ac9c658152602001672de92c6f592b02758152602001674a7484aa6ea6e4838152602001675cb0a9dcbd41fbd481526020016776f988da831153b5815260200167983e5152ee66dfab815260200167a831c66d2db43210815260200167b00327c898fb213f815260200167bf597fc7beef0ee4815260200167c6e00bf33da88fc2815260200167d5a79147930aa72581526020016706ca6351e003826f815260200167142929670a0e6e7081526020016727b70a8546d22ffc8152602001672e1b21385c26c9268152602001674d2c6dfc5ac42aed81526020016753380d139d95b3df815260200167650a73548baf63de815260200167766a0abb3c77b2a881526020016781c2c92e47edaee681526020016792722c851482353b815260200167a2bfe8a14cf10364815260200167a81a664bbc423001815260200167c24b8b70d0f89791815260200167c76c51a30654be30815260200167d192e819d6ef5218815260200167d69906245565a910815260200167f40e35855771202a815260200167106aa07032bbd1b881526020016719a4c116b8d2d0c88152602001671e376c085141ab538152602001672748774cdf8eeb9981526020016734b0bcb5e19b48a8815260200167391c0cb3c5c95a638152602001674ed8aa4ae3418acb8152602001675b9cca4f7763e373815260200167682e6ff3d6b2b8a3815260200167748f82ee5defb2fc81526020016778a5636f43172f6081526020016784c87814a1f0ab728152602001678cc702081a6439ec81526020016790befffa23631e28815260200167a4506cebde82bde9815260200167bef9a3f7b2c67915815260200167c67178f2e372532b815260200167ca273eceea26619c815260200167d186b8c721c0c207815260200167eada7dd6cde0eb1e815260200167f57d4f7fee6ed17881526020016706f067aa72176fba8152602001670a637dc5a2c898a6815260200167113f9804bef90dae8152602001671b710b35131c471b81526020016728db77f523047d8481526020016732caab7b40c724938152602001673c9ebe0a15c9bebc815260200167431d67c49c100d4c8152602001674cc5d4becb3e42b6815260200167597f299cfc657e2a8152602001675fcb6fab3ad6faec8152602001676c44198c4a475817815250905090565b5f6703ffffffffffffff600683901c16610cf7603d84610d90565b610d02601385610d90565b181892915050565b67ffffffffffffffff91821691165f610d238284610fb8565b9392505050565b5f6701ffffffffffffff600783901c16610d45600884610d90565b610d02600185610d90565b5f610d5c602983610d90565b610d67601284610d90565b610d02600e85610d90565b5f610d7e602783610d90565b610d89602284610d90565b610d02601c855b67ffffffffffffffff165f610da683604061122c565b82901b9190921c17919050565b6040518061020001604052806010906020820280368337509192915050565b60405180610a0001604052806050906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b5f5f60208385031215610e21575f5ffd5b823567ffffffffffffffff811115610e37575f5ffd5b8301601f81018513610e47575f5ffd5b803567ffffffffffffffff811115610e5d575f5ffd5b856020828401011115610e6e575f5ffd5b6020919091019590945092505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610f0357603f19878603018452610eee858351610e7e565b94506020938401939190910190600101610ed2565b50929695505050505050565b610200810181835f5b6010811015610f37578151835260209283019290910190600101610f18565b50505092915050565b602081525f610d236020830184610e7e565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f82610f8857610f88610f52565b500490565b634e487b7160e01b5f52604160045260245ffd5b80820281158282048414176101b3576101b3610f66565b808201808211156101b3576101b3610f66565b5f5f85851115610fd9575f5ffd5b83861115610fe5575f5ffd5b5050820193919092039150565b5f6001820161100357611003610f66565b5060010190565b634e487b7160e01b5f52603260045260245ffd5b80356001600160c01b0319811690600884101561104f576001600160c01b0319600885900360031b81901b82161691505b5092915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561107f5761107f610f8d565b604052919050565b5f60208284031215611097575f5ffd5b815167ffffffffffffffff8111156110ad575f5ffd5b8201601f810184136110bd575f5ffd5b805167ffffffffffffffff8111156110d7576110d7610f8d565b8060051b6110e760208201611056565b91825260208184018101929081019087841115611102575f5ffd5b6020850192505b838310156111a457825167ffffffffffffffff811115611127575f5ffd5b8501603f81018913611137575f5ffd5b602081015167ffffffffffffffff81111561115457611154610f8d565b611167601f8201601f1916602001611056565b8181526040838301018b101561117b575f5ffd5b8160408401602083015e5f60208383010152808552505050602082019150602083019250611109565b979650505050505050565b5f61020082840312156111c0575f5ffd5b82601f8301126111ce575f5ffd5b604051610200810167ffffffffffffffff811182821017156111f2576111f2610f8d565b60405280610200840185811115611207575f5ffd5b845b81811015611221578051835260209283019201611209565b509195945050505050565b818103818111156101b3576101b3610f66565b5f8261124d5761124d610f52565b500690565b5f81518060208401855e5f93019283525090919050565b838582375f8482015f81526111a46112818287611252565b8561125256fea26469706673582212205cc04a70289f08cccf8d2ce8b5e9cf49e31861500ac5467bc13fe72ae698673064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x12\xBD\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x05d\x94\xF9\x14a\0CW\x80c`\x81{\\\x14a\0lW\x80c\x87=r\x9E\x14a\0\x8CW[__\xFD[a\0Va\0Q6`\x04a\x0E\x10V[a\0\xACV[`@Qa\0c\x91\x90a\x0E\xACV[`@Q\x80\x91\x03\x90\xF3[a\0\x7Fa\0z6`\x04a\x0E\x10V[a\x01\xB9V[`@Qa\0c\x91\x90a\x0F\x0FV[a\0\x9Fa\0\x9A6`\x04a\x0E\x10V[a\x02:V[`@Qa\0c\x91\x90a\x0F@V[``_a\0\xBA`\x80\x84a\x0FzV[\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xD6Wa\0\xD6a\x0F\x8DV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\tW\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0\xF4W\x90P[P\x90P_\x80[a\x01\x1A\x84`\x80a\x0F\xA1V[\x81\x10\x15a\x01\xACW\x86\x81\x87a\x01/\x82`\x80a\x0F\xB8V[\x92a\x01<\x93\x92\x91\x90a\x0F\xCBV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x86\x92P\x85\x91Pa\x01}\x90P\x81a\x0F\xF2V[\x94P\x81Q\x81\x10a\x01\x8FWa\x01\x8Fa\x10\nV[` \x90\x81\x02\x91\x90\x91\x01\x01Ra\x01\xA5\x81`\x80a\x0F\xB8V[\x90Pa\x01\x0FV[P\x90\x92PPP[\x92\x91PPV[a\x01\xC1a\r\xB3V[a\x01\xC9a\r\xB3V[_\x80[`\x80\x81\x10\x15a\x020W\x85\x81\x86a\x01\xE3\x82`\x08a\x0F\xB8V[\x92a\x01\xF0\x93\x92\x91\x90a\x0F\xCBV[a\x01\xF9\x91a\x10\x1EV[`\xC0\x1C\x83\x83a\x02\x07\x81a\x0F\xF2V[\x94P`\x10\x81\x10a\x02\x19Wa\x02\x19a\x10\nV[` \x02\x01Ra\x02)\x81`\x08a\x0F\xB8V[\x90Pa\x01\xCCV[P\x90\x94\x93PPPPV[``_a\x02G\x84\x84a\x06\xB0V[`@Qc\x05d\x94\xF9`\xE0\x1B\x81R\x90\x91P_\x900\x90c\x05d\x94\xF9\x90a\x02o\x90\x85\x90`\x04\x01a\x0F@V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x89W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02\xB0\x91\x90\x81\x01\x90a\x10\x87V[\x80Q\x90\x91Pa\x02\xBDa\r\xD2V[_a\x02\xC6a\x07\xE3V[\x90P_a\x02\xD1a\x08eV[\x90P_[\x84\x81\x10\x15a\x06\x10W_0`\x01`\x01`\xA0\x1B\x03\x16c`\x81{\\\x88\x84\x81Q\x81\x10a\x02\xFFWa\x02\xFFa\x10\nV[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03#\x91\x90a\x0F@V[a\x02\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03?W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03c\x91\x90a\x11\xAFV[\x90P_[`\x10\x81\x10\x15a\x03\xA6W\x81\x81`\x10\x81\x10a\x03\x82Wa\x03\x82a\x10\nV[` \x02\x01Q\x86\x82`P\x81\x10a\x03\x99Wa\x03\x99a\x10\nV[` \x02\x01R`\x01\x01a\x03gV[P`\x10[`P\x81\x10\x15a\x04dWa\x04Ea\x04\x08a\x03\xE2\x88a\x03\xC8`\x02\x86a\x12,V[`P\x81\x10a\x03\xD8Wa\x03\xD8a\x10\nV[` \x02\x01Qa\x0C\xDCV[\x88a\x03\xEE`\x07\x86a\x12,V[`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[` \x02\x01Qa\r\nV[a\x04@a\x044\x89a\x04\x1A`\x0F\x87a\x12,V[`P\x81\x10a\x04*Wa\x04*a\x10\nV[` \x02\x01Qa\r*V[\x89a\x03\xEE`\x10\x87a\x12,V[a\r\nV[\x86\x82`P\x81\x10a\x04WWa\x04Wa\x10\nV[` \x02\x01R`\x01\x01a\x03\xAAV[Pa\x04ma\r\xF1V[_[`\x08\x81\x10\x15a\x04\xAEW\x85\x81`\x08\x81\x10a\x04\x8AWa\x04\x8Aa\x10\nV[` \x02\x01Q\x82\x82`\x08\x81\x10a\x04\xA1Wa\x04\xA1a\x10\nV[` \x02\x01R`\x01\x01a\x04oV[P_[`P\x81\x10\x15a\x05\xAEW_a\x05\x1Ca\x04\xD9\x84`\x07` \x02\x01Qa\x04@\x86`\x04` \x02\x01Qa\rPV[`\x80\x85\x01Q`\xA0\x86\x01Q`\xC0\x87\x01Qa\x04@\x92a\x05\n\x92\x81\x16\x90\x19\x90\x91\x16\x18\x8A\x87`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x8B\x86`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x90P_a\x05Na\x051\x85\x83` \x02\x01Qa\rrV[\x85Q` \x87\x01Q`@\x88\x01Q\x80\x82\x16\x90\x83\x16\x91\x90\x92\x16\x18\x18a\r\nV[`\xC0\x85\x01\x80Q`\xE0\x87\x01R`\xA0\x86\x01\x80Q\x90\x91R`\x80\x86\x01Q\x90R``\x85\x01Q\x90\x91Pa\x05{\x90\x83a\r\nV[`\x80\x85\x01R`@\x84\x01\x80Q``\x86\x01R` \x85\x01\x80Q\x90\x91R\x84Q\x90Ra\x05\xA2\x82\x82a\r\nV[\x84RPP`\x01\x01a\x04\xB1V[P_[`\x08\x81\x10\x15a\x06\x05Wa\x05\xE6\x82\x82`\x08\x81\x10a\x05\xCFWa\x05\xCFa\x10\nV[` \x02\x01Q\x87\x83`\x08\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x86\x82`\x08\x81\x10a\x05\xF8Wa\x05\xF8a\x10\nV[` \x02\x01R`\x01\x01a\x05\xB1V[PPP`\x01\x01a\x02\xD5V[PP\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q``\x80\x87\x01Q`\x80\x88\x01Q`\xA0\x89\x01Q`\xC0\x80\x8B\x01Q`\xE0\x90\x9B\x01Q\x87Q`\x01`\x01`\xC0\x1B\x03\x19\x9B\x83\x1B\x8C\x16\x9A\x81\x01\x9A\x90\x9AR\x97\x81\x1B\x8A\x16`(\x8A\x01R\x94\x85\x1B\x89\x16`0\x89\x01R\x91\x84\x1B\x88\x16`8\x88\x01R\x83\x1B\x87\x16\x86\x85\x01R\x82\x1B\x86\x16`H\x86\x01R\x95\x81\x1B\x85\x16`P\x85\x01R\x91\x90\x91\x1B\x90\x92\x16`X\x82\x01R\x81Q\x80\x82\x03\x83\x01\x81R\x92\x01\x90R\x97\x96PPPPPPPV[``_a\x06\xBE\x83`\x08a\x0F\xA1V[\x90P_a\x04\0a\x06\xCF\x83`\x01a\x0F\xB8V[a\x06\xD9\x91\x90a\x12?V[\x90P_a\x04\0a\x06\xEB\x83a\x07\x80a\x12,V[a\x06\xF5\x91\x90a\x12?V[\x90P_`\x08a\x07\x05\x83`\x01a\x0F\xB8V[a\x07\x0F\x91\x90a\x0FzV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07'Wa\x07'a\x0F\x8DV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x07QW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x80`\xF8\x1B\x81_\x81Q\x81\x10a\x07kWa\x07ka\x10\nV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`@\x80Q`\x80\x86\x90\x1Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01R\x81Q`\x10\x81\x83\x03\x01\x81R`0\x82\x01\x90\x92Ra\x07\xC7\x90\x89\x90\x89\x90\x85\x90\x85\x90`P\x01a\x12iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x95PPPPPP\x92\x91PPV[a\x07\xEBa\r\xF1V[a\x07\xF3a\r\xF1V[gj\t\xE6g\xF3\xBC\xC9\x08\x81Rg\xBBg\xAE\x85\x84\xCA\xA7;` \x82\x01Rg<n\xF3r\xFE\x94\xF8+`@\x82\x01Rg\xA5O\xF5:_\x1D6\xF1``\x82\x01RgQ\x0ER\x7F\xAD\xE6\x82\xD1`\x80\x82\x01Rg\x9B\x05h\x8C+>l\x1F`\xA0\x82\x01Rg\x1F\x83\xD9\xAB\xFBA\xBDk`\xC0\x82\x01Rg[\xE0\xCD\x19\x13~!y`\xE0\x82\x01R\x91\x90PV[a\x08ma\r\xD2V[`@Q\x80a\n\0\x01`@R\x80gB\x8A/\x98\xD7(\xAE\"\x81R` \x01gq7D\x91#\xEFe\xCD\x81R` \x01g\xB5\xC0\xFB\xCF\xECM;/\x81R` \x01g\xE9\xB5\xDB\xA5\x81\x89\xDB\xBC\x81R` \x01g9V\xC2[\xF3H\xB58\x81R` \x01gY\xF1\x11\xF1\xB6\x05\xD0\x19\x81R` \x01g\x92?\x82\xA4\xAF\x19O\x9B\x81R` \x01g\xAB\x1C^\xD5\xDAm\x81\x18\x81R` \x01g\xD8\x07\xAA\x98\xA3\x03\x02B\x81R` \x01g\x12\x83[\x01Epo\xBE\x81R` \x01g$1\x85\xBEN\xE4\xB2\x8C\x81R` \x01gU\x0C}\xC3\xD5\xFF\xB4\xE2\x81R` \x01gr\xBE]t\xF2{\x89o\x81R` \x01g\x80\xDE\xB1\xFE;\x16\x96\xB1\x81R` \x01g\x9B\xDC\x06\xA7%\xC7\x125\x81R` \x01g\xC1\x9B\xF1t\xCFi&\x94\x81R` \x01g\xE4\x9Bi\xC1\x9E\xF1J\xD2\x81R` \x01g\xEF\xBEG\x868O%\xE3\x81R` \x01g\x0F\xC1\x9D\xC6\x8B\x8C\xD5\xB5\x81R` \x01g$\x0C\xA1\xCCw\xAC\x9Ce\x81R` \x01g-\xE9,oY+\x02u\x81R` \x01gJt\x84\xAAn\xA6\xE4\x83\x81R` \x01g\\\xB0\xA9\xDC\xBDA\xFB\xD4\x81R` \x01gv\xF9\x88\xDA\x83\x11S\xB5\x81R` \x01g\x98>QR\xEEf\xDF\xAB\x81R` \x01g\xA81\xC6m-\xB42\x10\x81R` \x01g\xB0\x03'\xC8\x98\xFB!?\x81R` \x01g\xBFY\x7F\xC7\xBE\xEF\x0E\xE4\x81R` \x01g\xC6\xE0\x0B\xF3=\xA8\x8F\xC2\x81R` \x01g\xD5\xA7\x91G\x93\n\xA7%\x81R` \x01g\x06\xCAcQ\xE0\x03\x82o\x81R` \x01g\x14))g\n\x0Enp\x81R` \x01g'\xB7\n\x85F\xD2/\xFC\x81R` \x01g.\x1B!8\\&\xC9&\x81R` \x01gM,m\xFCZ\xC4*\xED\x81R` \x01gS8\r\x13\x9D\x95\xB3\xDF\x81R` \x01ge\nsT\x8B\xAFc\xDE\x81R` \x01gvj\n\xBB<w\xB2\xA8\x81R` \x01g\x81\xC2\xC9.G\xED\xAE\xE6\x81R` \x01g\x92r,\x85\x14\x825;\x81R` \x01g\xA2\xBF\xE8\xA1L\xF1\x03d\x81R` \x01g\xA8\x1AfK\xBCB0\x01\x81R` \x01g\xC2K\x8Bp\xD0\xF8\x97\x91\x81R` \x01g\xC7lQ\xA3\x06T\xBE0\x81R` \x01g\xD1\x92\xE8\x19\xD6\xEFR\x18\x81R` \x01g\xD6\x99\x06$Ue\xA9\x10\x81R` \x01g\xF4\x0E5\x85Wq *\x81R` \x01g\x10j\xA0p2\xBB\xD1\xB8\x81R` \x01g\x19\xA4\xC1\x16\xB8\xD2\xD0\xC8\x81R` \x01g\x1E7l\x08QA\xABS\x81R` \x01g'HwL\xDF\x8E\xEB\x99\x81R` \x01g4\xB0\xBC\xB5\xE1\x9BH\xA8\x81R` \x01g9\x1C\x0C\xB3\xC5\xC9Zc\x81R` \x01gN\xD8\xAAJ\xE3A\x8A\xCB\x81R` \x01g[\x9C\xCAOwc\xE3s\x81R` \x01gh.o\xF3\xD6\xB2\xB8\xA3\x81R` \x01gt\x8F\x82\xEE]\xEF\xB2\xFC\x81R` \x01gx\xA5coC\x17/`\x81R` \x01g\x84\xC8x\x14\xA1\xF0\xABr\x81R` \x01g\x8C\xC7\x02\x08\x1Ad9\xEC\x81R` \x01g\x90\xBE\xFF\xFA#c\x1E(\x81R` \x01g\xA4Pl\xEB\xDE\x82\xBD\xE9\x81R` \x01g\xBE\xF9\xA3\xF7\xB2\xC6y\x15\x81R` \x01g\xC6qx\xF2\xE3rS+\x81R` \x01g\xCA'>\xCE\xEA&a\x9C\x81R` \x01g\xD1\x86\xB8\xC7!\xC0\xC2\x07\x81R` \x01g\xEA\xDA}\xD6\xCD\xE0\xEB\x1E\x81R` \x01g\xF5}O\x7F\xEEn\xD1x\x81R` \x01g\x06\xF0g\xAAr\x17o\xBA\x81R` \x01g\nc}\xC5\xA2\xC8\x98\xA6\x81R` \x01g\x11?\x98\x04\xBE\xF9\r\xAE\x81R` \x01g\x1Bq\x0B5\x13\x1CG\x1B\x81R` \x01g(\xDBw\xF5#\x04}\x84\x81R` \x01g2\xCA\xAB{@\xC7$\x93\x81R` \x01g<\x9E\xBE\n\x15\xC9\xBE\xBC\x81R` \x01gC\x1Dg\xC4\x9C\x10\rL\x81R` \x01gL\xC5\xD4\xBE\xCB>B\xB6\x81R` \x01gY\x7F)\x9C\xFCe~*\x81R` \x01g_\xCBo\xAB:\xD6\xFA\xEC\x81R` \x01glD\x19\x8CJGX\x17\x81RP\x90P\x90V[_g\x03\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x06\x83\x90\x1C\x16a\x0C\xF7`=\x84a\r\x90V[a\r\x02`\x13\x85a\r\x90V[\x18\x18\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16_a\r#\x82\x84a\x0F\xB8V[\x93\x92PPPV[_g\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x07\x83\x90\x1C\x16a\rE`\x08\x84a\r\x90V[a\r\x02`\x01\x85a\r\x90V[_a\r\\`)\x83a\r\x90V[a\rg`\x12\x84a\r\x90V[a\r\x02`\x0E\x85a\r\x90V[_a\r~`'\x83a\r\x90V[a\r\x89`\"\x84a\r\x90V[a\r\x02`\x1C\x85[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_a\r\xA6\x83`@a\x12,V[\x82\x90\x1B\x91\x90\x92\x1C\x17\x91\x90PV[`@Q\x80a\x02\0\x01`@R\x80`\x10\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\n\0\x01`@R\x80`P\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[__` \x83\x85\x03\x12\x15a\x0E!W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E7W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0EGW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E]W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0EnW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x0F\x03W`?\x19\x87\x86\x03\x01\x84Ra\x0E\xEE\x85\x83Qa\x0E~V[\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x0E\xD2V[P\x92\x96\x95PPPPPPV[a\x02\0\x81\x01\x81\x83_[`\x10\x81\x10\x15a\x0F7W\x81Q\x83R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01a\x0F\x18V[PPP\x92\x91PPV[` \x81R_a\r#` \x83\x01\x84a\x0E~V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_\x82a\x0F\x88Wa\x0F\x88a\x0FRV[P\x04\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x01\xB3Wa\x01\xB3a\x0FfV[\x80\x82\x01\x80\x82\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[__\x85\x85\x11\x15a\x0F\xD9W__\xFD[\x83\x86\x11\x15a\x0F\xE5W__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[_`\x01\x82\x01a\x10\x03Wa\x10\x03a\x0FfV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x805`\x01`\x01`\xC0\x1B\x03\x19\x81\x16\x90`\x08\x84\x10\x15a\x10OW`\x01`\x01`\xC0\x1B\x03\x19`\x08\x85\x90\x03`\x03\x1B\x81\x90\x1B\x82\x16\x16\x91P[P\x92\x91PPV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x10\x7FWa\x10\x7Fa\x0F\x8DV[`@R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x10\x97W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xADW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x10\xBDW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xD7Wa\x10\xD7a\x0F\x8DV[\x80`\x05\x1Ba\x10\xE7` \x82\x01a\x10VV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x11\x02W__\xFD[` \x85\x01\x92P[\x83\x83\x10\x15a\x11\xA4W\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11'W__\xFD[\x85\x01`?\x81\x01\x89\x13a\x117W__\xFD[` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11TWa\x11Ta\x0F\x8DV[a\x11g`\x1F\x82\x01`\x1F\x19\x16` \x01a\x10VV[\x81\x81R`@\x83\x83\x01\x01\x8B\x10\x15a\x11{W__\xFD[\x81`@\x84\x01` \x83\x01^_` \x83\x83\x01\x01R\x80\x85RPPP` \x82\x01\x91P` \x83\x01\x92Pa\x11\tV[\x97\x96PPPPPPPV[_a\x02\0\x82\x84\x03\x12\x15a\x11\xC0W__\xFD[\x82`\x1F\x83\x01\x12a\x11\xCEW__\xFD[`@Qa\x02\0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x11\xF2Wa\x11\xF2a\x0F\x8DV[`@R\x80a\x02\0\x84\x01\x85\x81\x11\x15a\x12\x07W__\xFD[\x84[\x81\x81\x10\x15a\x12!W\x80Q\x83R` \x92\x83\x01\x92\x01a\x12\tV[P\x91\x95\x94PPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[_\x82a\x12MWa\x12Ma\x0FRV[P\x06\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x83\x85\x827_\x84\x82\x01_\x81Ra\x11\xA4a\x12\x81\x82\x87a\x12RV[\x85a\x12RV\xFE\xA2dipfsX\"\x12 \\\xC0Jp(\x9F\x08\xCC\xCF\x8D,\xE8\xB5\xE9\xCFI\xE3\x18aP\n\xC5F{\xC1?\xE7*\xE6\x98g0dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061003f575f3560e01c8063056494f91461004357806360817b5c1461006c578063873d729e1461008c575b5f5ffd5b610056610051366004610e10565b6100ac565b6040516100639190610eac565b60405180910390f35b61007f61007a366004610e10565b6101b9565b6040516100639190610f0f565b61009f61009a366004610e10565b61023a565b6040516100639190610f40565b60605f6100ba608084610f7a565b90505f8167ffffffffffffffff8111156100d6576100d6610f8d565b60405190808252806020026020018201604052801561010957816020015b60608152602001906001900390816100f45790505b5090505f805b61011a846080610fa1565b8110156101ac5786818761012f826080610fb8565b9261013c93929190610fcb565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525086925085915061017d905081610ff2565b94508151811061018f5761018f61100a565b60209081029190910101526101a5816080610fb8565b905061010f565b5090925050505b92915050565b6101c1610db3565b6101c9610db3565b5f805b6080811015610230578581866101e3826008610fb8565b926101f093929190610fcb565b6101f99161101e565b60c01c838361020781610ff2565b9450601081106102195761021961100a565b6020020152610229816008610fb8565b90506101cc565b5090949350505050565b60605f61024784846106b0565b60405163056494f960e01b81529091505f90309063056494f99061026f908590600401610f40565b5f60405180830381865afa158015610289573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526102b09190810190611087565b80519091506102bd610dd2565b5f6102c66107e3565b90505f6102d1610865565b90505f5b84811015610610575f306001600160a01b03166360817b5c8884815181106102ff576102ff61100a565b60200260200101516040518263ffffffff1660e01b81526004016103239190610f40565b61020060405180830381865afa15801561033f573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061036391906111af565b90505f5b60108110156103a6578181601081106103825761038261100a565b60200201518682605081106103995761039961100a565b6020020152600101610367565b5060105b6050811015610464576104456104086103e2886103c860028661122c565b605081106103d8576103d861100a565b6020020151610cdc565b886103ee60078661122c565b605081106103fe576103fe61100a565b6020020151610d0a565b6104406104348961041a600f8761122c565b6050811061042a5761042a61100a565b6020020151610d2a565b896103ee60108761122c565b610d0a565b8682605081106104575761045761100a565b60200201526001016103aa565b5061046d610df1565b5f5b60088110156104ae5785816008811061048a5761048a61100a565b60200201518282600881106104a1576104a161100a565b602002015260010161046f565b505f5b60508110156105ae575f61051c6104d984600760200201516104408660046020020151610d50565b608085015160a086015160c08701516104409261050a9281169019909116188a87605081106103fe576103fe61100a565b8b86605081106103fe576103fe61100a565b90505f61054e61053185836020020151610d72565b855160208701516040880151808216908316919092161818610d0a565b60c08501805160e087015260a08601805190915260808601519052606085015190915061057b9083610d0a565b60808501526040840180516060860152602085018051909152845190526105a28282610d0a565b845250506001016104b1565b505f5b6008811015610605576105e68282600881106105cf576105cf61100a565b60200201518783600881106103fe576103fe61100a565b8682600881106105f8576105f861100a565b60200201526001016105b1565b5050506001016102d5565b50508051602080830151604080850151606080870151608088015160a089015160c0808b015160e0909b015187516001600160c01b03199b831b8c169a81019a909a5297811b8a1660288a015294851b8916603089015291841b88166038880152831b871686850152821b8616604886015295811b851660508501529190911b909216605882015281518082038301815292019052979650505050505050565b60605f6106be836008610fa1565b90505f6104006106cf836001610fb8565b6106d9919061123f565b90505f6104006106eb8361078061122c565b6106f5919061123f565b90505f6008610705836001610fb8565b61070f9190610f7a565b67ffffffffffffffff81111561072757610727610f8d565b6040519080825280601f01601f191660200182016040528015610751576020820181803683370190505b509050608060f81b815f8151811061076b5761076b61100a565b60200101906001600160f81b03191690815f1a90535060408051608086901b6fffffffffffffffffffffffffffffffff1916602082015281516010818303018152603082019092526107c7908990899085908590605001611269565b6040516020818303038152906040529550505050505092915050565b6107eb610df1565b6107f3610df1565b676a09e667f3bcc908815267bb67ae8584caa73b6020820152673c6ef372fe94f82b604082015267a54ff53a5f1d36f1606082015267510e527fade682d16080820152679b05688c2b3e6c1f60a0820152671f83d9abfb41bd6b60c0820152675be0cd19137e217960e0820152919050565b61086d610dd2565b60405180610a00016040528067428a2f98d728ae228152602001677137449123ef65cd815260200167b5c0fbcfec4d3b2f815260200167e9b5dba58189dbbc8152602001673956c25bf348b53881526020016759f111f1b605d019815260200167923f82a4af194f9b815260200167ab1c5ed5da6d8118815260200167d807aa98a303024281526020016712835b0145706fbe815260200167243185be4ee4b28c815260200167550c7dc3d5ffb4e281526020016772be5d74f27b896f81526020016780deb1fe3b1696b18152602001679bdc06a725c71235815260200167c19bf174cf692694815260200167e49b69c19ef14ad2815260200167efbe4786384f25e38152602001670fc19dc68b8cd5b5815260200167240ca1cc77ac9c658152602001672de92c6f592b02758152602001674a7484aa6ea6e4838152602001675cb0a9dcbd41fbd481526020016776f988da831153b5815260200167983e5152ee66dfab815260200167a831c66d2db43210815260200167b00327c898fb213f815260200167bf597fc7beef0ee4815260200167c6e00bf33da88fc2815260200167d5a79147930aa72581526020016706ca6351e003826f815260200167142929670a0e6e7081526020016727b70a8546d22ffc8152602001672e1b21385c26c9268152602001674d2c6dfc5ac42aed81526020016753380d139d95b3df815260200167650a73548baf63de815260200167766a0abb3c77b2a881526020016781c2c92e47edaee681526020016792722c851482353b815260200167a2bfe8a14cf10364815260200167a81a664bbc423001815260200167c24b8b70d0f89791815260200167c76c51a30654be30815260200167d192e819d6ef5218815260200167d69906245565a910815260200167f40e35855771202a815260200167106aa07032bbd1b881526020016719a4c116b8d2d0c88152602001671e376c085141ab538152602001672748774cdf8eeb9981526020016734b0bcb5e19b48a8815260200167391c0cb3c5c95a638152602001674ed8aa4ae3418acb8152602001675b9cca4f7763e373815260200167682e6ff3d6b2b8a3815260200167748f82ee5defb2fc81526020016778a5636f43172f6081526020016784c87814a1f0ab728152602001678cc702081a6439ec81526020016790befffa23631e28815260200167a4506cebde82bde9815260200167bef9a3f7b2c67915815260200167c67178f2e372532b815260200167ca273eceea26619c815260200167d186b8c721c0c207815260200167eada7dd6cde0eb1e815260200167f57d4f7fee6ed17881526020016706f067aa72176fba8152602001670a637dc5a2c898a6815260200167113f9804bef90dae8152602001671b710b35131c471b81526020016728db77f523047d8481526020016732caab7b40c724938152602001673c9ebe0a15c9bebc815260200167431d67c49c100d4c8152602001674cc5d4becb3e42b6815260200167597f299cfc657e2a8152602001675fcb6fab3ad6faec8152602001676c44198c4a475817815250905090565b5f6703ffffffffffffff600683901c16610cf7603d84610d90565b610d02601385610d90565b181892915050565b67ffffffffffffffff91821691165f610d238284610fb8565b9392505050565b5f6701ffffffffffffff600783901c16610d45600884610d90565b610d02600185610d90565b5f610d5c602983610d90565b610d67601284610d90565b610d02600e85610d90565b5f610d7e602783610d90565b610d89602284610d90565b610d02601c855b67ffffffffffffffff165f610da683604061122c565b82901b9190921c17919050565b6040518061020001604052806010906020820280368337509192915050565b60405180610a0001604052806050906020820280368337509192915050565b6040518061010001604052806008906020820280368337509192915050565b5f5f60208385031215610e21575f5ffd5b823567ffffffffffffffff811115610e37575f5ffd5b8301601f81018513610e47575f5ffd5b803567ffffffffffffffff811115610e5d575f5ffd5b856020828401011115610e6e575f5ffd5b6020919091019590945092505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015610f0357603f19878603018452610eee858351610e7e565b94506020938401939190910190600101610ed2565b50929695505050505050565b610200810181835f5b6010811015610f37578151835260209283019290910190600101610f18565b50505092915050565b602081525f610d236020830184610e7e565b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b5f82610f8857610f88610f52565b500490565b634e487b7160e01b5f52604160045260245ffd5b80820281158282048414176101b3576101b3610f66565b808201808211156101b3576101b3610f66565b5f5f85851115610fd9575f5ffd5b83861115610fe5575f5ffd5b5050820193919092039150565b5f6001820161100357611003610f66565b5060010190565b634e487b7160e01b5f52603260045260245ffd5b80356001600160c01b0319811690600884101561104f576001600160c01b0319600885900360031b81901b82161691505b5092915050565b604051601f8201601f1916810167ffffffffffffffff8111828210171561107f5761107f610f8d565b604052919050565b5f60208284031215611097575f5ffd5b815167ffffffffffffffff8111156110ad575f5ffd5b8201601f810184136110bd575f5ffd5b805167ffffffffffffffff8111156110d7576110d7610f8d565b8060051b6110e760208201611056565b91825260208184018101929081019087841115611102575f5ffd5b6020850192505b838310156111a457825167ffffffffffffffff811115611127575f5ffd5b8501603f81018913611137575f5ffd5b602081015167ffffffffffffffff81111561115457611154610f8d565b611167601f8201601f1916602001611056565b8181526040838301018b101561117b575f5ffd5b8160408401602083015e5f60208383010152808552505050602082019150602083019250611109565b979650505050505050565b5f61020082840312156111c0575f5ffd5b82601f8301126111ce575f5ffd5b604051610200810167ffffffffffffffff811182821017156111f2576111f2610f8d565b60405280610200840185811115611207575f5ffd5b845b81811015611221578051835260209283019201611209565b509195945050505050565b818103818111156101b3576101b3610f66565b5f8261124d5761124d610f52565b500690565b5f81518060208401855e5f93019283525090919050565b838582375f8482015f81526111a46112818287611252565b8561125256fea26469706673582212205cc04a70289f08cccf8d2ce8b5e9cf49e31861500ac5467bc13fe72ae698673064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0?W_5`\xE0\x1C\x80c\x05d\x94\xF9\x14a\0CW\x80c`\x81{\\\x14a\0lW\x80c\x87=r\x9E\x14a\0\x8CW[__\xFD[a\0Va\0Q6`\x04a\x0E\x10V[a\0\xACV[`@Qa\0c\x91\x90a\x0E\xACV[`@Q\x80\x91\x03\x90\xF3[a\0\x7Fa\0z6`\x04a\x0E\x10V[a\x01\xB9V[`@Qa\0c\x91\x90a\x0F\x0FV[a\0\x9Fa\0\x9A6`\x04a\x0E\x10V[a\x02:V[`@Qa\0c\x91\x90a\x0F@V[``_a\0\xBA`\x80\x84a\x0FzV[\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\0\xD6Wa\0\xD6a\x0F\x8DV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\tW\x81` \x01[``\x81R` \x01\x90`\x01\x90\x03\x90\x81a\0\xF4W\x90P[P\x90P_\x80[a\x01\x1A\x84`\x80a\x0F\xA1V[\x81\x10\x15a\x01\xACW\x86\x81\x87a\x01/\x82`\x80a\x0F\xB8V[\x92a\x01<\x93\x92\x91\x90a\x0F\xCBV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x86\x92P\x85\x91Pa\x01}\x90P\x81a\x0F\xF2V[\x94P\x81Q\x81\x10a\x01\x8FWa\x01\x8Fa\x10\nV[` \x90\x81\x02\x91\x90\x91\x01\x01Ra\x01\xA5\x81`\x80a\x0F\xB8V[\x90Pa\x01\x0FV[P\x90\x92PPP[\x92\x91PPV[a\x01\xC1a\r\xB3V[a\x01\xC9a\r\xB3V[_\x80[`\x80\x81\x10\x15a\x020W\x85\x81\x86a\x01\xE3\x82`\x08a\x0F\xB8V[\x92a\x01\xF0\x93\x92\x91\x90a\x0F\xCBV[a\x01\xF9\x91a\x10\x1EV[`\xC0\x1C\x83\x83a\x02\x07\x81a\x0F\xF2V[\x94P`\x10\x81\x10a\x02\x19Wa\x02\x19a\x10\nV[` \x02\x01Ra\x02)\x81`\x08a\x0F\xB8V[\x90Pa\x01\xCCV[P\x90\x94\x93PPPPV[``_a\x02G\x84\x84a\x06\xB0V[`@Qc\x05d\x94\xF9`\xE0\x1B\x81R\x90\x91P_\x900\x90c\x05d\x94\xF9\x90a\x02o\x90\x85\x90`\x04\x01a\x0F@V[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x02\x89W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x02\xB0\x91\x90\x81\x01\x90a\x10\x87V[\x80Q\x90\x91Pa\x02\xBDa\r\xD2V[_a\x02\xC6a\x07\xE3V[\x90P_a\x02\xD1a\x08eV[\x90P_[\x84\x81\x10\x15a\x06\x10W_0`\x01`\x01`\xA0\x1B\x03\x16c`\x81{\\\x88\x84\x81Q\x81\x10a\x02\xFFWa\x02\xFFa\x10\nV[` \x02` \x01\x01Q`@Q\x82c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x03#\x91\x90a\x0F@V[a\x02\0`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x03?W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x03c\x91\x90a\x11\xAFV[\x90P_[`\x10\x81\x10\x15a\x03\xA6W\x81\x81`\x10\x81\x10a\x03\x82Wa\x03\x82a\x10\nV[` \x02\x01Q\x86\x82`P\x81\x10a\x03\x99Wa\x03\x99a\x10\nV[` \x02\x01R`\x01\x01a\x03gV[P`\x10[`P\x81\x10\x15a\x04dWa\x04Ea\x04\x08a\x03\xE2\x88a\x03\xC8`\x02\x86a\x12,V[`P\x81\x10a\x03\xD8Wa\x03\xD8a\x10\nV[` \x02\x01Qa\x0C\xDCV[\x88a\x03\xEE`\x07\x86a\x12,V[`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[` \x02\x01Qa\r\nV[a\x04@a\x044\x89a\x04\x1A`\x0F\x87a\x12,V[`P\x81\x10a\x04*Wa\x04*a\x10\nV[` \x02\x01Qa\r*V[\x89a\x03\xEE`\x10\x87a\x12,V[a\r\nV[\x86\x82`P\x81\x10a\x04WWa\x04Wa\x10\nV[` \x02\x01R`\x01\x01a\x03\xAAV[Pa\x04ma\r\xF1V[_[`\x08\x81\x10\x15a\x04\xAEW\x85\x81`\x08\x81\x10a\x04\x8AWa\x04\x8Aa\x10\nV[` \x02\x01Q\x82\x82`\x08\x81\x10a\x04\xA1Wa\x04\xA1a\x10\nV[` \x02\x01R`\x01\x01a\x04oV[P_[`P\x81\x10\x15a\x05\xAEW_a\x05\x1Ca\x04\xD9\x84`\x07` \x02\x01Qa\x04@\x86`\x04` \x02\x01Qa\rPV[`\x80\x85\x01Q`\xA0\x86\x01Q`\xC0\x87\x01Qa\x04@\x92a\x05\n\x92\x81\x16\x90\x19\x90\x91\x16\x18\x8A\x87`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x8B\x86`P\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x90P_a\x05Na\x051\x85\x83` \x02\x01Qa\rrV[\x85Q` \x87\x01Q`@\x88\x01Q\x80\x82\x16\x90\x83\x16\x91\x90\x92\x16\x18\x18a\r\nV[`\xC0\x85\x01\x80Q`\xE0\x87\x01R`\xA0\x86\x01\x80Q\x90\x91R`\x80\x86\x01Q\x90R``\x85\x01Q\x90\x91Pa\x05{\x90\x83a\r\nV[`\x80\x85\x01R`@\x84\x01\x80Q``\x86\x01R` \x85\x01\x80Q\x90\x91R\x84Q\x90Ra\x05\xA2\x82\x82a\r\nV[\x84RPP`\x01\x01a\x04\xB1V[P_[`\x08\x81\x10\x15a\x06\x05Wa\x05\xE6\x82\x82`\x08\x81\x10a\x05\xCFWa\x05\xCFa\x10\nV[` \x02\x01Q\x87\x83`\x08\x81\x10a\x03\xFEWa\x03\xFEa\x10\nV[\x86\x82`\x08\x81\x10a\x05\xF8Wa\x05\xF8a\x10\nV[` \x02\x01R`\x01\x01a\x05\xB1V[PPP`\x01\x01a\x02\xD5V[PP\x80Q` \x80\x83\x01Q`@\x80\x85\x01Q``\x80\x87\x01Q`\x80\x88\x01Q`\xA0\x89\x01Q`\xC0\x80\x8B\x01Q`\xE0\x90\x9B\x01Q\x87Q`\x01`\x01`\xC0\x1B\x03\x19\x9B\x83\x1B\x8C\x16\x9A\x81\x01\x9A\x90\x9AR\x97\x81\x1B\x8A\x16`(\x8A\x01R\x94\x85\x1B\x89\x16`0\x89\x01R\x91\x84\x1B\x88\x16`8\x88\x01R\x83\x1B\x87\x16\x86\x85\x01R\x82\x1B\x86\x16`H\x86\x01R\x95\x81\x1B\x85\x16`P\x85\x01R\x91\x90\x91\x1B\x90\x92\x16`X\x82\x01R\x81Q\x80\x82\x03\x83\x01\x81R\x92\x01\x90R\x97\x96PPPPPPPV[``_a\x06\xBE\x83`\x08a\x0F\xA1V[\x90P_a\x04\0a\x06\xCF\x83`\x01a\x0F\xB8V[a\x06\xD9\x91\x90a\x12?V[\x90P_a\x04\0a\x06\xEB\x83a\x07\x80a\x12,V[a\x06\xF5\x91\x90a\x12?V[\x90P_`\x08a\x07\x05\x83`\x01a\x0F\xB8V[a\x07\x0F\x91\x90a\x0FzV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07'Wa\x07'a\x0F\x8DV[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x07QW` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x80`\xF8\x1B\x81_\x81Q\x81\x10a\x07kWa\x07ka\x10\nV[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`@\x80Q`\x80\x86\x90\x1Bo\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x19\x16` \x82\x01R\x81Q`\x10\x81\x83\x03\x01\x81R`0\x82\x01\x90\x92Ra\x07\xC7\x90\x89\x90\x89\x90\x85\x90\x85\x90`P\x01a\x12iV[`@Q` \x81\x83\x03\x03\x81R\x90`@R\x95PPPPPP\x92\x91PPV[a\x07\xEBa\r\xF1V[a\x07\xF3a\r\xF1V[gj\t\xE6g\xF3\xBC\xC9\x08\x81Rg\xBBg\xAE\x85\x84\xCA\xA7;` \x82\x01Rg<n\xF3r\xFE\x94\xF8+`@\x82\x01Rg\xA5O\xF5:_\x1D6\xF1``\x82\x01RgQ\x0ER\x7F\xAD\xE6\x82\xD1`\x80\x82\x01Rg\x9B\x05h\x8C+>l\x1F`\xA0\x82\x01Rg\x1F\x83\xD9\xAB\xFBA\xBDk`\xC0\x82\x01Rg[\xE0\xCD\x19\x13~!y`\xE0\x82\x01R\x91\x90PV[a\x08ma\r\xD2V[`@Q\x80a\n\0\x01`@R\x80gB\x8A/\x98\xD7(\xAE\"\x81R` \x01gq7D\x91#\xEFe\xCD\x81R` \x01g\xB5\xC0\xFB\xCF\xECM;/\x81R` \x01g\xE9\xB5\xDB\xA5\x81\x89\xDB\xBC\x81R` \x01g9V\xC2[\xF3H\xB58\x81R` \x01gY\xF1\x11\xF1\xB6\x05\xD0\x19\x81R` \x01g\x92?\x82\xA4\xAF\x19O\x9B\x81R` \x01g\xAB\x1C^\xD5\xDAm\x81\x18\x81R` \x01g\xD8\x07\xAA\x98\xA3\x03\x02B\x81R` \x01g\x12\x83[\x01Epo\xBE\x81R` \x01g$1\x85\xBEN\xE4\xB2\x8C\x81R` \x01gU\x0C}\xC3\xD5\xFF\xB4\xE2\x81R` \x01gr\xBE]t\xF2{\x89o\x81R` \x01g\x80\xDE\xB1\xFE;\x16\x96\xB1\x81R` \x01g\x9B\xDC\x06\xA7%\xC7\x125\x81R` \x01g\xC1\x9B\xF1t\xCFi&\x94\x81R` \x01g\xE4\x9Bi\xC1\x9E\xF1J\xD2\x81R` \x01g\xEF\xBEG\x868O%\xE3\x81R` \x01g\x0F\xC1\x9D\xC6\x8B\x8C\xD5\xB5\x81R` \x01g$\x0C\xA1\xCCw\xAC\x9Ce\x81R` \x01g-\xE9,oY+\x02u\x81R` \x01gJt\x84\xAAn\xA6\xE4\x83\x81R` \x01g\\\xB0\xA9\xDC\xBDA\xFB\xD4\x81R` \x01gv\xF9\x88\xDA\x83\x11S\xB5\x81R` \x01g\x98>QR\xEEf\xDF\xAB\x81R` \x01g\xA81\xC6m-\xB42\x10\x81R` \x01g\xB0\x03'\xC8\x98\xFB!?\x81R` \x01g\xBFY\x7F\xC7\xBE\xEF\x0E\xE4\x81R` \x01g\xC6\xE0\x0B\xF3=\xA8\x8F\xC2\x81R` \x01g\xD5\xA7\x91G\x93\n\xA7%\x81R` \x01g\x06\xCAcQ\xE0\x03\x82o\x81R` \x01g\x14))g\n\x0Enp\x81R` \x01g'\xB7\n\x85F\xD2/\xFC\x81R` \x01g.\x1B!8\\&\xC9&\x81R` \x01gM,m\xFCZ\xC4*\xED\x81R` \x01gS8\r\x13\x9D\x95\xB3\xDF\x81R` \x01ge\nsT\x8B\xAFc\xDE\x81R` \x01gvj\n\xBB<w\xB2\xA8\x81R` \x01g\x81\xC2\xC9.G\xED\xAE\xE6\x81R` \x01g\x92r,\x85\x14\x825;\x81R` \x01g\xA2\xBF\xE8\xA1L\xF1\x03d\x81R` \x01g\xA8\x1AfK\xBCB0\x01\x81R` \x01g\xC2K\x8Bp\xD0\xF8\x97\x91\x81R` \x01g\xC7lQ\xA3\x06T\xBE0\x81R` \x01g\xD1\x92\xE8\x19\xD6\xEFR\x18\x81R` \x01g\xD6\x99\x06$Ue\xA9\x10\x81R` \x01g\xF4\x0E5\x85Wq *\x81R` \x01g\x10j\xA0p2\xBB\xD1\xB8\x81R` \x01g\x19\xA4\xC1\x16\xB8\xD2\xD0\xC8\x81R` \x01g\x1E7l\x08QA\xABS\x81R` \x01g'HwL\xDF\x8E\xEB\x99\x81R` \x01g4\xB0\xBC\xB5\xE1\x9BH\xA8\x81R` \x01g9\x1C\x0C\xB3\xC5\xC9Zc\x81R` \x01gN\xD8\xAAJ\xE3A\x8A\xCB\x81R` \x01g[\x9C\xCAOwc\xE3s\x81R` \x01gh.o\xF3\xD6\xB2\xB8\xA3\x81R` \x01gt\x8F\x82\xEE]\xEF\xB2\xFC\x81R` \x01gx\xA5coC\x17/`\x81R` \x01g\x84\xC8x\x14\xA1\xF0\xABr\x81R` \x01g\x8C\xC7\x02\x08\x1Ad9\xEC\x81R` \x01g\x90\xBE\xFF\xFA#c\x1E(\x81R` \x01g\xA4Pl\xEB\xDE\x82\xBD\xE9\x81R` \x01g\xBE\xF9\xA3\xF7\xB2\xC6y\x15\x81R` \x01g\xC6qx\xF2\xE3rS+\x81R` \x01g\xCA'>\xCE\xEA&a\x9C\x81R` \x01g\xD1\x86\xB8\xC7!\xC0\xC2\x07\x81R` \x01g\xEA\xDA}\xD6\xCD\xE0\xEB\x1E\x81R` \x01g\xF5}O\x7F\xEEn\xD1x\x81R` \x01g\x06\xF0g\xAAr\x17o\xBA\x81R` \x01g\nc}\xC5\xA2\xC8\x98\xA6\x81R` \x01g\x11?\x98\x04\xBE\xF9\r\xAE\x81R` \x01g\x1Bq\x0B5\x13\x1CG\x1B\x81R` \x01g(\xDBw\xF5#\x04}\x84\x81R` \x01g2\xCA\xAB{@\xC7$\x93\x81R` \x01g<\x9E\xBE\n\x15\xC9\xBE\xBC\x81R` \x01gC\x1Dg\xC4\x9C\x10\rL\x81R` \x01gL\xC5\xD4\xBE\xCB>B\xB6\x81R` \x01gY\x7F)\x9C\xFCe~*\x81R` \x01g_\xCBo\xAB:\xD6\xFA\xEC\x81R` \x01glD\x19\x8CJGX\x17\x81RP\x90P\x90V[_g\x03\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x06\x83\x90\x1C\x16a\x0C\xF7`=\x84a\r\x90V[a\r\x02`\x13\x85a\r\x90V[\x18\x18\x92\x91PPV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x91\x82\x16\x91\x16_a\r#\x82\x84a\x0F\xB8V[\x93\x92PPPV[_g\x01\xFF\xFF\xFF\xFF\xFF\xFF\xFF`\x07\x83\x90\x1C\x16a\rE`\x08\x84a\r\x90V[a\r\x02`\x01\x85a\r\x90V[_a\r\\`)\x83a\r\x90V[a\rg`\x12\x84a\r\x90V[a\r\x02`\x0E\x85a\r\x90V[_a\r~`'\x83a\r\x90V[a\r\x89`\"\x84a\r\x90V[a\r\x02`\x1C\x85[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x16_a\r\xA6\x83`@a\x12,V[\x82\x90\x1B\x91\x90\x92\x1C\x17\x91\x90PV[`@Q\x80a\x02\0\x01`@R\x80`\x10\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\n\0\x01`@R\x80`P\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[`@Q\x80a\x01\0\x01`@R\x80`\x08\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[__` \x83\x85\x03\x12\x15a\x0E!W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E7W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x0EGW__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E]W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x0EnW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x0F\x03W`?\x19\x87\x86\x03\x01\x84Ra\x0E\xEE\x85\x83Qa\x0E~V[\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x0E\xD2V[P\x92\x96\x95PPPPPPV[a\x02\0\x81\x01\x81\x83_[`\x10\x81\x10\x15a\x0F7W\x81Q\x83R` \x92\x83\x01\x92\x90\x91\x01\x90`\x01\x01a\x0F\x18V[PPP\x92\x91PPV[` \x81R_a\r#` \x83\x01\x84a\x0E~V[cNH{q`\xE0\x1B_R`\x12`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_\x82a\x0F\x88Wa\x0F\x88a\x0FRV[P\x04\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x01\xB3Wa\x01\xB3a\x0FfV[\x80\x82\x01\x80\x82\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[__\x85\x85\x11\x15a\x0F\xD9W__\xFD[\x83\x86\x11\x15a\x0F\xE5W__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[_`\x01\x82\x01a\x10\x03Wa\x10\x03a\x0FfV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x805`\x01`\x01`\xC0\x1B\x03\x19\x81\x16\x90`\x08\x84\x10\x15a\x10OW`\x01`\x01`\xC0\x1B\x03\x19`\x08\x85\x90\x03`\x03\x1B\x81\x90\x1B\x82\x16\x16\x91P[P\x92\x91PPV[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x10\x7FWa\x10\x7Fa\x0F\x8DV[`@R\x91\x90PV[_` \x82\x84\x03\x12\x15a\x10\x97W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xADW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x10\xBDW__\xFD[\x80Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x10\xD7Wa\x10\xD7a\x0F\x8DV[\x80`\x05\x1Ba\x10\xE7` \x82\x01a\x10VV[\x91\x82R` \x81\x84\x01\x81\x01\x92\x90\x81\x01\x90\x87\x84\x11\x15a\x11\x02W__\xFD[` \x85\x01\x92P[\x83\x83\x10\x15a\x11\xA4W\x82Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11'W__\xFD[\x85\x01`?\x81\x01\x89\x13a\x117W__\xFD[` \x81\x01Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x11TWa\x11Ta\x0F\x8DV[a\x11g`\x1F\x82\x01`\x1F\x19\x16` \x01a\x10VV[\x81\x81R`@\x83\x83\x01\x01\x8B\x10\x15a\x11{W__\xFD[\x81`@\x84\x01` \x83\x01^_` \x83\x83\x01\x01R\x80\x85RPPP` \x82\x01\x91P` \x83\x01\x92Pa\x11\tV[\x97\x96PPPPPPPV[_a\x02\0\x82\x84\x03\x12\x15a\x11\xC0W__\xFD[\x82`\x1F\x83\x01\x12a\x11\xCEW__\xFD[`@Qa\x02\0\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x11\xF2Wa\x11\xF2a\x0F\x8DV[`@R\x80a\x02\0\x84\x01\x85\x81\x11\x15a\x12\x07W__\xFD[\x84[\x81\x81\x10\x15a\x12!W\x80Q\x83R` \x92\x83\x01\x92\x01a\x12\tV[P\x91\x95\x94PPPPPV[\x81\x81\x03\x81\x81\x11\x15a\x01\xB3Wa\x01\xB3a\x0FfV[_\x82a\x12MWa\x12Ma\x0FRV[P\x06\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[\x83\x85\x827_\x84\x82\x01_\x81Ra\x11\xA4a\x12\x81\x82\x87a\x12RV[\x85a\x12RV\xFE\xA2dipfsX\"\x12 \\\xC0Jp(\x9F\x08\xCC\xCF\x8D,\xE8\xB5\xE9\xCFI\xE3\x18aP\n\xC5F{\xC1?\xE7*\xE6\x98g0dsolcC\0\x08\x1C\x003",
    );
    /**Function with signature `parseMessage1024(bytes)` and selector `0x056494f9`.
```solidity
function parseMessage1024(bytes memory paddedMessage) external pure returns (bytes[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct parseMessage1024Call {
        pub paddedMessage: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`parseMessage1024(bytes)`](parseMessage1024Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct parseMessage1024Return {
        pub _0: alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<parseMessage1024Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: parseMessage1024Call) -> Self {
                    (value.paddedMessage,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for parseMessage1024Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { paddedMessage: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Bytes>,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<parseMessage1024Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: parseMessage1024Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for parseMessage1024Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for parseMessage1024Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = parseMessage1024Return;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Bytes>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "parseMessage1024(bytes)";
            const SELECTOR: [u8; 4] = [5u8, 100u8, 148u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.paddedMessage,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `parseMessageBlock1024(bytes)` and selector `0x60817b5c`.
```solidity
function parseMessageBlock1024(bytes memory messageBlock) external pure returns (uint256[16] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct parseMessageBlock1024Call {
        pub messageBlock: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`parseMessageBlock1024(bytes)`](parseMessageBlock1024Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct parseMessageBlock1024Return {
        pub _0: [alloy::sol_types::private::primitives::aliases::U256; 16usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<parseMessageBlock1024Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: parseMessageBlock1024Call) -> Self {
                    (value.messageBlock,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for parseMessageBlock1024Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { messageBlock: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    16usize,
                >,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                [alloy::sol_types::private::primitives::aliases::U256; 16usize],
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<parseMessageBlock1024Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: parseMessageBlock1024Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for parseMessageBlock1024Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for parseMessageBlock1024Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = parseMessageBlock1024Return;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    16usize,
                >,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "parseMessageBlock1024(bytes)";
            const SELECTOR: [u8; 4] = [96u8, 129u8, 123u8, 92u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.messageBlock,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `sha512(bytes)` and selector `0x873d729e`.
```solidity
function sha512(bytes memory message) external view returns (bytes memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sha512Call {
        pub message: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`sha512(bytes)`](sha512Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct sha512Return {
        pub _0: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sha512Call> for UnderlyingRustTuple<'_> {
                fn from(value: sha512Call) -> Self {
                    (value.message,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sha512Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { message: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Bytes,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<sha512Return> for UnderlyingRustTuple<'_> {
                fn from(value: sha512Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for sha512Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for sha512Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Bytes,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = sha512Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bytes,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "sha512(bytes)";
            const SELECTOR: [u8; 4] = [135u8, 61u8, 114u8, 158u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.message,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Sha`](self) function calls.
    pub enum ShaCalls {
        parseMessage1024(parseMessage1024Call),
        parseMessageBlock1024(parseMessageBlock1024Call),
        sha512(sha512Call),
    }
    #[automatically_derived]
    impl ShaCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [5u8, 100u8, 148u8, 249u8],
            [96u8, 129u8, 123u8, 92u8],
            [135u8, 61u8, 114u8, 158u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ShaCalls {
        const NAME: &'static str = "ShaCalls";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 3usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::parseMessage1024(_) => {
                    <parseMessage1024Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::parseMessageBlock1024(_) => {
                    <parseMessageBlock1024Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::sha512(_) => <sha512Call as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ShaCalls>] = &[
                {
                    fn parseMessage1024(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ShaCalls> {
                        <parseMessage1024Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ShaCalls::parseMessage1024)
                    }
                    parseMessage1024
                },
                {
                    fn parseMessageBlock1024(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ShaCalls> {
                        <parseMessageBlock1024Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ShaCalls::parseMessageBlock1024)
                    }
                    parseMessageBlock1024
                },
                {
                    fn sha512(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ShaCalls> {
                        <sha512Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ShaCalls::sha512)
                    }
                    sha512
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::parseMessage1024(inner) => {
                    <parseMessage1024Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::parseMessageBlock1024(inner) => {
                    <parseMessageBlock1024Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::sha512(inner) => {
                    <sha512Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::parseMessage1024(inner) => {
                    <parseMessage1024Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::parseMessageBlock1024(inner) => {
                    <parseMessageBlock1024Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::sha512(inner) => {
                    <sha512Call as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Sha`](self) contract instance.

See the [wrapper's documentation](`ShaInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(address: alloy_sol_types::private::Address, provider: P) -> ShaInstance<T, P, N> {
        ShaInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ShaInstance<T, P, N>>,
    > {
        ShaInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        ShaInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`Sha`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Sha`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ShaInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ShaInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ShaInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ShaInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Sha`](self) contract instance.

See the [wrapper's documentation](`ShaInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<ShaInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ShaInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ShaInstance<T, P, N> {
            ShaInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ShaInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`parseMessage1024`] function.
        pub fn parseMessage1024(
            &self,
            paddedMessage: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, parseMessage1024Call, N> {
            self.call_builder(
                &parseMessage1024Call {
                    paddedMessage,
                },
            )
        }
        ///Creates a new call builder for the [`parseMessageBlock1024`] function.
        pub fn parseMessageBlock1024(
            &self,
            messageBlock: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, parseMessageBlock1024Call, N> {
            self.call_builder(
                &parseMessageBlock1024Call {
                    messageBlock,
                },
            )
        }
        ///Creates a new call builder for the [`sha512`] function.
        pub fn sha512(
            &self,
            message: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, sha512Call, N> {
            self.call_builder(&sha512Call { message })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ShaInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
