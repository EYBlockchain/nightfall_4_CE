/**

Generated by the following Solidity interface...
```solidity
interface ERC1155Mock {
    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
    error ERC1155InvalidApprover(address approver);
    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
    error ERC1155InvalidOperator(address operator);
    error ERC1155InvalidReceiver(address receiver);
    error ERC1155InvalidSender(address sender);
    error ERC1155MissingApprovalForAll(address operator, address owner);

    event ApprovalForAll(address indexed account, address indexed operator, bool approved);
    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
    event URI(string value, uint256 indexed id);

    constructor(uint256 initial_id, uint256 value, uint256 initial_id_two, uint256 value_two, address initialOwner);

    function balanceOf(address account, uint256 id) external view returns (uint256);
    function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);
    function isApprovedForAll(address account, address operator) external view returns (bool);
    function mint(address owner, uint256 tokenId, uint256 value) external;
    function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) external;
    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) external;
    function setApprovalForAll(address operator, bool approved) external;
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function uri(uint256) external view returns (string memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "initial_id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initial_id_two",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value_two",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "initialOwner",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "balanceOfBatch",
    "inputs": [
      {
        "name": "accounts",
        "type": "address[]",
        "internalType": "address[]"
      },
      {
        "name": "ids",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isApprovedForAll",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "mint",
    "inputs": [
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeBatchTransferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "ids",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "values",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setApprovalForAll",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "uri",
    "inputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "ApprovalForAll",
    "inputs": [
      {
        "name": "account",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "approved",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransferBatch",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "ids",
        "type": "uint256[]",
        "indexed": false,
        "internalType": "uint256[]"
      },
      {
        "name": "values",
        "type": "uint256[]",
        "indexed": false,
        "internalType": "uint256[]"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransferSingle",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "id",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "URI",
    "inputs": [
      {
        "name": "value",
        "type": "string",
        "indexed": false,
        "internalType": "string"
      },
      {
        "name": "id",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "ERC1155InsufficientBalance",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "needed",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1155InvalidApprover",
    "inputs": [
      {
        "name": "approver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1155InvalidArrayLength",
    "inputs": [
      {
        "name": "idsLength",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "valuesLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1155InvalidOperator",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1155InvalidReceiver",
    "inputs": [
      {
        "name": "receiver",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1155InvalidSender",
    "inputs": [
      {
        "name": "sender",
        "type": "address",
        "internalType": "address"
      }
    ]
  },
  {
    "type": "error",
    "name": "ERC1155MissingApprovalForAll",
    "inputs": [
      {
        "name": "operator",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "owner",
        "type": "address",
        "internalType": "address"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod ERC1155Mock {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506040516119cf3803806119cf83398101604081905261002e91610591565b60408051808201909152600b81526a455243313135354d6f636b60a81b60208201526100598161007a565b5061006581868661008a565b61007081848461008a565b50505050506108ba565b60026100868282610677565b5050565b6100aa83838360405180602001604052805f8152506100af60201b60201c565b505050565b6001600160a01b0384166100dd57604051632bfa23e760e11b81525f60048201526024015b60405180910390fd5b6040805160018082526020820186905281830190815260608201859052608082019092529061010f5f87848487610117565b505050505050565b61012385858585610171565b6001600160a01b0384161561016a578251339060010361015c5760208481015190840151610155838989858589610380565b505061010f565b61010f8187878787876104aa565b5050505050565b80518251146101a05781518151604051635b05999160e01b8152600481019290925260248201526044016100d4565b335f5b83518110156102a2576020818102858101820151908501909101516001600160a01b03881615610254575f828152602081815260408083206001600160a01b038c1684529091529020548181101561022e576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016100d4565b5f838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615610298575f828152602081815260408083206001600160a01b038b16845290915281208054839290610292908490610731565b90915550505b50506001016101a3565b5082516001036103225760208301515f906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051610313929190918252602082015260400190565b60405180910390a4505061016a565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610371929190610790565b60405180910390a45050505050565b6001600160a01b0384163b1561010f5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906103c490899089908890889088906004016107eb565b6020604051808303815f875af19250505080156103fe575060408051601f3d908101601f191682019092526103fb9181019061082f565b60015b610465573d80801561042b576040519150601f19603f3d011682016040523d82523d5f602084013e610430565b606091505b5080515f0361045d57604051632bfa23e760e11b81526001600160a01b03861660048201526024016100d4565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b146104a157604051632bfa23e760e11b81526001600160a01b03861660048201526024016100d4565b50505050505050565b6001600160a01b0384163b1561010f5760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906104ee908990899088908890889060040161085d565b6020604051808303815f875af1925050508015610528575060408051601f3d908101601f191682019092526105259181019061082f565b60015b610555573d80801561042b576040519150601f19603f3d011682016040523d82523d5f602084013e610430565b6001600160e01b0319811663bc197c8160e01b146104a157604051632bfa23e760e11b81526001600160a01b03861660048201526024016100d4565b5f5f5f5f5f60a086880312156105a5575f5ffd5b855160208701516040880151606089015160808a0151939850919650945092506001600160a01b03811681146105d9575f5ffd5b809150509295509295909350565b634e487b7160e01b5f52604160045260245ffd5b600181811c9082168061060f57607f821691505b60208210810361062d57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156100aa57805f5260205f20601f840160051c810160208510156106585750805b601f840160051c820191505b8181101561016a575f8155600101610664565b81516001600160401b03811115610690576106906105e7565b6106a48161069e84546105fb565b84610633565b6020601f8211600181146106d6575f83156106bf5750848201515b5f19600385901b1c1916600184901b17845561016a565b5f84815260208120601f198516915b8281101561070557878501518255602094850194600190920191016106e5565b508482101561072257868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b8082018082111561075057634e487b7160e01b5f52601160045260245ffd5b92915050565b5f8151808452602084019350602083015f5b82811015610786578151865260209586019590910190600101610768565b5093949350505050565b604081525f6107a26040830185610756565b82810360208401526107b48185610756565b95945050505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f90610824908301846107bd565b979650505050505050565b5f6020828403121561083f575f5ffd5b81516001600160e01b031981168114610856575f5ffd5b9392505050565b6001600160a01b0386811682528516602082015260a0604082018190525f9061088890830186610756565b828103606084015261089a8186610756565b905082810360808401526108ae81856107bd565b98975050505050505050565b611108806108c75f395ff3fe608060405234801561000f575f5ffd5b506004361061008f575f3560e01c80632eb2c2d6116100635780632eb2c2d6146101115780634e1273f414610124578063a22cb46514610144578063e985e9c514610157578063f242432a1461016a575f5ffd5b8062fdd58e1461009357806301ffc9a7146100b95780630e89341c146100dc578063156e29f6146100fc575b5f5ffd5b6100a66100a1366004610adb565b61017d565b6040519081526020015b60405180910390f35b6100cc6100c7366004610b1b565b6101a4565b60405190151581526020016100b0565b6100ef6100ea366004610b3d565b6101f3565b6040516100b09190610b82565b61010f61010a366004610b94565b610285565b005b61010f61011f366004610d02565b6102a4565b610137610132366004610db1565b610310565b6040516100b09190610eae565b61010f610152366004610ec0565b6103db565b6100cc610165366004610ef9565b6103ea565b61010f610178366004610f2a565b610417565b5f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b03198216636cdb3d1360e11b14806101d457506001600160e01b031982166303a24d0760e21b145b8061019e57506301ffc9a760e01b6001600160e01b031983161461019e565b60606002805461020290610f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461022e90610f7e565b80156102795780601f1061025057610100808354040283529160200191610279565b820191905f5260205f20905b81548152906001019060200180831161025c57829003601f168201915b50505050509050919050565b61029f83838360405180602001604052805f815250610476565b505050565b336001600160a01b03861681148015906102c557506102c386826103ea565b155b156102fb5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b61030886868686866104d1565b505050505050565b606081518351146103415781518351604051635b05999160e01b8152600481019290925260248201526044016102f2565b5f835167ffffffffffffffff81111561035c5761035c610bc4565b604051908082528060200260200182016040528015610385578160200160208202803683370190505b5090505f5b84518110156103d3576020808202860101516103ae9060208084028701015161017d565b8282815181106103c0576103c0610fb6565b602090810291909101015260010161038a565b509392505050565b6103e6338383610536565b5050565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610438575061043686826103ea565b155b156104695760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016102f2565b61030886868686866105ca565b6001600160a01b03841661049f57604051632bfa23e760e11b81525f60048201526024016102f2565b604080516001808252602082018690528183019081526060820185905260808201909252906103085f87848487610656565b6001600160a01b0384166104fa57604051632bfa23e760e11b81525f60048201526024016102f2565b6001600160a01b03851661052257604051626a0d4560e21b81525f60048201526024016102f2565b61052f8585858585610656565b5050505050565b6001600160a01b03821661055e5760405162ced3e160e81b81525f60048201526024016102f2565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166105f357604051632bfa23e760e11b81525f60048201526024016102f2565b6001600160a01b03851661061b57604051626a0d4560e21b81525f60048201526024016102f2565b6040805160018082526020820186905281830190815260608201859052608082019092529061064d8787848487610656565b50505050505050565b610662858585856106a9565b6001600160a01b0384161561052f578251339060010361069b57602084810151908401516106948389898585896108b8565b5050610308565b6103088187878787876109d9565b80518251146106d85781518151604051635b05999160e01b8152600481019290925260248201526044016102f2565b335f5b83518110156107da576020818102858101820151908501909101516001600160a01b0388161561078c575f828152602081815260408083206001600160a01b038c16845290915290205481811015610766576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016102f2565b5f838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b038716156107d0575f828152602081815260408083206001600160a01b038b168452909152812080548392906107ca908490610fca565b90915550505b50506001016106db565b50825160010361085a5760208301515f906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161084b929190918252602082015260400190565b60405180910390a4505061052f565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516108a9929190610fe9565b60405180910390a45050505050565b6001600160a01b0384163b156103085760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906108fc9089908990889088908890600401611016565b6020604051808303815f875af1925050508015610936575060408051601f3d908101601f191682019092526109339181019061105a565b60015b61099d573d808015610963576040519150601f19603f3d011682016040523d82523d5f602084013e610968565b606091505b5080515f0361099557604051632bfa23e760e11b81526001600160a01b03861660048201526024016102f2565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461064d57604051632bfa23e760e11b81526001600160a01b03861660048201526024016102f2565b6001600160a01b0384163b156103085760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610a1d9089908990889088908890600401611075565b6020604051808303815f875af1925050508015610a57575060408051601f3d908101601f19168201909252610a549181019061105a565b60015b610a84573d808015610963576040519150601f19603f3d011682016040523d82523d5f602084013e610968565b6001600160e01b0319811663bc197c8160e01b1461064d57604051632bfa23e760e11b81526001600160a01b03861660048201526024016102f2565b80356001600160a01b0381168114610ad6575f5ffd5b919050565b5f5f60408385031215610aec575f5ffd5b610af583610ac0565b946020939093013593505050565b6001600160e01b031981168114610b18575f5ffd5b50565b5f60208284031215610b2b575f5ffd5b8135610b3681610b03565b9392505050565b5f60208284031215610b4d575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610b366020830184610b54565b5f5f5f60608486031215610ba6575f5ffd5b610baf84610ac0565b95602085013595506040909401359392505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c0157610c01610bc4565b604052919050565b5f67ffffffffffffffff821115610c2257610c22610bc4565b5060051b60200190565b5f82601f830112610c3b575f5ffd5b8135610c4e610c4982610c09565b610bd8565b8082825260208201915060208360051b860101925085831115610c6f575f5ffd5b602085015b83811015610c8c578035835260209283019201610c74565b5095945050505050565b5f82601f830112610ca5575f5ffd5b813567ffffffffffffffff811115610cbf57610cbf610bc4565b610cd2601f8201601f1916602001610bd8565b818152846020838601011115610ce6575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f5f5f60a08688031215610d16575f5ffd5b610d1f86610ac0565b9450610d2d60208701610ac0565b9350604086013567ffffffffffffffff811115610d48575f5ffd5b610d5488828901610c2c565b935050606086013567ffffffffffffffff811115610d70575f5ffd5b610d7c88828901610c2c565b925050608086013567ffffffffffffffff811115610d98575f5ffd5b610da488828901610c96565b9150509295509295909350565b5f5f60408385031215610dc2575f5ffd5b823567ffffffffffffffff811115610dd8575f5ffd5b8301601f81018513610de8575f5ffd5b8035610df6610c4982610c09565b8082825260208201915060208360051b850101925087831115610e17575f5ffd5b6020840193505b82841015610e4057610e2f84610ac0565b825260209384019390910190610e1e565b9450505050602083013567ffffffffffffffff811115610e5e575f5ffd5b610e6a85828601610c2c565b9150509250929050565b5f8151808452602084019350602083015f5b82811015610ea4578151865260209586019590910190600101610e86565b5093949350505050565b602081525f610b366020830184610e74565b5f5f60408385031215610ed1575f5ffd5b610eda83610ac0565b915060208301358015158114610eee575f5ffd5b809150509250929050565b5f5f60408385031215610f0a575f5ffd5b610f1383610ac0565b9150610f2160208401610ac0565b90509250929050565b5f5f5f5f5f60a08688031215610f3e575f5ffd5b610f4786610ac0565b9450610f5560208701610ac0565b93506040860135925060608601359150608086013567ffffffffffffffff811115610d98575f5ffd5b600181811c90821680610f9257607f821691505b602082108103610fb057634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b8082018082111561019e57634e487b7160e01b5f52601160045260245ffd5b604081525f610ffb6040830185610e74565b828103602084015261100d8185610e74565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f9061104f90830184610b54565b979650505050505050565b5f6020828403121561106a575f5ffd5b8151610b3681610b03565b6001600160a01b0386811682528516602082015260a0604082018190525f906110a090830186610e74565b82810360608401526110b28186610e74565b905082810360808401526110c68185610b54565b9897505050505050505056fea264697066735822122050401bcd2a21d63099609297c262a1dce706c5dc6731665daccce33345485d6664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa\x19\xCF8\x03\x80a\x19\xCF\x839\x81\x01`@\x81\x90Ra\0.\x91a\x05\x91V[`@\x80Q\x80\x82\x01\x90\x91R`\x0B\x81RjERC1155Mock`\xA8\x1B` \x82\x01Ra\0Y\x81a\0zV[Pa\0e\x81\x86\x86a\0\x8AV[a\0p\x81\x84\x84a\0\x8AV[PPPPPa\x08\xBAV[`\x02a\0\x86\x82\x82a\x06wV[PPV[a\0\xAA\x83\x83\x83`@Q\x80` \x01`@R\x80_\x81RPa\0\xAF` \x1B` \x1CV[PPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\0\xDDW`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01[`@Q\x80\x91\x03\x90\xFD[`@\x80Q`\x01\x80\x82R` \x82\x01\x86\x90R\x81\x83\x01\x90\x81R``\x82\x01\x85\x90R`\x80\x82\x01\x90\x92R\x90a\x01\x0F_\x87\x84\x84\x87a\x01\x17V[PPPPPPV[a\x01#\x85\x85\x85\x85a\x01qV[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x01jW\x82Q3\x90`\x01\x03a\x01\\W` \x84\x81\x01Q\x90\x84\x01Qa\x01U\x83\x89\x89\x85\x85\x89a\x03\x80V[PPa\x01\x0FV[a\x01\x0F\x81\x87\x87\x87\x87\x87a\x04\xAAV[PPPPPV[\x80Q\x82Q\x14a\x01\xA0W\x81Q\x81Q`@Qc[\x05\x99\x91`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\0\xD4V[3_[\x83Q\x81\x10\x15a\x02\xA2W` \x81\x81\x02\x85\x81\x01\x82\x01Q\x90\x85\x01\x90\x91\x01Q`\x01`\x01`\xA0\x1B\x03\x88\x16\x15a\x02TW_\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8C\x16\x84R\x90\x91R\x90 T\x81\x81\x10\x15a\x02.W`@Qc\x03\xDE\xE4\xC5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16`\x04\x82\x01R`$\x81\x01\x82\x90R`D\x81\x01\x83\x90R`d\x81\x01\x84\x90R`\x84\x01a\0\xD4V[_\x83\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8D\x16\x84R\x90\x91R\x90 \x90\x82\x90\x03\x90U[`\x01`\x01`\xA0\x1B\x03\x87\x16\x15a\x02\x98W_\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8B\x16\x84R\x90\x91R\x81 \x80T\x83\x92\x90a\x02\x92\x90\x84\x90a\x071V[\x90\x91UPP[PP`\x01\x01a\x01\xA3V[P\x82Q`\x01\x03a\x03\"W` \x83\x01Q_\x90` \x84\x01Q\x90\x91P\x85`\x01`\x01`\xA0\x1B\x03\x16\x87`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xC3\xD5\x81h\xC5\xAEs\x97s\x1D\x06=[\xBF=exTBsC\xF4\xC0\x83$\x0Fz\xAC\xAA-\x0Fb\x85\x85`@Qa\x03\x13\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA4PPa\x01jV[\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x82`\x01`\x01`\xA0\x1B\x03\x16\x7FJ9\xDC\x06\xD4\xC0\xDB\xC6Kp\xAF\x90\xFDi\x8A#:Q\x8A\xA5\xD0~Y]\x98;\x8C\x05&\xC8\xF7\xFB\x86\x86`@Qa\x03q\x92\x91\x90a\x07\x90V[`@Q\x80\x91\x03\x90\xA4PPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15a\x01\x0FW`@Qc\xF2:na`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xF2:na\x90a\x03\xC4\x90\x89\x90\x89\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x07\xEBV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a\x03\xFEWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x03\xFB\x91\x81\x01\x90a\x08/V[`\x01[a\x04eW=\x80\x80\x15a\x04+W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x040V[``\x91P[P\x80Q_\x03a\x04]W`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\0\xD4V[\x80Q\x81` \x01\xFD[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16c\xF2:na`\xE0\x1B\x14a\x04\xA1W`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\0\xD4V[PPPPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15a\x01\x0FW`@Qc\xBC\x19|\x81`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xBC\x19|\x81\x90a\x04\xEE\x90\x89\x90\x89\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x08]V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a\x05(WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x05%\x91\x81\x01\x90a\x08/V[`\x01[a\x05UW=\x80\x80\x15a\x04+W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x040V[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16c\xBC\x19|\x81`\xE0\x1B\x14a\x04\xA1W`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\0\xD4V[_____`\xA0\x86\x88\x03\x12\x15a\x05\xA5W__\xFD[\x85Q` \x87\x01Q`@\x88\x01Q``\x89\x01Q`\x80\x8A\x01Q\x93\x98P\x91\x96P\x94P\x92P`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x05\xD9W__\xFD[\x80\x91PP\x92\x95P\x92\x95\x90\x93PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x06\x0FW`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x06-WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\0\xAAW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x06XWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x01jW_\x81U`\x01\x01a\x06dV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x06\x90Wa\x06\x90a\x05\xE7V[a\x06\xA4\x81a\x06\x9E\x84Ta\x05\xFBV[\x84a\x063V[` `\x1F\x82\x11`\x01\x81\x14a\x06\xD6W_\x83\x15a\x06\xBFWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x01jV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x07\x05W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x06\xE5V[P\x84\x82\x10\x15a\x07\"W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[\x80\x82\x01\x80\x82\x11\x15a\x07PWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x92\x91PPV[_\x81Q\x80\x84R` \x84\x01\x93P` \x83\x01_[\x82\x81\x10\x15a\x07\x86W\x81Q\x86R` \x95\x86\x01\x95\x90\x91\x01\x90`\x01\x01a\x07hV[P\x93\x94\x93PPPPV[`@\x81R_a\x07\xA2`@\x83\x01\x85a\x07VV[\x82\x81\x03` \x84\x01Ra\x07\xB4\x81\x85a\x07VV[\x95\x94PPPPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x16` \x82\x01R`@\x81\x01\x84\x90R``\x81\x01\x83\x90R`\xA0`\x80\x82\x01\x81\x90R_\x90a\x08$\x90\x83\x01\x84a\x07\xBDV[\x97\x96PPPPPPPV[_` \x82\x84\x03\x12\x15a\x08?W__\xFD[\x81Q`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x08VW__\xFD[\x93\x92PPPV[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x16` \x82\x01R`\xA0`@\x82\x01\x81\x90R_\x90a\x08\x88\x90\x83\x01\x86a\x07VV[\x82\x81\x03``\x84\x01Ra\x08\x9A\x81\x86a\x07VV[\x90P\x82\x81\x03`\x80\x84\x01Ra\x08\xAE\x81\x85a\x07\xBDV[\x98\x97PPPPPPPPV[a\x11\x08\x80a\x08\xC7_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\x8FW_5`\xE0\x1C\x80c.\xB2\xC2\xD6\x11a\0cW\x80c.\xB2\xC2\xD6\x14a\x01\x11W\x80cN\x12s\xF4\x14a\x01$W\x80c\xA2,\xB4e\x14a\x01DW\x80c\xE9\x85\xE9\xC5\x14a\x01WW\x80c\xF2BC*\x14a\x01jW__\xFD[\x80b\xFD\xD5\x8E\x14a\0\x93W\x80c\x01\xFF\xC9\xA7\x14a\0\xB9W\x80c\x0E\x894\x1C\x14a\0\xDCW\x80c\x15n)\xF6\x14a\0\xFCW[__\xFD[a\0\xA6a\0\xA16`\x04a\n\xDBV[a\x01}V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xCCa\0\xC76`\x04a\x0B\x1BV[a\x01\xA4V[`@Q\x90\x15\x15\x81R` \x01a\0\xB0V[a\0\xEFa\0\xEA6`\x04a\x0B=V[a\x01\xF3V[`@Qa\0\xB0\x91\x90a\x0B\x82V[a\x01\x0Fa\x01\n6`\x04a\x0B\x94V[a\x02\x85V[\0[a\x01\x0Fa\x01\x1F6`\x04a\r\x02V[a\x02\xA4V[a\x017a\x0126`\x04a\r\xB1V[a\x03\x10V[`@Qa\0\xB0\x91\x90a\x0E\xAEV[a\x01\x0Fa\x01R6`\x04a\x0E\xC0V[a\x03\xDBV[a\0\xCCa\x01e6`\x04a\x0E\xF9V[a\x03\xEAV[a\x01\x0Fa\x01x6`\x04a\x0F*V[a\x04\x17V[_\x81\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x86\x16\x84R\x90\x91R\x90 T[\x92\x91PPV[_`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cl\xDB=\x13`\xE1\x1B\x14\x80a\x01\xD4WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x03\xA2M\x07`\xE2\x1B\x14[\x80a\x01\x9EWPc\x01\xFF\xC9\xA7`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14a\x01\x9EV[```\x02\x80Ta\x02\x02\x90a\x0F~V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02.\x90a\x0F~V[\x80\x15a\x02yW\x80`\x1F\x10a\x02PWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02yV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\\W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x91\x90PV[a\x02\x9F\x83\x83\x83`@Q\x80` \x01`@R\x80_\x81RPa\x04vV[PPPV[3`\x01`\x01`\xA0\x1B\x03\x86\x16\x81\x14\x80\x15\x90a\x02\xC5WPa\x02\xC3\x86\x82a\x03\xEAV[\x15[\x15a\x02\xFBW`@Qcq\x1B\xEC\x91`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x83\x16`\x04\x83\x01R\x87\x16`$\x82\x01R`D\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\x08\x86\x86\x86\x86\x86a\x04\xD1V[PPPPPPV[``\x81Q\x83Q\x14a\x03AW\x81Q\x83Q`@Qc[\x05\x99\x91`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x02\xF2V[_\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\\Wa\x03\\a\x0B\xC4V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03\x85W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x84Q\x81\x10\x15a\x03\xD3W` \x80\x82\x02\x86\x01\x01Qa\x03\xAE\x90` \x80\x84\x02\x87\x01\x01Qa\x01}V[\x82\x82\x81Q\x81\x10a\x03\xC0Wa\x03\xC0a\x0F\xB6V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x03\x8AV[P\x93\x92PPPV[a\x03\xE63\x83\x83a\x056V[PPV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16_\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T`\xFF\x16\x90V[3`\x01`\x01`\xA0\x1B\x03\x86\x16\x81\x14\x80\x15\x90a\x048WPa\x046\x86\x82a\x03\xEAV[\x15[\x15a\x04iW`@Qcq\x1B\xEC\x91`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x83\x16`\x04\x83\x01R\x87\x16`$\x82\x01R`D\x01a\x02\xF2V[a\x03\x08\x86\x86\x86\x86\x86a\x05\xCAV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x04\x9FW`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`@\x80Q`\x01\x80\x82R` \x82\x01\x86\x90R\x81\x83\x01\x90\x81R``\x82\x01\x85\x90R`\x80\x82\x01\x90\x92R\x90a\x03\x08_\x87\x84\x84\x87a\x06VV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x04\xFAW`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x05\"W`@Qbj\rE`\xE2\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[a\x05/\x85\x85\x85\x85\x85a\x06VV[PPPPPV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05^W`@Qb\xCE\xD3\xE1`\xE8\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16_\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x80T`\xFF\x19\x16\x86\x15\x15\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x91\x01`@Q\x80\x91\x03\x90\xA3PPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x05\xF3W`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x06\x1BW`@Qbj\rE`\xE2\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`@\x80Q`\x01\x80\x82R` \x82\x01\x86\x90R\x81\x83\x01\x90\x81R``\x82\x01\x85\x90R`\x80\x82\x01\x90\x92R\x90a\x06M\x87\x87\x84\x84\x87a\x06VV[PPPPPPPV[a\x06b\x85\x85\x85\x85a\x06\xA9V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x05/W\x82Q3\x90`\x01\x03a\x06\x9BW` \x84\x81\x01Q\x90\x84\x01Qa\x06\x94\x83\x89\x89\x85\x85\x89a\x08\xB8V[PPa\x03\x08V[a\x03\x08\x81\x87\x87\x87\x87\x87a\t\xD9V[\x80Q\x82Q\x14a\x06\xD8W\x81Q\x81Q`@Qc[\x05\x99\x91`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x02\xF2V[3_[\x83Q\x81\x10\x15a\x07\xDAW` \x81\x81\x02\x85\x81\x01\x82\x01Q\x90\x85\x01\x90\x91\x01Q`\x01`\x01`\xA0\x1B\x03\x88\x16\x15a\x07\x8CW_\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8C\x16\x84R\x90\x91R\x90 T\x81\x81\x10\x15a\x07fW`@Qc\x03\xDE\xE4\xC5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16`\x04\x82\x01R`$\x81\x01\x82\x90R`D\x81\x01\x83\x90R`d\x81\x01\x84\x90R`\x84\x01a\x02\xF2V[_\x83\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8D\x16\x84R\x90\x91R\x90 \x90\x82\x90\x03\x90U[`\x01`\x01`\xA0\x1B\x03\x87\x16\x15a\x07\xD0W_\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8B\x16\x84R\x90\x91R\x81 \x80T\x83\x92\x90a\x07\xCA\x90\x84\x90a\x0F\xCAV[\x90\x91UPP[PP`\x01\x01a\x06\xDBV[P\x82Q`\x01\x03a\x08ZW` \x83\x01Q_\x90` \x84\x01Q\x90\x91P\x85`\x01`\x01`\xA0\x1B\x03\x16\x87`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xC3\xD5\x81h\xC5\xAEs\x97s\x1D\x06=[\xBF=exTBsC\xF4\xC0\x83$\x0Fz\xAC\xAA-\x0Fb\x85\x85`@Qa\x08K\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA4PPa\x05/V[\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x82`\x01`\x01`\xA0\x1B\x03\x16\x7FJ9\xDC\x06\xD4\xC0\xDB\xC6Kp\xAF\x90\xFDi\x8A#:Q\x8A\xA5\xD0~Y]\x98;\x8C\x05&\xC8\xF7\xFB\x86\x86`@Qa\x08\xA9\x92\x91\x90a\x0F\xE9V[`@Q\x80\x91\x03\x90\xA4PPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15a\x03\x08W`@Qc\xF2:na`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xF2:na\x90a\x08\xFC\x90\x89\x90\x89\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x10\x16V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a\t6WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\t3\x91\x81\x01\x90a\x10ZV[`\x01[a\t\x9DW=\x80\x80\x15a\tcW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\thV[``\x91P[P\x80Q_\x03a\t\x95W`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\x02\xF2V[\x80Q\x81` \x01\xFD[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16c\xF2:na`\xE0\x1B\x14a\x06MW`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15a\x03\x08W`@Qc\xBC\x19|\x81`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xBC\x19|\x81\x90a\n\x1D\x90\x89\x90\x89\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x10uV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a\nWWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\nT\x91\x81\x01\x90a\x10ZV[`\x01[a\n\x84W=\x80\x80\x15a\tcW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\thV[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16c\xBC\x19|\x81`\xE0\x1B\x14a\x06MW`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\x02\xF2V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\xD6W__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\n\xECW__\xFD[a\n\xF5\x83a\n\xC0V[\x94` \x93\x90\x93\x015\x93PPPV[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x0B\x18W__\xFD[PV[_` \x82\x84\x03\x12\x15a\x0B+W__\xFD[\x815a\x0B6\x81a\x0B\x03V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0BMW__\xFD[P5\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x0B6` \x83\x01\x84a\x0BTV[___``\x84\x86\x03\x12\x15a\x0B\xA6W__\xFD[a\x0B\xAF\x84a\n\xC0V[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C\x01Wa\x0C\x01a\x0B\xC4V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0C\"Wa\x0C\"a\x0B\xC4V[P`\x05\x1B` \x01\x90V[_\x82`\x1F\x83\x01\x12a\x0C;W__\xFD[\x815a\x0CNa\x0CI\x82a\x0C\tV[a\x0B\xD8V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x86\x01\x01\x92P\x85\x83\x11\x15a\x0CoW__\xFD[` \x85\x01[\x83\x81\x10\x15a\x0C\x8CW\x805\x83R` \x92\x83\x01\x92\x01a\x0CtV[P\x95\x94PPPPPV[_\x82`\x1F\x83\x01\x12a\x0C\xA5W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xBFWa\x0C\xBFa\x0B\xC4V[a\x0C\xD2`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0B\xD8V[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a\x0C\xE6W__\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[_____`\xA0\x86\x88\x03\x12\x15a\r\x16W__\xFD[a\r\x1F\x86a\n\xC0V[\x94Pa\r-` \x87\x01a\n\xC0V[\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rHW__\xFD[a\rT\x88\x82\x89\x01a\x0C,V[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rpW__\xFD[a\r|\x88\x82\x89\x01a\x0C,V[\x92PP`\x80\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x98W__\xFD[a\r\xA4\x88\x82\x89\x01a\x0C\x96V[\x91PP\x92\x95P\x92\x95\x90\x93PV[__`@\x83\x85\x03\x12\x15a\r\xC2W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xD8W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\r\xE8W__\xFD[\x805a\r\xF6a\x0CI\x82a\x0C\tV[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x85\x01\x01\x92P\x87\x83\x11\x15a\x0E\x17W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x0E@Wa\x0E/\x84a\n\xC0V[\x82R` \x93\x84\x01\x93\x90\x91\x01\x90a\x0E\x1EV[\x94PPPP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E^W__\xFD[a\x0Ej\x85\x82\x86\x01a\x0C,V[\x91PP\x92P\x92\x90PV[_\x81Q\x80\x84R` \x84\x01\x93P` \x83\x01_[\x82\x81\x10\x15a\x0E\xA4W\x81Q\x86R` \x95\x86\x01\x95\x90\x91\x01\x90`\x01\x01a\x0E\x86V[P\x93\x94\x93PPPPV[` \x81R_a\x0B6` \x83\x01\x84a\x0EtV[__`@\x83\x85\x03\x12\x15a\x0E\xD1W__\xFD[a\x0E\xDA\x83a\n\xC0V[\x91P` \x83\x015\x80\x15\x15\x81\x14a\x0E\xEEW__\xFD[\x80\x91PP\x92P\x92\x90PV[__`@\x83\x85\x03\x12\x15a\x0F\nW__\xFD[a\x0F\x13\x83a\n\xC0V[\x91Pa\x0F!` \x84\x01a\n\xC0V[\x90P\x92P\x92\x90PV[_____`\xA0\x86\x88\x03\x12\x15a\x0F>W__\xFD[a\x0FG\x86a\n\xC0V[\x94Pa\x0FU` \x87\x01a\n\xC0V[\x93P`@\x86\x015\x92P``\x86\x015\x91P`\x80\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x98W__\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0F\x92W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0F\xB0WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x01\x9EWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`@\x81R_a\x0F\xFB`@\x83\x01\x85a\x0EtV[\x82\x81\x03` \x84\x01Ra\x10\r\x81\x85a\x0EtV[\x95\x94PPPPPV[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x16` \x82\x01R`@\x81\x01\x84\x90R``\x81\x01\x83\x90R`\xA0`\x80\x82\x01\x81\x90R_\x90a\x10O\x90\x83\x01\x84a\x0BTV[\x97\x96PPPPPPPV[_` \x82\x84\x03\x12\x15a\x10jW__\xFD[\x81Qa\x0B6\x81a\x0B\x03V[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x16` \x82\x01R`\xA0`@\x82\x01\x81\x90R_\x90a\x10\xA0\x90\x83\x01\x86a\x0EtV[\x82\x81\x03``\x84\x01Ra\x10\xB2\x81\x86a\x0EtV[\x90P\x82\x81\x03`\x80\x84\x01Ra\x10\xC6\x81\x85a\x0BTV[\x98\x97PPPPPPPPV\xFE\xA2dipfsX\"\x12 P@\x1B\xCD*!\xD60\x99`\x92\x97\xC2b\xA1\xDC\xE7\x06\xC5\xDCg1f]\xAC\xCC\xE33EH]fdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b506004361061008f575f3560e01c80632eb2c2d6116100635780632eb2c2d6146101115780634e1273f414610124578063a22cb46514610144578063e985e9c514610157578063f242432a1461016a575f5ffd5b8062fdd58e1461009357806301ffc9a7146100b95780630e89341c146100dc578063156e29f6146100fc575b5f5ffd5b6100a66100a1366004610adb565b61017d565b6040519081526020015b60405180910390f35b6100cc6100c7366004610b1b565b6101a4565b60405190151581526020016100b0565b6100ef6100ea366004610b3d565b6101f3565b6040516100b09190610b82565b61010f61010a366004610b94565b610285565b005b61010f61011f366004610d02565b6102a4565b610137610132366004610db1565b610310565b6040516100b09190610eae565b61010f610152366004610ec0565b6103db565b6100cc610165366004610ef9565b6103ea565b61010f610178366004610f2a565b610417565b5f818152602081815260408083206001600160a01b03861684529091529020545b92915050565b5f6001600160e01b03198216636cdb3d1360e11b14806101d457506001600160e01b031982166303a24d0760e21b145b8061019e57506301ffc9a760e01b6001600160e01b031983161461019e565b60606002805461020290610f7e565b80601f016020809104026020016040519081016040528092919081815260200182805461022e90610f7e565b80156102795780601f1061025057610100808354040283529160200191610279565b820191905f5260205f20905b81548152906001019060200180831161025c57829003601f168201915b50505050509050919050565b61029f83838360405180602001604052805f815250610476565b505050565b336001600160a01b03861681148015906102c557506102c386826103ea565b155b156102fb5760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044015b60405180910390fd5b61030886868686866104d1565b505050505050565b606081518351146103415781518351604051635b05999160e01b8152600481019290925260248201526044016102f2565b5f835167ffffffffffffffff81111561035c5761035c610bc4565b604051908082528060200260200182016040528015610385578160200160208202803683370190505b5090505f5b84518110156103d3576020808202860101516103ae9060208084028701015161017d565b8282815181106103c0576103c0610fb6565b602090810291909101015260010161038a565b509392505050565b6103e6338383610536565b5050565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610438575061043686826103ea565b155b156104695760405163711bec9160e11b81526001600160a01b038083166004830152871660248201526044016102f2565b61030886868686866105ca565b6001600160a01b03841661049f57604051632bfa23e760e11b81525f60048201526024016102f2565b604080516001808252602082018690528183019081526060820185905260808201909252906103085f87848487610656565b6001600160a01b0384166104fa57604051632bfa23e760e11b81525f60048201526024016102f2565b6001600160a01b03851661052257604051626a0d4560e21b81525f60048201526024016102f2565b61052f8585858585610656565b5050505050565b6001600160a01b03821661055e5760405162ced3e160e81b81525f60048201526024016102f2565b6001600160a01b038381165f81815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166105f357604051632bfa23e760e11b81525f60048201526024016102f2565b6001600160a01b03851661061b57604051626a0d4560e21b81525f60048201526024016102f2565b6040805160018082526020820186905281830190815260608201859052608082019092529061064d8787848487610656565b50505050505050565b610662858585856106a9565b6001600160a01b0384161561052f578251339060010361069b57602084810151908401516106948389898585896108b8565b5050610308565b6103088187878787876109d9565b80518251146106d85781518151604051635b05999160e01b8152600481019290925260248201526044016102f2565b335f5b83518110156107da576020818102858101820151908501909101516001600160a01b0388161561078c575f828152602081815260408083206001600160a01b038c16845290915290205481811015610766576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016102f2565b5f838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b038716156107d0575f828152602081815260408083206001600160a01b038b168452909152812080548392906107ca908490610fca565b90915550505b50506001016106db565b50825160010361085a5760208301515f906020840151909150856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62858560405161084b929190918252602082015260400190565b60405180910390a4505061052f565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb86866040516108a9929190610fe9565b60405180910390a45050505050565b6001600160a01b0384163b156103085760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906108fc9089908990889088908890600401611016565b6020604051808303815f875af1925050508015610936575060408051601f3d908101601f191682019092526109339181019061105a565b60015b61099d573d808015610963576040519150601f19603f3d011682016040523d82523d5f602084013e610968565b606091505b5080515f0361099557604051632bfa23e760e11b81526001600160a01b03861660048201526024016102f2565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b1461064d57604051632bfa23e760e11b81526001600160a01b03861660048201526024016102f2565b6001600160a01b0384163b156103085760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190610a1d9089908990889088908890600401611075565b6020604051808303815f875af1925050508015610a57575060408051601f3d908101601f19168201909252610a549181019061105a565b60015b610a84573d808015610963576040519150601f19603f3d011682016040523d82523d5f602084013e610968565b6001600160e01b0319811663bc197c8160e01b1461064d57604051632bfa23e760e11b81526001600160a01b03861660048201526024016102f2565b80356001600160a01b0381168114610ad6575f5ffd5b919050565b5f5f60408385031215610aec575f5ffd5b610af583610ac0565b946020939093013593505050565b6001600160e01b031981168114610b18575f5ffd5b50565b5f60208284031215610b2b575f5ffd5b8135610b3681610b03565b9392505050565b5f60208284031215610b4d575f5ffd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f610b366020830184610b54565b5f5f5f60608486031215610ba6575f5ffd5b610baf84610ac0565b95602085013595506040909401359392505050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610c0157610c01610bc4565b604052919050565b5f67ffffffffffffffff821115610c2257610c22610bc4565b5060051b60200190565b5f82601f830112610c3b575f5ffd5b8135610c4e610c4982610c09565b610bd8565b8082825260208201915060208360051b860101925085831115610c6f575f5ffd5b602085015b83811015610c8c578035835260209283019201610c74565b5095945050505050565b5f82601f830112610ca5575f5ffd5b813567ffffffffffffffff811115610cbf57610cbf610bc4565b610cd2601f8201601f1916602001610bd8565b818152846020838601011115610ce6575f5ffd5b816020850160208301375f918101602001919091529392505050565b5f5f5f5f5f60a08688031215610d16575f5ffd5b610d1f86610ac0565b9450610d2d60208701610ac0565b9350604086013567ffffffffffffffff811115610d48575f5ffd5b610d5488828901610c2c565b935050606086013567ffffffffffffffff811115610d70575f5ffd5b610d7c88828901610c2c565b925050608086013567ffffffffffffffff811115610d98575f5ffd5b610da488828901610c96565b9150509295509295909350565b5f5f60408385031215610dc2575f5ffd5b823567ffffffffffffffff811115610dd8575f5ffd5b8301601f81018513610de8575f5ffd5b8035610df6610c4982610c09565b8082825260208201915060208360051b850101925087831115610e17575f5ffd5b6020840193505b82841015610e4057610e2f84610ac0565b825260209384019390910190610e1e565b9450505050602083013567ffffffffffffffff811115610e5e575f5ffd5b610e6a85828601610c2c565b9150509250929050565b5f8151808452602084019350602083015f5b82811015610ea4578151865260209586019590910190600101610e86565b5093949350505050565b602081525f610b366020830184610e74565b5f5f60408385031215610ed1575f5ffd5b610eda83610ac0565b915060208301358015158114610eee575f5ffd5b809150509250929050565b5f5f60408385031215610f0a575f5ffd5b610f1383610ac0565b9150610f2160208401610ac0565b90509250929050565b5f5f5f5f5f60a08688031215610f3e575f5ffd5b610f4786610ac0565b9450610f5560208701610ac0565b93506040860135925060608601359150608086013567ffffffffffffffff811115610d98575f5ffd5b600181811c90821680610f9257607f821691505b602082108103610fb057634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b8082018082111561019e57634e487b7160e01b5f52601160045260245ffd5b604081525f610ffb6040830185610e74565b828103602084015261100d8185610e74565b95945050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190525f9061104f90830184610b54565b979650505050505050565b5f6020828403121561106a575f5ffd5b8151610b3681610b03565b6001600160a01b0386811682528516602082015260a0604082018190525f906110a090830186610e74565b82810360608401526110b28186610e74565b905082810360808401526110c68185610b54565b9897505050505050505056fea264697066735822122050401bcd2a21d63099609297c262a1dce706c5dc6731665daccce33345485d6664736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\0\x8FW_5`\xE0\x1C\x80c.\xB2\xC2\xD6\x11a\0cW\x80c.\xB2\xC2\xD6\x14a\x01\x11W\x80cN\x12s\xF4\x14a\x01$W\x80c\xA2,\xB4e\x14a\x01DW\x80c\xE9\x85\xE9\xC5\x14a\x01WW\x80c\xF2BC*\x14a\x01jW__\xFD[\x80b\xFD\xD5\x8E\x14a\0\x93W\x80c\x01\xFF\xC9\xA7\x14a\0\xB9W\x80c\x0E\x894\x1C\x14a\0\xDCW\x80c\x15n)\xF6\x14a\0\xFCW[__\xFD[a\0\xA6a\0\xA16`\x04a\n\xDBV[a\x01}V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0\xCCa\0\xC76`\x04a\x0B\x1BV[a\x01\xA4V[`@Q\x90\x15\x15\x81R` \x01a\0\xB0V[a\0\xEFa\0\xEA6`\x04a\x0B=V[a\x01\xF3V[`@Qa\0\xB0\x91\x90a\x0B\x82V[a\x01\x0Fa\x01\n6`\x04a\x0B\x94V[a\x02\x85V[\0[a\x01\x0Fa\x01\x1F6`\x04a\r\x02V[a\x02\xA4V[a\x017a\x0126`\x04a\r\xB1V[a\x03\x10V[`@Qa\0\xB0\x91\x90a\x0E\xAEV[a\x01\x0Fa\x01R6`\x04a\x0E\xC0V[a\x03\xDBV[a\0\xCCa\x01e6`\x04a\x0E\xF9V[a\x03\xEAV[a\x01\x0Fa\x01x6`\x04a\x0F*V[a\x04\x17V[_\x81\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x86\x16\x84R\x90\x91R\x90 T[\x92\x91PPV[_`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cl\xDB=\x13`\xE1\x1B\x14\x80a\x01\xD4WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x03\xA2M\x07`\xE2\x1B\x14[\x80a\x01\x9EWPc\x01\xFF\xC9\xA7`\xE0\x1B`\x01`\x01`\xE0\x1B\x03\x19\x83\x16\x14a\x01\x9EV[```\x02\x80Ta\x02\x02\x90a\x0F~V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x02.\x90a\x0F~V[\x80\x15a\x02yW\x80`\x1F\x10a\x02PWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x02yV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x02\\W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x91\x90PV[a\x02\x9F\x83\x83\x83`@Q\x80` \x01`@R\x80_\x81RPa\x04vV[PPPV[3`\x01`\x01`\xA0\x1B\x03\x86\x16\x81\x14\x80\x15\x90a\x02\xC5WPa\x02\xC3\x86\x82a\x03\xEAV[\x15[\x15a\x02\xFBW`@Qcq\x1B\xEC\x91`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x83\x16`\x04\x83\x01R\x87\x16`$\x82\x01R`D\x01[`@Q\x80\x91\x03\x90\xFD[a\x03\x08\x86\x86\x86\x86\x86a\x04\xD1V[PPPPPPV[``\x81Q\x83Q\x14a\x03AW\x81Q\x83Q`@Qc[\x05\x99\x91`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x02\xF2V[_\x83Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x03\\Wa\x03\\a\x0B\xC4V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x03\x85W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x84Q\x81\x10\x15a\x03\xD3W` \x80\x82\x02\x86\x01\x01Qa\x03\xAE\x90` \x80\x84\x02\x87\x01\x01Qa\x01}V[\x82\x82\x81Q\x81\x10a\x03\xC0Wa\x03\xC0a\x0F\xB6V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x03\x8AV[P\x93\x92PPPV[a\x03\xE63\x83\x83a\x056V[PPV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16_\x90\x81R`\x01` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R\x91\x90\x91R T`\xFF\x16\x90V[3`\x01`\x01`\xA0\x1B\x03\x86\x16\x81\x14\x80\x15\x90a\x048WPa\x046\x86\x82a\x03\xEAV[\x15[\x15a\x04iW`@Qcq\x1B\xEC\x91`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x80\x83\x16`\x04\x83\x01R\x87\x16`$\x82\x01R`D\x01a\x02\xF2V[a\x03\x08\x86\x86\x86\x86\x86a\x05\xCAV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x04\x9FW`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`@\x80Q`\x01\x80\x82R` \x82\x01\x86\x90R\x81\x83\x01\x90\x81R``\x82\x01\x85\x90R`\x80\x82\x01\x90\x92R\x90a\x03\x08_\x87\x84\x84\x87a\x06VV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x04\xFAW`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x05\"W`@Qbj\rE`\xE2\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[a\x05/\x85\x85\x85\x85\x85a\x06VV[PPPPPV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x05^W`@Qb\xCE\xD3\xE1`\xE8\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16_\x81\x81R`\x01` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R\x94\x82R\x91\x82\x90 \x80T`\xFF\x19\x16\x86\x15\x15\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x91\x01`@Q\x80\x91\x03\x90\xA3PPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x05\xF3W`@Qc+\xFA#\xE7`\xE1\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x85\x16a\x06\x1BW`@Qbj\rE`\xE2\x1B\x81R_`\x04\x82\x01R`$\x01a\x02\xF2V[`@\x80Q`\x01\x80\x82R` \x82\x01\x86\x90R\x81\x83\x01\x90\x81R``\x82\x01\x85\x90R`\x80\x82\x01\x90\x92R\x90a\x06M\x87\x87\x84\x84\x87a\x06VV[PPPPPPPV[a\x06b\x85\x85\x85\x85a\x06\xA9V[`\x01`\x01`\xA0\x1B\x03\x84\x16\x15a\x05/W\x82Q3\x90`\x01\x03a\x06\x9BW` \x84\x81\x01Q\x90\x84\x01Qa\x06\x94\x83\x89\x89\x85\x85\x89a\x08\xB8V[PPa\x03\x08V[a\x03\x08\x81\x87\x87\x87\x87\x87a\t\xD9V[\x80Q\x82Q\x14a\x06\xD8W\x81Q\x81Q`@Qc[\x05\x99\x91`\xE0\x1B\x81R`\x04\x81\x01\x92\x90\x92R`$\x82\x01R`D\x01a\x02\xF2V[3_[\x83Q\x81\x10\x15a\x07\xDAW` \x81\x81\x02\x85\x81\x01\x82\x01Q\x90\x85\x01\x90\x91\x01Q`\x01`\x01`\xA0\x1B\x03\x88\x16\x15a\x07\x8CW_\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8C\x16\x84R\x90\x91R\x90 T\x81\x81\x10\x15a\x07fW`@Qc\x03\xDE\xE4\xC5`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16`\x04\x82\x01R`$\x81\x01\x82\x90R`D\x81\x01\x83\x90R`d\x81\x01\x84\x90R`\x84\x01a\x02\xF2V[_\x83\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8D\x16\x84R\x90\x91R\x90 \x90\x82\x90\x03\x90U[`\x01`\x01`\xA0\x1B\x03\x87\x16\x15a\x07\xD0W_\x82\x81R` \x81\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x8B\x16\x84R\x90\x91R\x81 \x80T\x83\x92\x90a\x07\xCA\x90\x84\x90a\x0F\xCAV[\x90\x91UPP[PP`\x01\x01a\x06\xDBV[P\x82Q`\x01\x03a\x08ZW` \x83\x01Q_\x90` \x84\x01Q\x90\x91P\x85`\x01`\x01`\xA0\x1B\x03\x16\x87`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x7F\xC3\xD5\x81h\xC5\xAEs\x97s\x1D\x06=[\xBF=exTBsC\xF4\xC0\x83$\x0Fz\xAC\xAA-\x0Fb\x85\x85`@Qa\x08K\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA4PPa\x05/V[\x83`\x01`\x01`\xA0\x1B\x03\x16\x85`\x01`\x01`\xA0\x1B\x03\x16\x82`\x01`\x01`\xA0\x1B\x03\x16\x7FJ9\xDC\x06\xD4\xC0\xDB\xC6Kp\xAF\x90\xFDi\x8A#:Q\x8A\xA5\xD0~Y]\x98;\x8C\x05&\xC8\xF7\xFB\x86\x86`@Qa\x08\xA9\x92\x91\x90a\x0F\xE9V[`@Q\x80\x91\x03\x90\xA4PPPPPV[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15a\x03\x08W`@Qc\xF2:na`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xF2:na\x90a\x08\xFC\x90\x89\x90\x89\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x10\x16V[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a\t6WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\t3\x91\x81\x01\x90a\x10ZV[`\x01[a\t\x9DW=\x80\x80\x15a\tcW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\thV[``\x91P[P\x80Q_\x03a\t\x95W`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\x02\xF2V[\x80Q\x81` \x01\xFD[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16c\xF2:na`\xE0\x1B\x14a\x06MW`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\x02\xF2V[`\x01`\x01`\xA0\x1B\x03\x84\x16;\x15a\x03\x08W`@Qc\xBC\x19|\x81`\xE0\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\xBC\x19|\x81\x90a\n\x1D\x90\x89\x90\x89\x90\x88\x90\x88\x90\x88\x90`\x04\x01a\x10uV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a\nWWP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\nT\x91\x81\x01\x90a\x10ZV[`\x01[a\n\x84W=\x80\x80\x15a\tcW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\thV[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16c\xBC\x19|\x81`\xE0\x1B\x14a\x06MW`@Qc+\xFA#\xE7`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x86\x16`\x04\x82\x01R`$\x01a\x02\xF2V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\xD6W__\xFD[\x91\x90PV[__`@\x83\x85\x03\x12\x15a\n\xECW__\xFD[a\n\xF5\x83a\n\xC0V[\x94` \x93\x90\x93\x015\x93PPPV[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x0B\x18W__\xFD[PV[_` \x82\x84\x03\x12\x15a\x0B+W__\xFD[\x815a\x0B6\x81a\x0B\x03V[\x93\x92PPPV[_` \x82\x84\x03\x12\x15a\x0BMW__\xFD[P5\x91\x90PV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x0B6` \x83\x01\x84a\x0BTV[___``\x84\x86\x03\x12\x15a\x0B\xA6W__\xFD[a\x0B\xAF\x84a\n\xC0V[\x95` \x85\x015\x95P`@\x90\x94\x015\x93\x92PPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x0C\x01Wa\x0C\x01a\x0B\xC4V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a\x0C\"Wa\x0C\"a\x0B\xC4V[P`\x05\x1B` \x01\x90V[_\x82`\x1F\x83\x01\x12a\x0C;W__\xFD[\x815a\x0CNa\x0CI\x82a\x0C\tV[a\x0B\xD8V[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x86\x01\x01\x92P\x85\x83\x11\x15a\x0CoW__\xFD[` \x85\x01[\x83\x81\x10\x15a\x0C\x8CW\x805\x83R` \x92\x83\x01\x92\x01a\x0CtV[P\x95\x94PPPPPV[_\x82`\x1F\x83\x01\x12a\x0C\xA5W__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0C\xBFWa\x0C\xBFa\x0B\xC4V[a\x0C\xD2`\x1F\x82\x01`\x1F\x19\x16` \x01a\x0B\xD8V[\x81\x81R\x84` \x83\x86\x01\x01\x11\x15a\x0C\xE6W__\xFD[\x81` \x85\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[_____`\xA0\x86\x88\x03\x12\x15a\r\x16W__\xFD[a\r\x1F\x86a\n\xC0V[\x94Pa\r-` \x87\x01a\n\xC0V[\x93P`@\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rHW__\xFD[a\rT\x88\x82\x89\x01a\x0C,V[\x93PP``\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\rpW__\xFD[a\r|\x88\x82\x89\x01a\x0C,V[\x92PP`\x80\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x98W__\xFD[a\r\xA4\x88\x82\x89\x01a\x0C\x96V[\x91PP\x92\x95P\x92\x95\x90\x93PV[__`@\x83\x85\x03\x12\x15a\r\xC2W__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\xD8W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\r\xE8W__\xFD[\x805a\r\xF6a\x0CI\x82a\x0C\tV[\x80\x82\x82R` \x82\x01\x91P` \x83`\x05\x1B\x85\x01\x01\x92P\x87\x83\x11\x15a\x0E\x17W__\xFD[` \x84\x01\x93P[\x82\x84\x10\x15a\x0E@Wa\x0E/\x84a\n\xC0V[\x82R` \x93\x84\x01\x93\x90\x91\x01\x90a\x0E\x1EV[\x94PPPP` \x83\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0E^W__\xFD[a\x0Ej\x85\x82\x86\x01a\x0C,V[\x91PP\x92P\x92\x90PV[_\x81Q\x80\x84R` \x84\x01\x93P` \x83\x01_[\x82\x81\x10\x15a\x0E\xA4W\x81Q\x86R` \x95\x86\x01\x95\x90\x91\x01\x90`\x01\x01a\x0E\x86V[P\x93\x94\x93PPPPV[` \x81R_a\x0B6` \x83\x01\x84a\x0EtV[__`@\x83\x85\x03\x12\x15a\x0E\xD1W__\xFD[a\x0E\xDA\x83a\n\xC0V[\x91P` \x83\x015\x80\x15\x15\x81\x14a\x0E\xEEW__\xFD[\x80\x91PP\x92P\x92\x90PV[__`@\x83\x85\x03\x12\x15a\x0F\nW__\xFD[a\x0F\x13\x83a\n\xC0V[\x91Pa\x0F!` \x84\x01a\n\xC0V[\x90P\x92P\x92\x90PV[_____`\xA0\x86\x88\x03\x12\x15a\x0F>W__\xFD[a\x0FG\x86a\n\xC0V[\x94Pa\x0FU` \x87\x01a\n\xC0V[\x93P`@\x86\x015\x92P``\x86\x015\x91P`\x80\x86\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\r\x98W__\xFD[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x0F\x92W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x0F\xB0WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x01\x9EWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[`@\x81R_a\x0F\xFB`@\x83\x01\x85a\x0EtV[\x82\x81\x03` \x84\x01Ra\x10\r\x81\x85a\x0EtV[\x95\x94PPPPPV[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x16` \x82\x01R`@\x81\x01\x84\x90R``\x81\x01\x83\x90R`\xA0`\x80\x82\x01\x81\x90R_\x90a\x10O\x90\x83\x01\x84a\x0BTV[\x97\x96PPPPPPPV[_` \x82\x84\x03\x12\x15a\x10jW__\xFD[\x81Qa\x0B6\x81a\x0B\x03V[`\x01`\x01`\xA0\x1B\x03\x86\x81\x16\x82R\x85\x16` \x82\x01R`\xA0`@\x82\x01\x81\x90R_\x90a\x10\xA0\x90\x83\x01\x86a\x0EtV[\x82\x81\x03``\x84\x01Ra\x10\xB2\x81\x86a\x0EtV[\x90P\x82\x81\x03`\x80\x84\x01Ra\x10\xC6\x81\x85a\x0BTV[\x98\x97PPPPPPPPV\xFE\xA2dipfsX\"\x12 P@\x1B\xCD*!\xD60\x99`\x92\x97\xC2b\xA1\xDC\xE7\x06\xC5\xDCg1f]\xAC\xCC\xE33EH]fdsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `ERC1155InsufficientBalance(address,uint256,uint256,uint256)` and selector `0x03dee4c5`.
```solidity
error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155InsufficientBalance {
        pub sender: alloy::sol_types::private::Address,
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
        pub needed: alloy::sol_types::private::primitives::aliases::U256,
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155InsufficientBalance>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155InsufficientBalance) -> Self {
                (value.sender, value.balance, value.needed, value.tokenId)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1155InsufficientBalance {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    sender: tuple.0,
                    balance: tuple.1,
                    needed: tuple.2,
                    tokenId: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155InsufficientBalance {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155InsufficientBalance(address,uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [3u8, 222u8, 228u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.balance),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.needed),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                )
            }
        }
    };
    /**Custom error with signature `ERC1155InvalidApprover(address)` and selector `0x3e31884e`.
```solidity
error ERC1155InvalidApprover(address approver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155InvalidApprover {
        pub approver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155InvalidApprover> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155InvalidApprover) -> Self {
                (value.approver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1155InvalidApprover {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { approver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155InvalidApprover {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155InvalidApprover(address)";
            const SELECTOR: [u8; 4] = [62u8, 49u8, 136u8, 78u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.approver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1155InvalidArrayLength(uint256,uint256)` and selector `0x5b059991`.
```solidity
error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155InvalidArrayLength {
        pub idsLength: alloy::sol_types::private::primitives::aliases::U256,
        pub valuesLength: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155InvalidArrayLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155InvalidArrayLength) -> Self {
                (value.idsLength, value.valuesLength)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1155InvalidArrayLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    idsLength: tuple.0,
                    valuesLength: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155InvalidArrayLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155InvalidArrayLength(uint256,uint256)";
            const SELECTOR: [u8; 4] = [91u8, 5u8, 153u8, 145u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.idsLength),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.valuesLength),
                )
            }
        }
    };
    /**Custom error with signature `ERC1155InvalidOperator(address)` and selector `0xced3e100`.
```solidity
error ERC1155InvalidOperator(address operator);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155InvalidOperator {
        pub operator: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155InvalidOperator> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155InvalidOperator) -> Self {
                (value.operator,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1155InvalidOperator {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { operator: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155InvalidOperator {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155InvalidOperator(address)";
            const SELECTOR: [u8; 4] = [206u8, 211u8, 225u8, 0u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1155InvalidReceiver(address)` and selector `0x57f447ce`.
```solidity
error ERC1155InvalidReceiver(address receiver);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155InvalidReceiver {
        pub receiver: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155InvalidReceiver> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155InvalidReceiver) -> Self {
                (value.receiver,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1155InvalidReceiver {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { receiver: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155InvalidReceiver {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155InvalidReceiver(address)";
            const SELECTOR: [u8; 4] = [87u8, 244u8, 71u8, 206u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.receiver,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1155InvalidSender(address)` and selector `0x01a83514`.
```solidity
error ERC1155InvalidSender(address sender);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155InvalidSender {
        pub sender: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155InvalidSender> for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155InvalidSender) -> Self {
                (value.sender,)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for ERC1155InvalidSender {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self { sender: tuple.0 }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155InvalidSender {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155InvalidSender(address)";
            const SELECTOR: [u8; 4] = [1u8, 168u8, 53u8, 20u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sender,
                    ),
                )
            }
        }
    };
    /**Custom error with signature `ERC1155MissingApprovalForAll(address,address)` and selector `0xe237d922`.
```solidity
error ERC1155MissingApprovalForAll(address operator, address owner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ERC1155MissingApprovalForAll {
        pub operator: alloy::sol_types::private::Address,
        pub owner: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<ERC1155MissingApprovalForAll>
        for UnderlyingRustTuple<'_> {
            fn from(value: ERC1155MissingApprovalForAll) -> Self {
                (value.operator, value.owner)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for ERC1155MissingApprovalForAll {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    operator: tuple.0,
                    owner: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for ERC1155MissingApprovalForAll {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ERC1155MissingApprovalForAll(address,address)";
            const SELECTOR: [u8; 4] = [226u8, 55u8, 217u8, 34u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                )
            }
        }
    };
    /**Event with signature `ApprovalForAll(address,address,bool)` and selector `0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31`.
```solidity
event ApprovalForAll(address indexed account, address indexed operator, bool approved);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApprovalForAll {
        #[allow(missing_docs)]
        pub account: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub approved: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApprovalForAll {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApprovalForAll(address,address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    account: topics.1,
                    operator: topics.2,
                    approved: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.account.clone(),
                    self.operator.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.account,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.operator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApprovalForAll {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApprovalForAll> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApprovalForAll) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransferBatch(address,address,address,uint256[],uint256[])` and selector `0x4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb`.
```solidity
event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransferBatch {
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub ids: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        #[allow(missing_docs)]
        pub values: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransferBatch {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransferBatch(address,address,address,uint256[],uint256[])";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                74u8,
                57u8,
                220u8,
                6u8,
                212u8,
                192u8,
                219u8,
                198u8,
                75u8,
                112u8,
                175u8,
                144u8,
                253u8,
                105u8,
                138u8,
                35u8,
                58u8,
                81u8,
                138u8,
                165u8,
                208u8,
                126u8,
                89u8,
                93u8,
                152u8,
                59u8,
                140u8,
                5u8,
                38u8,
                200u8,
                247u8,
                251u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    operator: topics.1,
                    from: topics.2,
                    to: topics.3,
                    ids: data.0,
                    values: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.ids),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.values),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.operator.clone(),
                    self.from.clone(),
                    self.to.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.operator,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransferBatch {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransferBatch> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransferBatch) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransferSingle(address,address,address,uint256,uint256)` and selector `0xc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62`.
```solidity
event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransferSingle {
        #[allow(missing_docs)]
        pub operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransferSingle {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "TransferSingle(address,address,address,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                195u8,
                213u8,
                129u8,
                104u8,
                197u8,
                174u8,
                115u8,
                151u8,
                115u8,
                29u8,
                6u8,
                61u8,
                91u8,
                191u8,
                61u8,
                101u8,
                120u8,
                84u8,
                66u8,
                115u8,
                67u8,
                244u8,
                192u8,
                131u8,
                36u8,
                15u8,
                122u8,
                172u8,
                170u8,
                45u8,
                15u8,
                98u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    operator: topics.1,
                    from: topics.2,
                    to: topics.3,
                    id: data.0,
                    value: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self.operator.clone(),
                    self.from.clone(),
                    self.to.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.operator,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.from,
                );
                out[3usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.to,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransferSingle {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransferSingle> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransferSingle) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `URI(string,uint256)` and selector `0x6bb7ff708619ba0610cba295a58592e0451dee2622938c8755667688daf3529b`.
```solidity
event URI(string value, uint256 indexed id);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct URI {
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::String,
        #[allow(missing_docs)]
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for URI {
            type DataTuple<'a> = (alloy::sol_types::sol_data::String,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "URI(string,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                107u8,
                183u8,
                255u8,
                112u8,
                134u8,
                25u8,
                186u8,
                6u8,
                16u8,
                203u8,
                162u8,
                149u8,
                165u8,
                133u8,
                146u8,
                224u8,
                69u8,
                29u8,
                238u8,
                38u8,
                34u8,
                147u8,
                140u8,
                135u8,
                85u8,
                102u8,
                118u8,
                136u8,
                218u8,
                243u8,
                82u8,
                155u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    value: data.0,
                    id: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.id.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self.id);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for URI {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&URI> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &URI) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(uint256 initial_id, uint256 value, uint256 initial_id_two, uint256 value_two, address initialOwner);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub initial_id: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub initial_id_two: alloy::sol_types::private::primitives::aliases::U256,
        pub value_two: alloy::sol_types::private::primitives::aliases::U256,
        pub initialOwner: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.initial_id,
                        value.value,
                        value.initial_id_two,
                        value.value_two,
                        value.initialOwner,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        initial_id: tuple.0,
                        value: tuple.1,
                        initial_id_two: tuple.2,
                        value_two: tuple.3,
                        initialOwner: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.initial_id),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.initial_id_two),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value_two),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.initialOwner,
                    ),
                )
            }
        }
    };
    /**Function with signature `balanceOf(address,uint256)` and selector `0x00fdd58e`.
```solidity
function balanceOf(address account, uint256 id) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfCall {
        pub account: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`balanceOf(address,uint256)`](balanceOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfCall) -> Self {
                    (value.account, value.id)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        id: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address,uint256)";
            const SELECTOR: [u8; 4] = [0u8, 253u8, 213u8, 142u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOfBatch(address[],uint256[])` and selector `0x4e1273f4`.
```solidity
function balanceOfBatch(address[] memory accounts, uint256[] memory ids) external view returns (uint256[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfBatchCall {
        pub accounts: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
        pub ids: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    ///Container type for the return parameters of the [`balanceOfBatch(address[],uint256[])`](balanceOfBatchCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOfBatchReturn {
        pub _0: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfBatchCall> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfBatchCall) -> Self {
                    (value.accounts, value.ids)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOfBatchCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        accounts: tuple.0,
                        ids: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOfBatchReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: balanceOfBatchReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for balanceOfBatchReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOfBatchCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Address>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOfBatchReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOfBatch(address[],uint256[])";
            const SELECTOR: [u8; 4] = [78u8, 18u8, 115u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Address,
                    > as alloy_sol_types::SolType>::tokenize(&self.accounts),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.ids),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isApprovedForAll(address,address)` and selector `0xe985e9c5`.
```solidity
function isApprovedForAll(address account, address operator) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isApprovedForAllCall {
        pub account: alloy::sol_types::private::Address,
        pub operator: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isApprovedForAll(address,address)`](isApprovedForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isApprovedForAllReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllCall) -> Self {
                    (value.account, value.operator)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        account: tuple.0,
                        operator: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isApprovedForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isApprovedForAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isApprovedForAll(address,address)";
            const SELECTOR: [u8; 4] = [233u8, 133u8, 233u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.account,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `mint(address,uint256,uint256)` and selector `0x156e29f6`.
```solidity
function mint(address owner, uint256 tokenId, uint256 value) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintCall {
        pub owner: alloy::sol_types::private::Address,
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`mint(address,uint256,uint256)`](mintCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct mintReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintCall> for UnderlyingRustTuple<'_> {
                fn from(value: mintCall) -> Self {
                    (value.owner, value.tokenId, value.value)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner: tuple.0,
                        tokenId: tuple.1,
                        value: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<mintReturn> for UnderlyingRustTuple<'_> {
                fn from(value: mintReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for mintReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for mintCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = mintReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "mint(address,uint256,uint256)";
            const SELECTOR: [u8; 4] = [21u8, 110u8, 41u8, 246u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)` and selector `0x2eb2c2d6`.
```solidity
function safeBatchTransferFrom(address from, address to, uint256[] memory ids, uint256[] memory values, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeBatchTransferFromCall {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub ids: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        pub values: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)`](safeBatchTransferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeBatchTransferFromReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeBatchTransferFromCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeBatchTransferFromCall) -> Self {
                    (value.from, value.to, value.ids, value.values, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeBatchTransferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        ids: tuple.2,
                        values: tuple.3,
                        data: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeBatchTransferFromReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeBatchTransferFromReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeBatchTransferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeBatchTransferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeBatchTransferFromReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)";
            const SELECTOR: [u8; 4] = [46u8, 178u8, 194u8, 214u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.ids),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self.values),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256,uint256,bytes)` and selector `0xf242432a`.
```solidity
function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFromCall {
        pub from: alloy::sol_types::private::Address,
        pub to: alloy::sol_types::private::Address,
        pub id: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub data: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256,uint256,bytes)`](safeTransferFromCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFromReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFromCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFromCall) -> Self {
                    (value.from, value.to, value.id, value.value, value.data)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFromCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from: tuple.0,
                        to: tuple.1,
                        id: tuple.2,
                        value: tuple.3,
                        data: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFromReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFromReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFromReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFromCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFromReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [242u8, 66u8, 67u8, 42u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.id),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setApprovalForAll(address,bool)` and selector `0xa22cb465`.
```solidity
function setApprovalForAll(address operator, bool approved) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setApprovalForAllCall {
        pub operator: alloy::sol_types::private::Address,
        pub approved: bool,
    }
    ///Container type for the return parameters of the [`setApprovalForAll(address,bool)`](setApprovalForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setApprovalForAllReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllCall) -> Self {
                    (value.operator, value.approved)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        operator: tuple.0,
                        approved: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setApprovalForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setApprovalForAllReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setApprovalForAll(address,bool)";
            const SELECTOR: [u8; 4] = [162u8, 44u8, 180u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `uri(uint256)` and selector `0x0e89341c`.
```solidity
function uri(uint256) external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct uriCall {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`uri(uint256)`](uriCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct uriReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<uriCall> for UnderlyingRustTuple<'_> {
                fn from(value: uriCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for uriCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<uriReturn> for UnderlyingRustTuple<'_> {
                fn from(value: uriReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for uriReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for uriCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = uriReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "uri(uint256)";
            const SELECTOR: [u8; 4] = [14u8, 137u8, 52u8, 28u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._0),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ERC1155Mock`](self) function calls.
    pub enum ERC1155MockCalls {
        balanceOf(balanceOfCall),
        balanceOfBatch(balanceOfBatchCall),
        isApprovedForAll(isApprovedForAllCall),
        mint(mintCall),
        safeBatchTransferFrom(safeBatchTransferFromCall),
        safeTransferFrom(safeTransferFromCall),
        setApprovalForAll(setApprovalForAllCall),
        supportsInterface(supportsInterfaceCall),
        uri(uriCall),
    }
    #[automatically_derived]
    impl ERC1155MockCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 253u8, 213u8, 142u8],
            [1u8, 255u8, 201u8, 167u8],
            [14u8, 137u8, 52u8, 28u8],
            [21u8, 110u8, 41u8, 246u8],
            [46u8, 178u8, 194u8, 214u8],
            [78u8, 18u8, 115u8, 244u8],
            [162u8, 44u8, 180u8, 101u8],
            [233u8, 133u8, 233u8, 197u8],
            [242u8, 66u8, 67u8, 42u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ERC1155MockCalls {
        const NAME: &'static str = "ERC1155MockCalls";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 9usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::balanceOf(_) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::balanceOfBatch(_) => {
                    <balanceOfBatchCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isApprovedForAll(_) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::mint(_) => <mintCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::safeBatchTransferFrom(_) => {
                    <safeBatchTransferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::safeTransferFrom(_) => {
                    <safeTransferFromCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setApprovalForAll(_) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::uri(_) => <uriCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ERC1155MockCalls>] = &[
                {
                    fn balanceOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <balanceOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::balanceOf)
                    }
                    balanceOf
                },
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn uri(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <uriCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::uri)
                    }
                    uri
                },
                {
                    fn mint(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <mintCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::mint)
                    }
                    mint
                },
                {
                    fn safeBatchTransferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <safeBatchTransferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::safeBatchTransferFrom)
                    }
                    safeBatchTransferFrom
                },
                {
                    fn balanceOfBatch(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <balanceOfBatchCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::balanceOfBatch)
                    }
                    balanceOfBatch
                },
                {
                    fn setApprovalForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::setApprovalForAll)
                    }
                    setApprovalForAll
                },
                {
                    fn isApprovedForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::isApprovedForAll)
                    }
                    isApprovedForAll
                },
                {
                    fn safeTransferFrom(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockCalls> {
                        <safeTransferFromCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockCalls::safeTransferFrom)
                    }
                    safeTransferFrom
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOfBatch(inner) => {
                    <balanceOfBatchCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::safeBatchTransferFrom(inner) => {
                    <safeBatchTransferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::safeTransferFrom(inner) => {
                    <safeTransferFromCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::uri(inner) => {
                    <uriCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::balanceOf(inner) => {
                    <balanceOfCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::balanceOfBatch(inner) => {
                    <balanceOfBatchCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::mint(inner) => {
                    <mintCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::safeBatchTransferFrom(inner) => {
                    <safeBatchTransferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::safeTransferFrom(inner) => {
                    <safeTransferFromCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::uri(inner) => {
                    <uriCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
            }
        }
    }
    ///Container for all the [`ERC1155Mock`](self) custom errors.
    pub enum ERC1155MockErrors {
        ERC1155InsufficientBalance(ERC1155InsufficientBalance),
        ERC1155InvalidApprover(ERC1155InvalidApprover),
        ERC1155InvalidArrayLength(ERC1155InvalidArrayLength),
        ERC1155InvalidOperator(ERC1155InvalidOperator),
        ERC1155InvalidReceiver(ERC1155InvalidReceiver),
        ERC1155InvalidSender(ERC1155InvalidSender),
        ERC1155MissingApprovalForAll(ERC1155MissingApprovalForAll),
    }
    #[automatically_derived]
    impl ERC1155MockErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 168u8, 53u8, 20u8],
            [3u8, 222u8, 228u8, 197u8],
            [62u8, 49u8, 136u8, 78u8],
            [87u8, 244u8, 71u8, 206u8],
            [91u8, 5u8, 153u8, 145u8],
            [206u8, 211u8, 225u8, 0u8],
            [226u8, 55u8, 217u8, 34u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ERC1155MockErrors {
        const NAME: &'static str = "ERC1155MockErrors";
        const MIN_DATA_LENGTH: usize = 32usize;
        const COUNT: usize = 7usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::ERC1155InsufficientBalance(_) => {
                    <ERC1155InsufficientBalance as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1155InvalidApprover(_) => {
                    <ERC1155InvalidApprover as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1155InvalidArrayLength(_) => {
                    <ERC1155InvalidArrayLength as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1155InvalidOperator(_) => {
                    <ERC1155InvalidOperator as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1155InvalidReceiver(_) => {
                    <ERC1155InvalidReceiver as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1155InvalidSender(_) => {
                    <ERC1155InvalidSender as alloy_sol_types::SolError>::SELECTOR
                }
                Self::ERC1155MissingApprovalForAll(_) => {
                    <ERC1155MissingApprovalForAll as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ERC1155MockErrors>] = &[
                {
                    fn ERC1155InvalidSender(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155InvalidSender as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155InvalidSender)
                    }
                    ERC1155InvalidSender
                },
                {
                    fn ERC1155InsufficientBalance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155InsufficientBalance as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155InsufficientBalance)
                    }
                    ERC1155InsufficientBalance
                },
                {
                    fn ERC1155InvalidApprover(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155InvalidApprover as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155InvalidApprover)
                    }
                    ERC1155InvalidApprover
                },
                {
                    fn ERC1155InvalidReceiver(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155InvalidReceiver as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155InvalidReceiver)
                    }
                    ERC1155InvalidReceiver
                },
                {
                    fn ERC1155InvalidArrayLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155InvalidArrayLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155InvalidArrayLength)
                    }
                    ERC1155InvalidArrayLength
                },
                {
                    fn ERC1155InvalidOperator(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155InvalidOperator as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155InvalidOperator)
                    }
                    ERC1155InvalidOperator
                },
                {
                    fn ERC1155MissingApprovalForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC1155MockErrors> {
                        <ERC1155MissingApprovalForAll as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC1155MockErrors::ERC1155MissingApprovalForAll)
                    }
                    ERC1155MissingApprovalForAll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::ERC1155InsufficientBalance(inner) => {
                    <ERC1155InsufficientBalance as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1155InvalidApprover(inner) => {
                    <ERC1155InvalidApprover as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1155InvalidArrayLength(inner) => {
                    <ERC1155InvalidArrayLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1155InvalidOperator(inner) => {
                    <ERC1155InvalidOperator as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1155InvalidReceiver(inner) => {
                    <ERC1155InvalidReceiver as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1155InvalidSender(inner) => {
                    <ERC1155InvalidSender as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ERC1155MissingApprovalForAll(inner) => {
                    <ERC1155MissingApprovalForAll as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::ERC1155InsufficientBalance(inner) => {
                    <ERC1155InsufficientBalance as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1155InvalidApprover(inner) => {
                    <ERC1155InvalidApprover as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1155InvalidArrayLength(inner) => {
                    <ERC1155InvalidArrayLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1155InvalidOperator(inner) => {
                    <ERC1155InvalidOperator as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1155InvalidReceiver(inner) => {
                    <ERC1155InvalidReceiver as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1155InvalidSender(inner) => {
                    <ERC1155InvalidSender as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ERC1155MissingApprovalForAll(inner) => {
                    <ERC1155MissingApprovalForAll as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ERC1155Mock`](self) events.
    pub enum ERC1155MockEvents {
        ApprovalForAll(ApprovalForAll),
        TransferBatch(TransferBatch),
        TransferSingle(TransferSingle),
        URI(URI),
    }
    #[automatically_derived]
    impl ERC1155MockEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ],
            [
                74u8,
                57u8,
                220u8,
                6u8,
                212u8,
                192u8,
                219u8,
                198u8,
                75u8,
                112u8,
                175u8,
                144u8,
                253u8,
                105u8,
                138u8,
                35u8,
                58u8,
                81u8,
                138u8,
                165u8,
                208u8,
                126u8,
                89u8,
                93u8,
                152u8,
                59u8,
                140u8,
                5u8,
                38u8,
                200u8,
                247u8,
                251u8,
            ],
            [
                107u8,
                183u8,
                255u8,
                112u8,
                134u8,
                25u8,
                186u8,
                6u8,
                16u8,
                203u8,
                162u8,
                149u8,
                165u8,
                133u8,
                146u8,
                224u8,
                69u8,
                29u8,
                238u8,
                38u8,
                34u8,
                147u8,
                140u8,
                135u8,
                85u8,
                102u8,
                118u8,
                136u8,
                218u8,
                243u8,
                82u8,
                155u8,
            ],
            [
                195u8,
                213u8,
                129u8,
                104u8,
                197u8,
                174u8,
                115u8,
                151u8,
                115u8,
                29u8,
                6u8,
                61u8,
                91u8,
                191u8,
                61u8,
                101u8,
                120u8,
                84u8,
                66u8,
                115u8,
                67u8,
                244u8,
                192u8,
                131u8,
                36u8,
                15u8,
                122u8,
                172u8,
                170u8,
                45u8,
                15u8,
                98u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ERC1155MockEvents {
        const NAME: &'static str = "ERC1155MockEvents";
        const COUNT: usize = 4usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ApprovalForAll as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApprovalForAll as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApprovalForAll)
                }
                Some(<TransferBatch as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TransferBatch as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransferBatch)
                }
                Some(<TransferSingle as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TransferSingle as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransferSingle)
                }
                Some(<URI as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <URI as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::URI)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ERC1155MockEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransferBatch(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransferSingle(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::URI(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransferBatch(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransferSingle(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::URI(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ERC1155Mock`](self) contract instance.

See the [wrapper's documentation](`ERC1155MockInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ERC1155MockInstance<T, P, N> {
        ERC1155MockInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        initial_id: alloy::sol_types::private::primitives::aliases::U256,
        value: alloy::sol_types::private::primitives::aliases::U256,
        initial_id_two: alloy::sol_types::private::primitives::aliases::U256,
        value_two: alloy::sol_types::private::primitives::aliases::U256,
        initialOwner: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ERC1155MockInstance<T, P, N>>,
    > {
        ERC1155MockInstance::<
            T,
            P,
            N,
        >::deploy(provider, initial_id, value, initial_id_two, value_two, initialOwner)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        initial_id: alloy::sol_types::private::primitives::aliases::U256,
        value: alloy::sol_types::private::primitives::aliases::U256,
        initial_id_two: alloy::sol_types::private::primitives::aliases::U256,
        value_two: alloy::sol_types::private::primitives::aliases::U256,
        initialOwner: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ERC1155MockInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            initial_id,
            value,
            initial_id_two,
            value_two,
            initialOwner,
        )
    }
    /**A [`ERC1155Mock`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ERC1155Mock`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ERC1155MockInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ERC1155MockInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ERC1155MockInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC1155MockInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ERC1155Mock`](self) contract instance.

See the [wrapper's documentation](`ERC1155MockInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            initial_id: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            initial_id_two: alloy::sol_types::private::primitives::aliases::U256,
            value_two: alloy::sol_types::private::primitives::aliases::U256,
            initialOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<ERC1155MockInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                initial_id,
                value,
                initial_id_two,
                value_two,
                initialOwner,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            initial_id: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            initial_id_two: alloy::sol_types::private::primitives::aliases::U256,
            value_two: alloy::sol_types::private::primitives::aliases::U256,
            initialOwner: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            initial_id,
                            value,
                            initial_id_two,
                            value_two,
                            initialOwner,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ERC1155MockInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ERC1155MockInstance<T, P, N> {
            ERC1155MockInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC1155MockInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`balanceOf`] function.
        pub fn balanceOf(
            &self,
            account: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfCall, N> {
            self.call_builder(&balanceOfCall { account, id })
        }
        ///Creates a new call builder for the [`balanceOfBatch`] function.
        pub fn balanceOfBatch(
            &self,
            accounts: alloy::sol_types::private::Vec<alloy::sol_types::private::Address>,
            ids: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOfBatchCall, N> {
            self.call_builder(
                &balanceOfBatchCall {
                    accounts,
                    ids,
                },
            )
        }
        ///Creates a new call builder for the [`isApprovedForAll`] function.
        pub fn isApprovedForAll(
            &self,
            account: alloy::sol_types::private::Address,
            operator: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isApprovedForAllCall, N> {
            self.call_builder(
                &isApprovedForAllCall {
                    account,
                    operator,
                },
            )
        }
        ///Creates a new call builder for the [`mint`] function.
        pub fn mint(
            &self,
            owner: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, mintCall, N> {
            self.call_builder(&mintCall { owner, tokenId, value })
        }
        ///Creates a new call builder for the [`safeBatchTransferFrom`] function.
        pub fn safeBatchTransferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            ids: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            values: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeBatchTransferFromCall, N> {
            self.call_builder(
                &safeBatchTransferFromCall {
                    from,
                    to,
                    ids,
                    values,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`safeTransferFrom`] function.
        pub fn safeTransferFrom(
            &self,
            from: alloy::sol_types::private::Address,
            to: alloy::sol_types::private::Address,
            id: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            data: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFromCall, N> {
            self.call_builder(
                &safeTransferFromCall {
                    from,
                    to,
                    id,
                    value,
                    data,
                },
            )
        }
        ///Creates a new call builder for the [`setApprovalForAll`] function.
        pub fn setApprovalForAll(
            &self,
            operator: alloy::sol_types::private::Address,
            approved: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setApprovalForAllCall, N> {
            self.call_builder(
                &setApprovalForAllCall {
                    operator,
                    approved,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`uri`] function.
        pub fn uri(
            &self,
            _0: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, uriCall, N> {
            self.call_builder(&uriCall { _0 })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC1155MockInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ApprovalForAll`] event.
        pub fn ApprovalForAll_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApprovalForAll, N> {
            self.event_filter::<ApprovalForAll>()
        }
        ///Creates a new event filter for the [`TransferBatch`] event.
        pub fn TransferBatch_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransferBatch, N> {
            self.event_filter::<TransferBatch>()
        }
        ///Creates a new event filter for the [`TransferSingle`] event.
        pub fn TransferSingle_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransferSingle, N> {
            self.event_filter::<TransferSingle>()
        }
        ///Creates a new event filter for the [`URI`] event.
        pub fn URI_filter(&self) -> alloy_contract::Event<T, &P, URI, N> {
            self.event_filter::<URI>()
        }
    }
}
