pub use ultra_plonk_verifier::*;
/// This module was auto-generated with ethers-rs Abigen.
/// More information at: <https://github.com/gakonst/ethers-rs>
#[allow(
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code,
    non_camel_case_types,
)]
pub mod ultra_plonk_verifier {
    #[allow(deprecated)]
    fn __abi() -> ::ethers::core::abi::Abi {
        ::ethers::core::abi::ethabi::Contract {
            constructor: ::core::option::Option::Some(::ethers::core::abi::ethabi::Constructor {
                inputs: ::std::vec![],
            }),
            functions: ::core::convert::From::from([
                (
                    ::std::borrow::ToOwned::to_owned("p"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("p"),
                            inputs: ::std::vec![],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Uint(
                                        256usize,
                                    ),
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("uint256"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
                (
                    ::std::borrow::ToOwned::to_owned("verify"),
                    ::std::vec![
                        ::ethers::core::abi::ethabi::Function {
                            name: ::std::borrow::ToOwned::to_owned("verify"),
                            inputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::string::String::new(),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bytes,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bytes"),
                                    ),
                                },
                            ],
                            outputs: ::std::vec![
                                ::ethers::core::abi::ethabi::Param {
                                    name: ::std::borrow::ToOwned::to_owned("result"),
                                    kind: ::ethers::core::abi::ethabi::ParamType::Bool,
                                    internal_type: ::core::option::Option::Some(
                                        ::std::borrow::ToOwned::to_owned("bool"),
                                    ),
                                },
                            ],
                            constant: ::core::option::Option::None,
                            state_mutability: ::ethers::core::abi::ethabi::StateMutability::View,
                        },
                    ],
                ),
            ]),
            events: ::std::collections::BTreeMap::new(),
            errors: ::std::collections::BTreeMap::new(),
            receive: false,
            fallback: false,
        }
    }
    ///The parsed JSON ABI of the contract.
    pub static ULTRAPLONKVERIFIER_ABI: ::ethers::contract::Lazy<
        ::ethers::core::abi::Abi,
    > = ::ethers::contract::Lazy::new(__abi);
    #[rustfmt::skip]
    const __BYTECODE: &[u8] = b"a\x01\0`@R\x7F\x1D\xD13W\".\xABO\xB8\x10\xD5\xC8\x9BZ\xF4&\x81l\xD0I%2\xF7\xF1\x81\xBBD\xE3\x9C\xBC+\xE4`\x80\x81\x90R\x7F\x1D\x9BW:\x9B0\xEA\xD1\r\xCF\x03\r\x1A\xB3\xC9\xEC\x81\xDC=\xA2\xAA\xC7dYr\x807\nk)\xBA\xAB`\xA0\x81\x90R\x7F \xCAK\x8D\xA2\x83\x89\x0E\xA4\xAB\x8A\xC1\x7F\x07\x10.\x0E;\xCD\x10)\x98\xE3\xBB\x164\x9B`\x05\xB0-\xE4`\xC0\x81\x90R\x7F+\x9E\xE7\xFD\x0E\x19\xD5\xECPBU\xB3\t\x0ER\xABE4%\xE7\xB4<\x17\0\"\xF6\xF8b\xF7\xCC\"\x91`\xE0\x81\x90R`\x01\x93\x90\x93U`\x02\x91\x90\x91U`\x03U`\x04U4\x80\x15a\0\xBAW_\x80\xFD[P\x7F0dNr\xE11\xA0)\xB8PE\xB6\x81\x81X](3\xE8Hy\xB9p\x91C\xE1\xF5\x93\xF0\0\0\x01_Ua\x0B\x7F\x80a\0\xEB_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x9A\xE8\x88j\x14a\08W\x80c\xF7\xE8:\xEE\x14a\0SW[_\x80\xFD[a\0@_T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0fa\0a6`\x04a\n\xE2V[a\0vV[`@Q\x90\x15\x15\x81R` \x01a\0JV[_\x80a\0\x80a\0\x8DV[P`\x01\x96\x95PPPPPPV[a\0\x95a\x06\xE1V[a\0\x9Da\x06\xE1V[a\x08\0\x81R`\x01` \x80\x83\x01\x82\x90R`@\x80\x84\x01\x80Q\x7F\x18\xD2c$\x06\xD9\xA9){9>\xDB8\x17\xCF(\x9Aw\xA6\xA0\x02\n\xEB!\xF5xK4\x83\x98\xD3\x92\x90RQ\x7F\x07 \xE3^\x0B\xA1\xB3\xC7\xBC\x99\x94]\xA0\xBA'c\xD6/\x13\xD5\xC4\x14\xC9\x1A\xF4\x18\x82\xB44rN\xC2\x90\x83\x01R``\x84\x01\x80Q\x7F v\xD0:\xC8f\x13\x8Bi\x81\xFC1\x9D\xBB\x16\xF4\x7F\xB7J\xE6\xF3\xF0/\xEE\x04\xD7h/\xEAC\xFCR\x90RQ\x7F\x0F\xADx\xC0^\xFB\xBF\xBDs2m\xB4\xC5A\x9B\x8C\xA0oI\x89j%&\xE1][Z_\xE4~\x19\xC2\x90\x83\x01R`\x80\x84\x01\x80Q\x7F\x0ELN\x13T\x05\xE3\xA0\r@u\x18\x0F\xB5\xBB\0\x18\xE2ZO\xBE\x7F\xF3\xF91\xA7f\xAA9\xE5\xFC$\x90RQ\x7F\x1E\xE7x+,\xB0d\x9B\xC40\xDC\xAFC-\x7F^\\\xC0\x9E\xC9\0\x9C\xA9\x86\x82t\x8A\xF6O\xD5t\xA7\x90\x83\x01R`\xA0\x84\x01\x80Q\x7F\x0C\xED\xBE=0\x82\x9B\x0E_rN\xDE-G\x98O\x1B\xC26\xC4J\xD5\xE3\x9E\xC7\xFF\x8B8-Q0\xAB\x90RQ\x7F\x15XU%\xED\xACCZ\x1F\xC3\x83Z\x8AbL\xE8\xE8\xFA\xB8\x96\xC6rJ\xB4R\tX<uL]\x1A\x90\x83\x01R`\xC0\x84\x01\x80Q\x7F\x1AA4\xEB\xA7\xB4\x99\xA0\x18\xD8\x93v\xF2:\x1Cs\xEB\xAD\x13\x08\xFCt\xDC@\x95\xF1\x8D\xB3\xC4\xA8M\x05\x90RQ\x7F\x01}b\xCB\xB1\x10.\xD2SC(P\x12G\x9B\xF7\xCD\x12\xB6\0Y\xDD\xBD\xC2\xD4\x8F\xB1\xA2\x17\xCF1$\x90\x83\x01Ra\x03@\x84\x01\x92\x90\x92R\x7F/\x8D\xD1\xF1\xA7X<B\xC4\xE1*D\xE1\x10@Ls\xCAl\x94\x81?\x85\x83]\xA4\xFB{\xB10\x1DJa\x03`\x84\x01R\x7F\x1E\xE6x\xA0G\nu\xA6\xEA\xA8\xFE\x83p`I\x8B\xA8(\xA3p;1\x1D\x0Fw\xF0\x10BJ\xFE\xB0%a\x03\x80\x84\x01R\x7F B\xA5\x87\xA9\x0C\x18{\n\x08|\x03\xE2\x9C\x96\x8B\x95\x0B\x1D\xB2m\\\x82\xD6f\x90Zh\x95y\x0C\na\x03\xA0\x84\x01R\x7F.+\x91Ea\x03i\x8A\xDFW\xB7\x99\x96\x9D\xEA\x1C\x8Fs\x9D\xA5\xD8\xD4\r\xD3\xEB\x92\"\xDB|\x81\xE8\x81a\x03\xC0\x84\x01R\x7F\x1F \xF5\xB0\xAD\xB4\x17\x17\x9DB\xDF}\xDDD\x10\xA30\xAF\xDB\x03\xE5\xC2\x89If[U\xAD\xF7\xD7\x92-a\x03\xE0\x84\x01R\x81Q\x80\x83\x01\x83R\x7F(;\xBA\x8A3\xED\x12-\xA7\xAD\x7F&\xBAz-T\x07\xFA\xCA\n\rl\xFA\x93_d|`\xC9\x14\xB7#\x81R\x7F\r\xBF\xBA\xBB|\x02>\xF0\xDA\x02\xD9\x9D\x15\x15\x89p\x19\xBC\xA7\xCCA\xC4\xB4qa\xB5\x1C\x0F'\xF5)V\x81\x83\x01R`\xE0\x84\x01R\x81Q\x80\x83\x01\x83R\x7F\x1E\xA5>\x9E\xA5\xE0\xDB\xC3\xDES\x9E\x88\xCC\xEF\xA6?w\x1F\xF6\xC8\x8F\xE5\x0B-\xF0\xA8\x04\x15\xBE!\\\x1C\x80\x82R\x7F \x0C\xC1E\x04S\xD1\x19g`rr\xE5E\x91\xEF\x95U1\x91\x93\xBF\xE3F\x18 \xF5\x1DZ\xA9Sc\x82\x84\x01Ra\x01\0\x85\x01\x91\x90\x91R\x82Q\x80\x84\x01\x84R\x90\x81R\x7F\x10W\x8D-\xDC\xDD\xCF\x10P\xEF\xD3C\x9C;\xC6n\x02,8\xFF\xD4\xB1\xE7G#\xFF\x96\xF9}\xD3\xA9\xE4\x81\x83\x01Ra\x01 \x84\x01R\x81Q\x80\x83\x01\x83R_\x80\x82R\x81\x83\x01\x81\x90Ra\x01@\x85\x01\x91\x90\x91R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x01`\x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x1C\xA6\x17\xDE\xE6._`\xE3\x97\xB1\x03\xEB'[Q\xEE\xC0n\x88\xA6\x83(\x9C\x82u\xBF\x02\xA2\x88\x83V\x81R\x7F\x1F\xC6\x11\x11\n\xB0m\x8F\xDCN\xCCqn3-\x86\xD2\xBBr\xCCa/\xFE]5\xB8\x02\x84\x1C\x99zk\x81\x84\x01Ra\x01\x80\x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x1E\xFB#\xA53\x07]\x8A\xFC\t?!\x03\x9E\xF9\x8D\xFE4I\xB3\x10\x88\xE2\xFD1\xDCh\x98\x07\xE5\xBC\xD6\x81R\x7F/\xC2p\x1C\xF0C>0\x0Cl\x12\x94\x06\xBA\xB4U>~\xE6;\xB3?j\xF5\x1D\x11k\xFEa\xE8lE\x81\x84\x01Ra\x01\xA0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x01\xC0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x01\xE0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02 \x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x17K\xF8\xAA\xC5`\x9Cjh\xA2\x0C\xF2`US\x89\0\x82\xBEo\xA2\"\xB5\x98n2:\t/o\x80\r\x81R\x7F\x14\x97\x04\xAC\r\xBE\xEF\x8C\xF6\x94\xDB\xE5\xEEp\xAB\x92k\"4>\x95r\x0C\xAC\xAF\xFCZ\xF8\x80nQ4\x81\x84\x01Ra\x02@\x85\x01R\x82Q\x80\x84\x01\x84R\x7F\"\x0E\xF8=a,NO\xF4c\x80\xCF\x14\x06\xF4\x11\x87\x92\xCEq\xD7m\x96\xDC\x07\xF2\xA4\x86~\xFDV_\x81R\x7F\x02\x8D\x10\x13M\x87\x04wsR9F\\\xE4\xB0\tI\x96\xDD\xD4Z\xD7-[k\x127\xBB\xC9\x86?\xF5\x81\x84\x01Ra\x02`\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\x80\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\xA0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\xC0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\xE0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x03\0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x03 \x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x16\x98\x83T6\xDD\t\x07\x1F\x8E}\x03E\x0B\xF8\xE1p\xA9 m\xDA\xE9\xC5<\xBA\xF2\xA3\x99\x86\xFE\xCCa\x81R\x7F\x19\xF3\xF4_L\x1D\xF5[,l\x81>\x9B\xB57/R\xF0\xEE\x9D\xF0\x9C\xF2\x0B~\x97\x8F\n\x1BoA\xBC\x81\x84\x01Ra\x04\0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x04 \x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x04@\x85\x01R\x82Q\x80\x84\x01\x90\x93R\x80\x83R\x90\x82\x01Ra\x04`\x82\x01R\x91\x90PV[`@Q\x80a\x04\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01a\x07\x14`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x074`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07T`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07t`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\x94`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\xB4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\xD4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\xF4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\x14`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x084`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08T`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08t`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\x94`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\xB4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\xD4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\xF4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\x14`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\tT`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\tt`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\x94`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\xB4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\xD4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\xF4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01a\n8`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\nX`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\nx`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\n\x98`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x90R\x90V[_\x80\x83`\x1F\x84\x01\x12a\n\xADW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xC4W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\n\xDBW_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80`@\x85\x87\x03\x12\x15a\n\xF5W_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0B\x0CW_\x80\xFD[a\x0B\x18\x88\x83\x89\x01a\n\x9DV[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a\x0B0W_\x80\xFD[Pa\x0B=\x87\x82\x88\x01a\n\x9DV[\x95\x98\x94\x97P\x95PPPPV\xFE\xA2dipfsX\"\x12 !\xCF\xBF\x1D\x0E\xBB\xFD\xF0$\x94\xBD\\\xFCHr\x96Um\x9B\x037\xE6\xDB\x80v\x8EH'\xE9|\xB3\x1AdsolcC\0\x08\x18\x003";
    /// The bytecode of the contract.
    pub static ULTRAPLONKVERIFIER_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __BYTECODE,
    );
    #[rustfmt::skip]
    const __DEPLOYED_BYTECODE: &[u8] = b"`\x80`@R4\x80\x15a\0\x0FW_\x80\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x9A\xE8\x88j\x14a\08W\x80c\xF7\xE8:\xEE\x14a\0SW[_\x80\xFD[a\0@_T\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[a\0fa\0a6`\x04a\n\xE2V[a\0vV[`@Q\x90\x15\x15\x81R` \x01a\0JV[_\x80a\0\x80a\0\x8DV[P`\x01\x96\x95PPPPPPV[a\0\x95a\x06\xE1V[a\0\x9Da\x06\xE1V[a\x08\0\x81R`\x01` \x80\x83\x01\x82\x90R`@\x80\x84\x01\x80Q\x7F\x18\xD2c$\x06\xD9\xA9){9>\xDB8\x17\xCF(\x9Aw\xA6\xA0\x02\n\xEB!\xF5xK4\x83\x98\xD3\x92\x90RQ\x7F\x07 \xE3^\x0B\xA1\xB3\xC7\xBC\x99\x94]\xA0\xBA'c\xD6/\x13\xD5\xC4\x14\xC9\x1A\xF4\x18\x82\xB44rN\xC2\x90\x83\x01R``\x84\x01\x80Q\x7F v\xD0:\xC8f\x13\x8Bi\x81\xFC1\x9D\xBB\x16\xF4\x7F\xB7J\xE6\xF3\xF0/\xEE\x04\xD7h/\xEAC\xFCR\x90RQ\x7F\x0F\xADx\xC0^\xFB\xBF\xBDs2m\xB4\xC5A\x9B\x8C\xA0oI\x89j%&\xE1][Z_\xE4~\x19\xC2\x90\x83\x01R`\x80\x84\x01\x80Q\x7F\x0ELN\x13T\x05\xE3\xA0\r@u\x18\x0F\xB5\xBB\0\x18\xE2ZO\xBE\x7F\xF3\xF91\xA7f\xAA9\xE5\xFC$\x90RQ\x7F\x1E\xE7x+,\xB0d\x9B\xC40\xDC\xAFC-\x7F^\\\xC0\x9E\xC9\0\x9C\xA9\x86\x82t\x8A\xF6O\xD5t\xA7\x90\x83\x01R`\xA0\x84\x01\x80Q\x7F\x0C\xED\xBE=0\x82\x9B\x0E_rN\xDE-G\x98O\x1B\xC26\xC4J\xD5\xE3\x9E\xC7\xFF\x8B8-Q0\xAB\x90RQ\x7F\x15XU%\xED\xACCZ\x1F\xC3\x83Z\x8AbL\xE8\xE8\xFA\xB8\x96\xC6rJ\xB4R\tX<uL]\x1A\x90\x83\x01R`\xC0\x84\x01\x80Q\x7F\x1AA4\xEB\xA7\xB4\x99\xA0\x18\xD8\x93v\xF2:\x1Cs\xEB\xAD\x13\x08\xFCt\xDC@\x95\xF1\x8D\xB3\xC4\xA8M\x05\x90RQ\x7F\x01}b\xCB\xB1\x10.\xD2SC(P\x12G\x9B\xF7\xCD\x12\xB6\0Y\xDD\xBD\xC2\xD4\x8F\xB1\xA2\x17\xCF1$\x90\x83\x01Ra\x03@\x84\x01\x92\x90\x92R\x7F/\x8D\xD1\xF1\xA7X<B\xC4\xE1*D\xE1\x10@Ls\xCAl\x94\x81?\x85\x83]\xA4\xFB{\xB10\x1DJa\x03`\x84\x01R\x7F\x1E\xE6x\xA0G\nu\xA6\xEA\xA8\xFE\x83p`I\x8B\xA8(\xA3p;1\x1D\x0Fw\xF0\x10BJ\xFE\xB0%a\x03\x80\x84\x01R\x7F B\xA5\x87\xA9\x0C\x18{\n\x08|\x03\xE2\x9C\x96\x8B\x95\x0B\x1D\xB2m\\\x82\xD6f\x90Zh\x95y\x0C\na\x03\xA0\x84\x01R\x7F.+\x91Ea\x03i\x8A\xDFW\xB7\x99\x96\x9D\xEA\x1C\x8Fs\x9D\xA5\xD8\xD4\r\xD3\xEB\x92\"\xDB|\x81\xE8\x81a\x03\xC0\x84\x01R\x7F\x1F \xF5\xB0\xAD\xB4\x17\x17\x9DB\xDF}\xDDD\x10\xA30\xAF\xDB\x03\xE5\xC2\x89If[U\xAD\xF7\xD7\x92-a\x03\xE0\x84\x01R\x81Q\x80\x83\x01\x83R\x7F(;\xBA\x8A3\xED\x12-\xA7\xAD\x7F&\xBAz-T\x07\xFA\xCA\n\rl\xFA\x93_d|`\xC9\x14\xB7#\x81R\x7F\r\xBF\xBA\xBB|\x02>\xF0\xDA\x02\xD9\x9D\x15\x15\x89p\x19\xBC\xA7\xCCA\xC4\xB4qa\xB5\x1C\x0F'\xF5)V\x81\x83\x01R`\xE0\x84\x01R\x81Q\x80\x83\x01\x83R\x7F\x1E\xA5>\x9E\xA5\xE0\xDB\xC3\xDES\x9E\x88\xCC\xEF\xA6?w\x1F\xF6\xC8\x8F\xE5\x0B-\xF0\xA8\x04\x15\xBE!\\\x1C\x80\x82R\x7F \x0C\xC1E\x04S\xD1\x19g`rr\xE5E\x91\xEF\x95U1\x91\x93\xBF\xE3F\x18 \xF5\x1DZ\xA9Sc\x82\x84\x01Ra\x01\0\x85\x01\x91\x90\x91R\x82Q\x80\x84\x01\x84R\x90\x81R\x7F\x10W\x8D-\xDC\xDD\xCF\x10P\xEF\xD3C\x9C;\xC6n\x02,8\xFF\xD4\xB1\xE7G#\xFF\x96\xF9}\xD3\xA9\xE4\x81\x83\x01Ra\x01 \x84\x01R\x81Q\x80\x83\x01\x83R_\x80\x82R\x81\x83\x01\x81\x90Ra\x01@\x85\x01\x91\x90\x91R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x01`\x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x1C\xA6\x17\xDE\xE6._`\xE3\x97\xB1\x03\xEB'[Q\xEE\xC0n\x88\xA6\x83(\x9C\x82u\xBF\x02\xA2\x88\x83V\x81R\x7F\x1F\xC6\x11\x11\n\xB0m\x8F\xDCN\xCCqn3-\x86\xD2\xBBr\xCCa/\xFE]5\xB8\x02\x84\x1C\x99zk\x81\x84\x01Ra\x01\x80\x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x1E\xFB#\xA53\x07]\x8A\xFC\t?!\x03\x9E\xF9\x8D\xFE4I\xB3\x10\x88\xE2\xFD1\xDCh\x98\x07\xE5\xBC\xD6\x81R\x7F/\xC2p\x1C\xF0C>0\x0Cl\x12\x94\x06\xBA\xB4U>~\xE6;\xB3?j\xF5\x1D\x11k\xFEa\xE8lE\x81\x84\x01Ra\x01\xA0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x01\xC0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x01\xE0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02 \x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x17K\xF8\xAA\xC5`\x9Cjh\xA2\x0C\xF2`US\x89\0\x82\xBEo\xA2\"\xB5\x98n2:\t/o\x80\r\x81R\x7F\x14\x97\x04\xAC\r\xBE\xEF\x8C\xF6\x94\xDB\xE5\xEEp\xAB\x92k\"4>\x95r\x0C\xAC\xAF\xFCZ\xF8\x80nQ4\x81\x84\x01Ra\x02@\x85\x01R\x82Q\x80\x84\x01\x84R\x7F\"\x0E\xF8=a,NO\xF4c\x80\xCF\x14\x06\xF4\x11\x87\x92\xCEq\xD7m\x96\xDC\x07\xF2\xA4\x86~\xFDV_\x81R\x7F\x02\x8D\x10\x13M\x87\x04wsR9F\\\xE4\xB0\tI\x96\xDD\xD4Z\xD7-[k\x127\xBB\xC9\x86?\xF5\x81\x84\x01Ra\x02`\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\x80\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\xA0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\xC0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x02\xE0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x03\0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x03 \x85\x01R\x82Q\x80\x84\x01\x84R\x7F\x16\x98\x83T6\xDD\t\x07\x1F\x8E}\x03E\x0B\xF8\xE1p\xA9 m\xDA\xE9\xC5<\xBA\xF2\xA3\x99\x86\xFE\xCCa\x81R\x7F\x19\xF3\xF4_L\x1D\xF5[,l\x81>\x9B\xB57/R\xF0\xEE\x9D\xF0\x9C\xF2\x0B~\x97\x8F\n\x1BoA\xBC\x81\x84\x01Ra\x04\0\x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x04 \x85\x01R\x82Q\x80\x84\x01\x84R\x81\x81R\x80\x83\x01\x82\x90Ra\x04@\x85\x01R\x82Q\x80\x84\x01\x90\x93R\x80\x83R\x90\x82\x01Ra\x04`\x82\x01R\x91\x90PV[`@Q\x80a\x04\x80\x01`@R\x80_\x81R` \x01_\x81R` \x01a\x07\x14`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x074`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07T`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07t`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\x94`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\xB4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\xD4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x07\xF4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\x14`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x084`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08T`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08t`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\x94`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\xB4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\xD4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\x08\xF4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\x14`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\tT`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\tt`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\x94`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\xB4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\xD4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\t\xF4`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01_\x81R` \x01a\n8`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\nX`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\nx`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x81R` \x01a\n\x98`@Q\x80`@\x01`@R\x80_\x81R` \x01_\x81RP\x90V[\x90R\x90V[_\x80\x83`\x1F\x84\x01\x12a\n\xADW_\x80\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\xC4W_\x80\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\n\xDBW_\x80\xFD[\x92P\x92\x90PV[_\x80_\x80`@\x85\x87\x03\x12\x15a\n\xF5W_\x80\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x80\x82\x11\x15a\x0B\x0CW_\x80\xFD[a\x0B\x18\x88\x83\x89\x01a\n\x9DV[\x90\x96P\x94P` \x87\x015\x91P\x80\x82\x11\x15a\x0B0W_\x80\xFD[Pa\x0B=\x87\x82\x88\x01a\n\x9DV[\x95\x98\x94\x97P\x95PPPPV\xFE\xA2dipfsX\"\x12 !\xCF\xBF\x1D\x0E\xBB\xFD\xF0$\x94\xBD\\\xFCHr\x96Um\x9B\x037\xE6\xDB\x80v\x8EH'\xE9|\xB3\x1AdsolcC\0\x08\x18\x003";
    /// The deployed bytecode of the contract.
    pub static ULTRAPLONKVERIFIER_DEPLOYED_BYTECODE: ::ethers::core::types::Bytes = ::ethers::core::types::Bytes::from_static(
        __DEPLOYED_BYTECODE,
    );
    pub struct UltraPlonkVerifier<M>(::ethers::contract::Contract<M>);
    impl<M> ::core::clone::Clone for UltraPlonkVerifier<M> {
        fn clone(&self) -> Self {
            Self(::core::clone::Clone::clone(&self.0))
        }
    }
    impl<M> ::core::ops::Deref for UltraPlonkVerifier<M> {
        type Target = ::ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> ::core::ops::DerefMut for UltraPlonkVerifier<M> {
        fn deref_mut(&mut self) -> &mut Self::Target {
            &mut self.0
        }
    }
    impl<M> ::core::fmt::Debug for UltraPlonkVerifier<M> {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple(::core::stringify!(UltraPlonkVerifier))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ::ethers::providers::Middleware> UltraPlonkVerifier<M> {
        /// Creates a new contract instance with the specified `ethers` client at
        /// `address`. The contract derefs to a `ethers::Contract` object.
        pub fn new<T: Into<::ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            Self(
                ::ethers::contract::Contract::new(
                    address.into(),
                    ULTRAPLONKVERIFIER_ABI.clone(),
                    client,
                ),
            )
        }
        /// Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it.
        /// Returns a new instance of a deployer that returns an instance of this contract after sending the transaction
        ///
        /// Notes:
        /// - If there are no constructor arguments, you should pass `()` as the argument.
        /// - The default poll duration is 7 seconds.
        /// - The default number of confirmations is 1 block.
        ///
        ///
        /// # Example
        ///
        /// Generate contract bindings with `abigen!` and deploy a new contract instance.
        ///
        /// *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact.
        ///
        /// ```ignore
        /// # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {
        ///     abigen!(Greeter, "../greeter.json");
        ///
        ///    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();
        ///    let msg = greeter_contract.greet().call().await.unwrap();
        /// # }
        /// ```
        pub fn deploy<T: ::ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::core::result::Result<
            ::ethers::contract::builders::ContractDeployer<M, Self>,
            ::ethers::contract::ContractError<M>,
        > {
            let factory = ::ethers::contract::ContractFactory::new(
                ULTRAPLONKVERIFIER_ABI.clone(),
                ULTRAPLONKVERIFIER_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ::ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        ///Calls the contract's `p` (0x9ae8886a) function
        pub fn p(
            &self,
        ) -> ::ethers::contract::builders::ContractCall<M, ::ethers::core::types::U256> {
            self.0
                .method_hash([154, 232, 136, 106], ())
                .expect("method not found (this should never happen)")
        }
        ///Calls the contract's `verify` (0xf7e83aee) function
        pub fn verify(
            &self,
            p0: ::ethers::core::types::Bytes,
            p1: ::ethers::core::types::Bytes,
        ) -> ::ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([247, 232, 58, 238], (p0, p1))
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ::ethers::providers::Middleware> From<::ethers::contract::Contract<M>>
    for UltraPlonkVerifier<M> {
        fn from(contract: ::ethers::contract::Contract<M>) -> Self {
            Self::new(contract.address(), contract.client())
        }
    }
    ///Container type for all input parameters for the `p` function with signature `p()` and selector `0x9ae8886a`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "p", abi = "p()")]
    pub struct PCall;
    ///Container type for all input parameters for the `verify` function with signature `verify(bytes,bytes)` and selector `0xf7e83aee`
    #[derive(
        Clone,
        ::ethers::contract::EthCall,
        ::ethers::contract::EthDisplay,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    #[ethcall(name = "verify", abi = "verify(bytes,bytes)")]
    pub struct VerifyCall(
        pub ::ethers::core::types::Bytes,
        pub ::ethers::core::types::Bytes,
    );
    ///Container type for all of the contract's call
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        serde::Serialize,
        serde::Deserialize,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub enum UltraPlonkVerifierCalls {
        P(PCall),
        Verify(VerifyCall),
    }
    impl ::ethers::core::abi::AbiDecode for UltraPlonkVerifierCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::core::result::Result<Self, ::ethers::core::abi::AbiError> {
            let data = data.as_ref();
            if let Ok(decoded) = <PCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::P(decoded));
            }
            if let Ok(decoded) = <VerifyCall as ::ethers::core::abi::AbiDecode>::decode(
                data,
            ) {
                return Ok(Self::Verify(decoded));
            }
            Err(::ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ::ethers::core::abi::AbiEncode for UltraPlonkVerifierCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                Self::P(element) => ::ethers::core::abi::AbiEncode::encode(element),
                Self::Verify(element) => ::ethers::core::abi::AbiEncode::encode(element),
            }
        }
    }
    impl ::core::fmt::Display for UltraPlonkVerifierCalls {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            match self {
                Self::P(element) => ::core::fmt::Display::fmt(element, f),
                Self::Verify(element) => ::core::fmt::Display::fmt(element, f),
            }
        }
    }
    impl ::core::convert::From<PCall> for UltraPlonkVerifierCalls {
        fn from(value: PCall) -> Self {
            Self::P(value)
        }
    }
    impl ::core::convert::From<VerifyCall> for UltraPlonkVerifierCalls {
        fn from(value: VerifyCall) -> Self {
            Self::Verify(value)
        }
    }
    ///Container type for all return fields from the `p` function with signature `p()` and selector `0x9ae8886a`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct PReturn(pub ::ethers::core::types::U256);
    ///Container type for all return fields from the `verify` function with signature `verify(bytes,bytes)` and selector `0xf7e83aee`
    #[derive(
        Clone,
        ::ethers::contract::EthAbiType,
        ::ethers::contract::EthAbiCodec,
        serde::Serialize,
        serde::Deserialize,
        Default,
        Debug,
        PartialEq,
        Eq,
        Hash
    )]
    pub struct VerifyReturn {
        pub result: bool,
    }
}
