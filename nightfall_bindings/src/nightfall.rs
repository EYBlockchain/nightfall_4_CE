/**

Generated by the following Solidity interface...
```solidity
interface Nightfall {
    type TokenType is uint8;
    struct Block {
        uint256 commitments_root;
        uint256 nullifier_root;
        uint256 commitments_root_root;
        OnChainTransaction[] transactions;
        bytes rollup_proof;
    }
    struct OnChainTransaction {
        uint256 fee;
        uint256[4] commitments;
        uint256[4] nullifiers;
        uint256[4] public_data;
    }
    struct WithdrawData {
        uint256 nf_token_id;
        address recipient_address;
        uint256 value;
        uint256 withdraw_fund_salt;
    }

    error escrowFundsError();

    event BlockProposed(int256 layer2_block_number);
    event DepositEscrowed(uint256 nfSlotId, uint256 value);

    constructor(address addr_verifier, address x509_address, address sanctionsListAddress);

    function descrow_funds(WithdrawData memory data, TokenType token_type) external payable;
    function escrow_funds(uint256 fee, address ercAddress, uint256 tokenId, uint256 value, uint256 secretHash, TokenType token_type) external payable;
    function layer2_block_number() external view returns (int256);
    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) external pure returns (bytes4);
    function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4);
    function onERC3525Received(address, uint256, uint256, uint256, bytes memory) external pure returns (bytes4);
    function onERC721Received(address, address, uint256, bytes memory) external pure returns (bytes4);
    function owner() external view returns (address);
    function propose_block(Block memory blk) external;
    function setAuthorities(address sanctionsListAddress, address x509Address) external;
    function set_proposer_manager(address proposer_manager_address) external;
    function set_sanctions_list(address sanctionsListAddress) external;
    function set_x509_address(address x509_address) external;
    function supportsInterface(bytes4 interfaceId) external pure returns (bool);
    function withdraw_processed(WithdrawData memory data) external view returns (uint8);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "addr_verifier",
        "type": "address",
        "internalType": "contract INFVerifier"
      },
      {
        "name": "x509_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sanctionsListAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "descrow_funds",
    "inputs": [
      {
        "name": "data",
        "type": "tuple",
        "internalType": "struct WithdrawData",
        "components": [
          {
            "name": "nf_token_id",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "recipient_address",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "withdraw_fund_salt",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      },
      {
        "name": "token_type",
        "type": "uint8",
        "internalType": "enum TokenType"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "escrow_funds",
    "inputs": [
      {
        "name": "fee",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "ercAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "secretHash",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "token_type",
        "type": "uint8",
        "internalType": "enum TokenType"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "layer2_block_number",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "onERC1155BatchReceived",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "",
        "type": "uint256[]",
        "internalType": "uint256[]"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "onERC1155Received",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "onERC3525Received",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "onERC721Received",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "propose_block",
    "inputs": [
      {
        "name": "blk",
        "type": "tuple",
        "internalType": "struct Block",
        "components": [
          {
            "name": "commitments_root",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "nullifier_root",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "commitments_root_root",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "transactions",
            "type": "tuple[]",
            "internalType": "struct OnChainTransaction[]",
            "components": [
              {
                "name": "fee",
                "type": "uint256",
                "internalType": "uint256"
              },
              {
                "name": "commitments",
                "type": "uint256[4]",
                "internalType": "uint256[4]"
              },
              {
                "name": "nullifiers",
                "type": "uint256[4]",
                "internalType": "uint256[4]"
              },
              {
                "name": "public_data",
                "type": "uint256[4]",
                "internalType": "uint256[4]"
              }
            ]
          },
          {
            "name": "rollup_proof",
            "type": "bytes",
            "internalType": "bytes"
          }
        ]
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAuthorities",
    "inputs": [
      {
        "name": "sanctionsListAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "x509Address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "set_proposer_manager",
    "inputs": [
      {
        "name": "proposer_manager_address",
        "type": "address",
        "internalType": "contract ProposerManager"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "set_sanctions_list",
    "inputs": [
      {
        "name": "sanctionsListAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "set_x509_address",
    "inputs": [
      {
        "name": "x509_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "withdraw_processed",
    "inputs": [
      {
        "name": "data",
        "type": "tuple",
        "internalType": "struct WithdrawData",
        "components": [
          {
            "name": "nf_token_id",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "recipient_address",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "value",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "withdraw_fund_salt",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "BlockProposed",
    "inputs": [
      {
        "name": "layer2_block_number",
        "type": "int256",
        "indexed": false,
        "internalType": "int256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "DepositEscrowed",
    "inputs": [
      {
        "name": "nfSlotId",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      },
      {
        "name": "value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "escrowFundsError",
    "inputs": []
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod Nightfall {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x60806040525f6003555f6007555f6008555f60095534801561001f575f5ffd5b50604051612af8380380612af883398101604081905261003e916100c0565b5f80546001600160a01b03199081166001600160a01b039485161782556001805482169385169390931790925560028054600b805485169690951695909517909355604080513081526020810192909252902060041c600c559182163392831617909117905561010a565b6001600160a01b03811681146100bd575f5ffd5b50565b5f5f5f606084860312156100d2575f5ffd5b83516100dd816100a9565b60208501519093506100ee816100a9565b60408501519092506100ff816100a9565b809150509250925092565b6129e1806101175f395ff3fe6080604052600436106100e3575f3560e01c80638da5cb5b11610087578063e3178c8611610057578063e3178c86146102b2578063e6d5abe5146102d1578063f23a6e61146102e4578063f3b85fc214610310575f5ffd5b80638da5cb5b1461021e57806397e20d0e14610255578063bc197c8114610274578063d5e6c6f914610293575f5ffd5b8063186a4d08116100c2578063186a4d081461018a57806328c3d7e6146101bb5780634a8a4073146101de57806375137875146101ff575f5ffd5b80629ce20b146100e757806301ffc9a714610130578063150b7a021461015f575b5f5ffd5b3480156100f2575f5ffd5b506101126101013660046120ed565b629ce20b60e01b9695505050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b34801561013b575f5ffd5b5061014f61014a36600461215a565b610323565b6040519015158152602001610127565b34801561016a575f5ffd5b50610112610179366004612188565b630a85bd0160e11b95945050505050565b348015610195575f5ffd5b506101a96101a436600461220b565b61038e565b60405160ff9091168152602001610127565b3480156101c6575f5ffd5b506101d060035481565b604051908152602001610127565b3480156101e9575f5ffd5b506101fd6101f8366004612225565b6103cf565b005b34801561020a575f5ffd5b506101fd61021936600461225c565b610432565b348015610229575f5ffd5b5060025461023d906001600160a01b031681565b6040516001600160a01b039091168152602001610127565b348015610260575f5ffd5b506101fd61026f366004612292565b610d05565b34801561027f575f5ffd5b5061011261028e3660046122ed565b610d51565b34801561029e575f5ffd5b506101fd6102ad366004612292565b610d94565b3480156102bd575f5ffd5b506101fd6102cc366004612292565b610ddf565b6101fd6102df3660046123c0565b610e69565b3480156102ef575f5ffd5b506101126102fe366004612416565b63f23a6e6160e01b9695505050505050565b6101fd61031e36600461246e565b61160d565b5f6001600160e01b031982166301ffc9a760e01b148061035257506001600160e01b03198216629ce20b60e01b145b8061036d57506001600160e01b03198216630a85bd0160e11b145b8061038857506001600160e01b03198216630271189760e51b145b92915050565b5f5f826040516020016103a191906124a0565b60408051601f1981840301815291815281516020928301205f908152600590925290205460ff169392505050565b6002546001600160a01b031633146104025760405162461bcd60e51b81526004016103f9906124df565b60405180910390fd5b5f80546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015610477573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049b9190612516565b6104b75760405162461bcd60e51b81526004016103f990612535565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa1580156104fd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105219190612516565b1561053e5760405162461bcd60e51b81526004016103f990612592565b600a5460408051631d43c97d60e21b8152905133926001600160a01b03169163750f25f49160048083019260209291908290030181865afa158015610585573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a991906125e6565b6001600160a01b0316146106155760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79207468652063757272656e742070726f706f7365722063616e20707260448201526c6f706f7365206120626c6f636b60981b60648201526084016103f9565b60608101358101355f816001600160401b0381111561063657610636612601565b60405190808252806020026020018201604052801561065f578160200160208202803683370190505b5090505f5b828110156106cd576106a861067c6060860186612615565b8381811061068c5761068c61265a565b90506101a002018036038101906106a391906126ef565b611af7565b8282815181106106ba576106ba61265a565b6020908102919091010152600101610664565b5080825b600181111561078f575f5b600182901c8110156107865761076183600183901b815181106107015761070161265a565b602002602001015184600184901b600161071b9190612760565b8151811061072b5761072b61265a565b602002602001015160405160200161074d929190918252602082015260400190565b604051602081830303815290604052611bc6565b8382815181106107735761077361265a565b60209081029190910101526001016106dc565b5060011c6106d1565b505f5f6107b586855f815181106107a8576107a861265a565b6020026020010151611be9565b91509150816108065760405162461bcd60e51b815260206004820181905260248201527f526f6c6c75702070726f6f6620766572696669636174696f6e206661696c656460448201526064016103f9565b5f5b85811015610b815760608701356101a0820201870160c001351580156109795760608801356101a083020188016101400135158015610848575050610b79565b835f805b600481101561096c5760608c01356101a087020160208202018c01610140013591508115610964575f8281526004602052604090205461088c9084612760565b5f83815260046020526040902060019081015491945060ff9091161480156108ca57505f82815260046020526040902060010154610100900460ff16155b6109465760405162461bcd60e51b815260206004820152604160248201527f4465706f7369742065697468657220686173206e6f74206265656e206573637260448201527f6f776564206f722068617320616c7265616479206265656e2072656465656d656064820152601960fa1b608482015260a4016103f9565b5f828152600460205260409020600101805461ff0019166101001790555b60010161084c565b5081955050505050610b79565b604060608901356101a08402018901908101351560c091909101351515168015610b76575f6109ab60608b018b612615565b858181106109bb576109bb61265a565b90506101a0020160a0015f600481106109d6576109d661265a565b602002013590505f60405180608001604052808c80606001906109f99190612615565b88818110610a0957610a0961265a565b90506101a00201610120015f60048110610a2557610a2561265a565b602002013581526020018c8060600190610a3f9190612615565b88818110610a4f57610a4f61265a565b90506101a0020161012001600160048110610a6c57610a6c61265a565b60200201356001600160a01b031681526020018c8060600190610a8f9190612615565b88818110610a9f57610a9f61265a565b90506101a0020161012001600260048110610abc57610abc61265a565b60209081029190910135825290810184905260408051835181528383015181840152818401518183015260608085015190820152608090205f81815260059093529120549192509060ff1615610b545760405162461bcd60e51b815260206004820152601c60248201527f46756e6473206861766520616c72656164792077697468647261776e0000000060448201526064016103f9565b5f908152600560205260409020805460ff1916600117905550610b7992505050565b50505b600101610808565b50600a5460408051631d43c97d60e21b815290515f926001600160a01b03169163750f25f49160048083019260209291908290030181865afa158015610bc9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bed91906125e6565b90505f816001600160a01b0316836040515f6040518083038185875af1925050503d805f8114610c38576040519150601f19603f3d011682016040523d82523d5f602084013e610c3d565b606091505b5050905080610ca15760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f207472616e73666572207468652066656520746f2074686044820152693290383937b837b9b2b960b11b60648201526084016103f9565b873560075560208801356008556040880135600955600380547f46bf148827a74eb5c7ca85b1051331f7e07c6b512300580c47bf1dd646c1d895915f610ce683612773565b9091555060405190815260200160405180910390a15050505050505050565b6002546001600160a01b03163314610d2f5760405162461bcd60e51b81526004016103f9906124df565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b8152602060048201526016602482015275155b9cdd5c1c1bdc9d08189e48139a59da1d19985b1b60521b60448201525f906064016103f9565b6002546001600160a01b03163314610dbe5760405162461bcd60e51b81526004016103f9906124df565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610e475760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60448201526431ba34b7b760d91b60648201526084016103f9565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015610eae573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ed29190612516565b610eee5760405162461bcd60e51b81526004016103f990612535565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa158015610f34573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f589190612516565b15610f755760405162461bcd60e51b81526004016103f990612592565b604080516001600160a01b03871660208201529081018590525f90610f9c9060600161074d565b6040805180820182526001600160a01b03898116825260208083018a81525f8681526006909252938120925183546001600160a01b031916921691909117825591516001909101559091506003836003811115610ffb57610ffb612791565b1461100657816110a6565b60405163131f9f3f60e11b815260048181018890529088906001600160a01b0382169063263f3e7e90602401602060405180830381865afa15801561104d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061107191906127a5565b604080516001600160a01b039093166020840152820152606001604051602081830303815290604052805190602001205f1c901c5b604080516080808201835285825260208083018581528385018b815260608086018c815287519485018b905292519684019690965251948201949094529251908301529192505f906110fa9060a00161074d565b5f8181526004602052604090206001015490915060ff16156111785760405162461bcd60e51b815260206004820152603160248201527f46756e6473206861766520616c7265616479206265656e20657363726f77656460448201527008199bdc881d1a1a5cc811195c1bdcda5d607a1b60648201526084016103f9565b600385600381111561118c5761118c612791565b036111f8576040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b038a16906323b872dd906064015b5f604051808303815f87803b1580156111dd575f5ffd5b505af11580156111ef573d5f5f3e3d5ffd5b505050506113cc565b600185600381111561120c5761120c612791565b0361124357604051637921219560e11b81526001600160a01b038a169063f242432a906111c690339030908d908d906004016127bc565b600285600381111561125757611257612791565b036112c057861561127a5760405162461bcd60e51b81526004016103f9906127f3565b604051635c46a7ef60e11b815233600482015230602482015260448101899052608060648201525f60848201526001600160a01b038a169063b88d4fde9060a4016111c6565b5f8560038111156112d3576112d3612791565b036113b35787156112f65760405162461bcd60e51b81526004016103f99061283c565b6040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b038a16906323b872dd906064016020604051808303815f875af1158015611346573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136a9190612516565b6113ae5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b60448201526064016103f9565b6113cc565b60405163afa905dd60e01b815260040160405180910390fd5b604080516060810182528b8152600160208083018281525f84860181815287825260049093528590209351845551929091018054915160ff9081166101000261ffff19909316931692909217179055517f354729b3585ac9518a7659e8b3323389f148a753e8c3c5d8c01bfe09bc009340906114549085908a90918252602082015260400190565b60405180910390a16114678a6002612883565b341115611601575f61147a8b6002612883565b611484903461289a565b90505f6040518060800160405280600c548152602001600c5481526020018381526020018981525090505f6114e98260405160200161074d91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b5f8181526004602052604090206001015490915060ff161561156b5760405162461bcd60e51b815260206004820152603560248201527f46756e6473206861766520616c7265616479206265656e20657363726f77656460448201527408199bdc881d1a1a5cc81999594811195c1bdcda5d605a1b60648201526084016103f9565b604080516060810182528e8152600160208083018281525f84860181815287825260049093528590209351845551929091018054915160ff9081166101000261ffff19909316931692909217179055600c5490517f354729b3585ac9518a7659e8b3323389f148a753e8c3c5d8c01bfe09bc009340916115f5918690918252602082015260400190565b60405180910390a15050505b50505050505050505050565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015611652573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116769190612516565b6116925760405162461bcd60e51b81526004016103f990612535565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa1580156116d8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fc9190612516565b156117195760405162461bcd60e51b81526004016103f990612592565b5f8260405160200161172b91906124a0565b60408051601f1981840301815291815281516020928301205f818152600590935291205490915060ff166001146117db5760405162461bcd60e51b815260206004820152604860248201527f456974686572206e6f2066756e64732061726520617661696c61626c6520746f60448201527f2077697468647261772c206f7220746865792061726520616c7265616479207760648201526734ba34323930bbb760c11b608482015260a4016103f9565b82355f90815260066020908152604091829020825180840190935280546001600160a01b0316808452600190910154918301919091526118c7575f6118266040860160208701612292565b6001600160a01b031685604001356040515f6040518083038185875af1925050503d805f8114611871576040519150601f19603f3d011682016040523d82523d5f602084013e611876565b606091505b50509050806118c05760405162461bcd60e51b8152602060048201526016602482015275436f756c64206e6f742077697468647261772066656560501b60448201526064016103f9565b5050505050565b5f60018460038111156118dc576118dc612791565b036119615781516001600160a01b031663f242432a306119026040890160208a01612292565b856020015189604001356040518563ffffffff1660e01b815260040161192b94939291906127bc565b5f604051808303815f87803b158015611942575f5ffd5b505af1158015611954573d5f5f3e3d5ffd5b5050505060019050611ad6565b600284600381111561197557611975612791565b03611a095760408501351561199c5760405162461bcd60e51b81526004016103f9906127f3565b81516001600160a01b031663b88d4fde306119bd6040890160208a01612292565b60208601516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152608060648201525f608482015260a40161192b565b5f846003811115611a1c57611a1c612791565b03611ad657602082015115611a435760405162461bcd60e51b81526004016103f99061283c565b81516001600160a01b031663a9059cbb611a636040880160208901612292565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015288013560248201526044016020604051808303815f875af1158015611aaf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ad39190612516565b90505b80156118c05750505f908152600560205260409020805460ff191690555050565b6060818101518082015160208085015180518183015160408084015193880151818a015180518188015182850151928c01518b518a8d01519c87015187519b8c01999099528a8701979097529b890197909752608088019290925260a087019190915260c086019490945260e08501939093526101008401969096526101208301959095526101408201939093526101608101939093526001600160ff1b0316610180808401829052825180850390910181526101a09093019091525f91611bbe81611bc6565b949350505050565b5f60405160208184516020860160025afa611bdf575f5ffd5b5160041c92915050565b5f8080611bf960808601866128ad565b611c07916020915f916128ef565b810190611c149190612916565b9050805f611c2560808801886128ad565b611c34916040916020916128ef565b810190611c419190612916565b90505f611c5160808901896128ad565b611c60916060916040916128ef565b810190611c6d9190612916565b90505f611c7d60808a018a6128ad565b611c8c916080916060916128ef565b810190611c999190612916565b90505f611ca960808b018b6128ad565b611cb89160a0916080916128ef565b810190611cc59190612916565b90505f611cd560808c018c6128ad565b611ce49160c09160a0916128ef565b810190611cf19190612916565b90505f611d0160808d018d6128ad565b611d109160e09160c0916128ef565b810190611d1d9190612916565b90505f611d2d60808e018e6128ad565b611d3d916101009160e0916128ef565b810190611d4a9190612916565b90505f611d5a60808f018f6128ad565b611d6b9161012091610100916128ef565b810190611d789190612916565b60408051601080825261022082019092529192505f919060208201610200803683370190505090508a815f81518110611db357611db361265a565b6020026020010181815250508d5f1b81600181518110611dd557611dd561265a565b6020026020010181815250506007545f1b81600281518110611df957611df961265a565b602090810291909101015280518f359082906003908110611e1c57611e1c61265a565b6020026020010181815250506008545f1b81600481518110611e4057611e4061265a565b6020026020010181815250508e602001355f1b81600581518110611e6657611e6661265a565b6020026020010181815250506009545f1b81600681518110611e8a57611e8a61265a565b6020026020010181815250508e604001355f1b81600781518110611eb057611eb061265a565b6020026020010181815250508881600881518110611ed057611ed061265a565b6020026020010181815250508781600981518110611ef057611ef061265a565b6020026020010181815250508681600a81518110611f1057611f1061265a565b6020026020010181815250508581600b81518110611f3057611f3061265a565b6020026020010181815250508481600c81518110611f5057611f5061265a565b6020026020010181815250508381600d81518110611f7057611f7061265a565b6020026020010181815250508281600e81518110611f9057611f9061265a565b6020026020010181815250508181600f81518110611fb057611fb061265a565b6020026020010181815250505f8f8060800190611fcd91906128ad565b611fdc916101209082906128ef565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050600b54604051633a94343960e21b81529394506001600160a01b03169263ea50d0e4925061204291508490869060040161292d565b602060405180830381865afa15801561205d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120819190612516565b9d50999b5050505050505050505050505b9250929050565b6001600160a01b03811681146120ad575f5ffd5b50565b5f5f83601f8401126120c0575f5ffd5b5081356001600160401b038111156120d6575f5ffd5b602083019150836020828501011115612092575f5ffd5b5f5f5f5f5f5f60a08789031215612102575f5ffd5b863561210d81612099565b955060208701359450604087013593506060870135925060808701356001600160401b0381111561213c575f5ffd5b61214889828a016120b0565b979a9699509497509295939492505050565b5f6020828403121561216a575f5ffd5b81356001600160e01b031981168114612181575f5ffd5b9392505050565b5f5f5f5f5f6080868803121561219c575f5ffd5b85356121a781612099565b945060208601356121b781612099565b93506040860135925060608601356001600160401b038111156121d8575f5ffd5b6121e4888289016120b0565b969995985093965092949392505050565b5f60808284031215612205575f5ffd5b50919050565b5f6080828403121561221b575f5ffd5b61218183836121f5565b5f5f60408385031215612236575f5ffd5b823561224181612099565b9150602083013561225181612099565b809150509250929050565b5f6020828403121561226c575f5ffd5b81356001600160401b03811115612281575f5ffd5b820160a08185031215612181575f5ffd5b5f602082840312156122a2575f5ffd5b813561218181612099565b5f5f83601f8401126122bd575f5ffd5b5081356001600160401b038111156122d3575f5ffd5b6020830191508360208260051b8501011115612092575f5ffd5b5f5f5f5f5f5f5f5f60a0898b031215612304575f5ffd5b883561230f81612099565b9750602089013561231f81612099565b965060408901356001600160401b03811115612339575f5ffd5b6123458b828c016122ad565b90975095505060608901356001600160401b03811115612363575f5ffd5b61236f8b828c016122ad565b90955093505060808901356001600160401b0381111561238d575f5ffd5b6123998b828c016120b0565b999c989b5096995094979396929594505050565b8035600481106123bb575f5ffd5b919050565b5f5f5f5f5f5f60c087890312156123d5575f5ffd5b8635955060208701356123e781612099565b945060408701359350606087013592506080870135915061240a60a088016123ad565b90509295509295509295565b5f5f5f5f5f5f60a0878903121561242b575f5ffd5b863561243681612099565b9550602087013561244681612099565b9450604087013593506060870135925060808701356001600160401b0381111561213c575f5ffd5b5f5f60a0838503121561247f575f5ffd5b61248984846121f5565b9150612497608084016123ad565b90509250929050565b813581526080810160208301356124b681612099565b6001600160a01b0316602083015260408381013590830152606092830135929091019190915290565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b5f60208284031215612526575f5ffd5b81518015158114612181575f5ffd5b6020808252603d908201527f4365727469666965643a20596f7520617265206e6f7420617574686f7269736560408201527f6420746f207472616e73616374207573696e67204e6967687466616c6c000000606082015260800190565b60208082526034908201527f4365727469666965643a20596f7520617265206f6e2074686520436861696e616040820152731b1e5cda5cc81cd85b98dd1a5bdb9cc81b1a5cdd60621b606082015260800190565b5f602082840312156125f6575f5ffd5b815161218181612099565b634e487b7160e01b5f52604160045260245ffd5b5f5f8335601e1984360301811261262a575f5ffd5b8301803591506001600160401b03821115612643575f5ffd5b60200191506101a081023603821315612092575f5ffd5b634e487b7160e01b5f52603260045260245ffd5b604051608081016001600160401b038111828210171561269c57634e487b7160e01b5f52604160045260245ffd5b60405290565b5f82601f8301126126b1575f5ffd5b6126b961266e565b8060808401858111156126ca575f5ffd5b845b818110156126e45780358452602093840193016126cc565b509095945050505050565b5f6101a0828403128015612701575f5ffd5b5061270a61266e565b8235815261271b84602085016126a2565b602082015261272d8460a085016126a2565b60408201526127408461012085016126a2565b60608201529392505050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156103885761038861274c565b5f6001600160ff1b01820161278a5761278a61274c565b5060010190565b634e487b7160e01b5f52602160045260245ffd5b5f602082840312156127b5575f5ffd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a0608082018190525f9082015260c00190565b60208082526029908201527f45524337323120746f6b656e732073686f756c64206861766520612076616c7560408201526865206f66207a65726f60b81b606082015260800190565b60208082526027908201527f455243323020746f6b656e732073686f756c642068617665206120746f6b656e60408201526604964206f6620360cc1b606082015260800190565b80820281158282048414176103885761038861274c565b818103818111156103885761038861274c565b5f5f8335601e198436030181126128c2575f5ffd5b8301803591506001600160401b038211156128db575f5ffd5b602001915036819003821315612092575f5ffd5b5f5f858511156128fd575f5ffd5b83861115612909575f5ffd5b5050820193919092039150565b5f60208284031215612926575f5ffd5b5035919050565b604081525f83518060408401528060208601606085015e5f60608285010152601f19601f820116830190506060810160608483030160208501528085518083526080840191506020870193505f92505b808310156129a0578351825260208201915060208401935060018301925061297d565b50969550505050505056fea264697066735822122042f56f1bf51d8d5cd6cde796552e57b8cd15069e60d89070dd26b3a18ed76e9064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R_`\x03U_`\x07U_`\x08U_`\tU4\x80\x15a\0\x1FW__\xFD[P`@Qa*\xF88\x03\x80a*\xF8\x839\x81\x01`@\x81\x90Ra\0>\x91a\0\xC0V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x82U`\x01\x80T\x82\x16\x93\x85\x16\x93\x90\x93\x17\x90\x92U`\x02\x80T`\x0B\x80T\x85\x16\x96\x90\x95\x16\x95\x90\x95\x17\x90\x93U`@\x80Q0\x81R` \x81\x01\x92\x90\x92R\x90 `\x04\x1C`\x0CU\x91\x82\x163\x92\x83\x16\x17\x90\x91\x17\x90Ua\x01\nV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\0\xBDW__\xFD[PV[___``\x84\x86\x03\x12\x15a\0\xD2W__\xFD[\x83Qa\0\xDD\x81a\0\xA9V[` \x85\x01Q\x90\x93Pa\0\xEE\x81a\0\xA9V[`@\x85\x01Q\x90\x92Pa\0\xFF\x81a\0\xA9V[\x80\x91PP\x92P\x92P\x92V[a)\xE1\x80a\x01\x17_9_\xF3\xFE`\x80`@R`\x046\x10a\0\xE3W_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0\x87W\x80c\xE3\x17\x8C\x86\x11a\0WW\x80c\xE3\x17\x8C\x86\x14a\x02\xB2W\x80c\xE6\xD5\xAB\xE5\x14a\x02\xD1W\x80c\xF2:na\x14a\x02\xE4W\x80c\xF3\xB8_\xC2\x14a\x03\x10W__\xFD[\x80c\x8D\xA5\xCB[\x14a\x02\x1EW\x80c\x97\xE2\r\x0E\x14a\x02UW\x80c\xBC\x19|\x81\x14a\x02tW\x80c\xD5\xE6\xC6\xF9\x14a\x02\x93W__\xFD[\x80c\x18jM\x08\x11a\0\xC2W\x80c\x18jM\x08\x14a\x01\x8AW\x80c(\xC3\xD7\xE6\x14a\x01\xBBW\x80cJ\x8A@s\x14a\x01\xDEW\x80cu\x13xu\x14a\x01\xFFW__\xFD[\x80b\x9C\xE2\x0B\x14a\0\xE7W\x80c\x01\xFF\xC9\xA7\x14a\x010W\x80c\x15\x0Bz\x02\x14a\x01_W[__\xFD[4\x80\x15a\0\xF2W__\xFD[Pa\x01\x12a\x01\x016`\x04a \xEDV[b\x9C\xE2\x0B`\xE0\x1B\x96\x95PPPPPPV[`@Q`\x01`\x01`\xE0\x1B\x03\x19\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01;W__\xFD[Pa\x01Oa\x01J6`\x04a!ZV[a\x03#V[`@Q\x90\x15\x15\x81R` \x01a\x01'V[4\x80\x15a\x01jW__\xFD[Pa\x01\x12a\x01y6`\x04a!\x88V[c\n\x85\xBD\x01`\xE1\x1B\x95\x94PPPPPV[4\x80\x15a\x01\x95W__\xFD[Pa\x01\xA9a\x01\xA46`\x04a\"\x0BV[a\x03\x8EV[`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01'V[4\x80\x15a\x01\xC6W__\xFD[Pa\x01\xD0`\x03T\x81V[`@Q\x90\x81R` \x01a\x01'V[4\x80\x15a\x01\xE9W__\xFD[Pa\x01\xFDa\x01\xF86`\x04a\"%V[a\x03\xCFV[\0[4\x80\x15a\x02\nW__\xFD[Pa\x01\xFDa\x02\x196`\x04a\"\\V[a\x042V[4\x80\x15a\x02)W__\xFD[P`\x02Ta\x02=\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01'V[4\x80\x15a\x02`W__\xFD[Pa\x01\xFDa\x02o6`\x04a\"\x92V[a\r\x05V[4\x80\x15a\x02\x7FW__\xFD[Pa\x01\x12a\x02\x8E6`\x04a\"\xEDV[a\rQV[4\x80\x15a\x02\x9EW__\xFD[Pa\x01\xFDa\x02\xAD6`\x04a\"\x92V[a\r\x94V[4\x80\x15a\x02\xBDW__\xFD[Pa\x01\xFDa\x02\xCC6`\x04a\"\x92V[a\r\xDFV[a\x01\xFDa\x02\xDF6`\x04a#\xC0V[a\x0EiV[4\x80\x15a\x02\xEFW__\xFD[Pa\x01\x12a\x02\xFE6`\x04a$\x16V[c\xF2:na`\xE0\x1B\x96\x95PPPPPPV[a\x01\xFDa\x03\x1E6`\x04a$nV[a\x16\rV[_`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x01\xFF\xC9\xA7`\xE0\x1B\x14\x80a\x03RWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16b\x9C\xE2\x0B`\xE0\x1B\x14[\x80a\x03mWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\n\x85\xBD\x01`\xE1\x1B\x14[\x80a\x03\x88WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x02q\x18\x97`\xE5\x1B\x14[\x92\x91PPV[__\x82`@Q` \x01a\x03\xA1\x91\x90a$\xA0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x90\x81R`\x05\x90\x92R\x90 T`\xFF\x16\x93\x92PPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x04\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a$\xDFV[`@Q\x80\x91\x03\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x01\x80T\x93\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UV[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04wW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x9B\x91\x90a%\x16V[a\x04\xB7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%5V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xFDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05!\x91\x90a%\x16V[\x15a\x05>W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%\x92V[`\nT`@\x80Qc\x1DC\xC9}`\xE2\x1B\x81R\x90Q3\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cu\x0F%\xF4\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x05\x85W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xA9\x91\x90a%\xE6V[`\x01`\x01`\xA0\x1B\x03\x16\x14a\x06\x15W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FOnly the current proposer can pr`D\x82\x01Rlopose a block`\x98\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[``\x81\x015\x81\x015_\x81`\x01`\x01`@\x1B\x03\x81\x11\x15a\x066Wa\x066a&\x01V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x06_W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82\x81\x10\x15a\x06\xCDWa\x06\xA8a\x06|``\x86\x01\x86a&\x15V[\x83\x81\x81\x10a\x06\x8CWa\x06\x8Ca&ZV[\x90Pa\x01\xA0\x02\x01\x806\x03\x81\x01\x90a\x06\xA3\x91\x90a&\xEFV[a\x1A\xF7V[\x82\x82\x81Q\x81\x10a\x06\xBAWa\x06\xBAa&ZV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x06dV[P\x80\x82[`\x01\x81\x11\x15a\x07\x8FW_[`\x01\x82\x90\x1C\x81\x10\x15a\x07\x86Wa\x07a\x83`\x01\x83\x90\x1B\x81Q\x81\x10a\x07\x01Wa\x07\x01a&ZV[` \x02` \x01\x01Q\x84`\x01\x84\x90\x1B`\x01a\x07\x1B\x91\x90a'`V[\x81Q\x81\x10a\x07+Wa\x07+a&ZV[` \x02` \x01\x01Q`@Q` \x01a\x07M\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x1B\xC6V[\x83\x82\x81Q\x81\x10a\x07sWa\x07sa&ZV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x06\xDCV[P`\x01\x1Ca\x06\xD1V[P__a\x07\xB5\x86\x85_\x81Q\x81\x10a\x07\xA8Wa\x07\xA8a&ZV[` \x02` \x01\x01Qa\x1B\xE9V[\x91P\x91P\x81a\x08\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FRollup proof verification failed`D\x82\x01R`d\x01a\x03\xF9V[_[\x85\x81\x10\x15a\x0B\x81W``\x87\x015a\x01\xA0\x82\x02\x01\x87\x01`\xC0\x015\x15\x80\x15a\tyW``\x88\x015a\x01\xA0\x83\x02\x01\x88\x01a\x01@\x015\x15\x80\x15a\x08HWPPa\x0ByV[\x83_\x80[`\x04\x81\x10\x15a\tlW``\x8C\x015a\x01\xA0\x87\x02\x01` \x82\x02\x01\x8C\x01a\x01@\x015\x91P\x81\x15a\tdW_\x82\x81R`\x04` R`@\x90 Ta\x08\x8C\x90\x84a'`V[_\x83\x81R`\x04` R`@\x90 `\x01\x90\x81\x01T\x91\x94P`\xFF\x90\x91\x16\x14\x80\x15a\x08\xCAWP_\x82\x81R`\x04` R`@\x90 `\x01\x01Ta\x01\0\x90\x04`\xFF\x16\x15[a\tFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`A`$\x82\x01R\x7FDeposit either has not been escr`D\x82\x01R\x7Fowed or has already been redeeme`d\x82\x01R`\x19`\xFA\x1B`\x84\x82\x01R`\xA4\x01a\x03\xF9V[_\x82\x81R`\x04` R`@\x90 `\x01\x01\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01\x01a\x08LV[P\x81\x95PPPPPa\x0ByV[`@``\x89\x015a\x01\xA0\x84\x02\x01\x89\x01\x90\x81\x015\x15`\xC0\x91\x90\x91\x015\x15\x15\x16\x80\x15a\x0BvW_a\t\xAB``\x8B\x01\x8Ba&\x15V[\x85\x81\x81\x10a\t\xBBWa\t\xBBa&ZV[\x90Pa\x01\xA0\x02\x01`\xA0\x01_`\x04\x81\x10a\t\xD6Wa\t\xD6a&ZV[` \x02\x015\x90P_`@Q\x80`\x80\x01`@R\x80\x8C\x80``\x01\x90a\t\xF9\x91\x90a&\x15V[\x88\x81\x81\x10a\n\tWa\n\ta&ZV[\x90Pa\x01\xA0\x02\x01a\x01 \x01_`\x04\x81\x10a\n%Wa\n%a&ZV[` \x02\x015\x81R` \x01\x8C\x80``\x01\x90a\n?\x91\x90a&\x15V[\x88\x81\x81\x10a\nOWa\nOa&ZV[\x90Pa\x01\xA0\x02\x01a\x01 \x01`\x01`\x04\x81\x10a\nlWa\nla&ZV[` \x02\x015`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C\x80``\x01\x90a\n\x8F\x91\x90a&\x15V[\x88\x81\x81\x10a\n\x9FWa\n\x9Fa&ZV[\x90Pa\x01\xA0\x02\x01a\x01 \x01`\x02`\x04\x81\x10a\n\xBCWa\n\xBCa&ZV[` \x90\x81\x02\x91\x90\x91\x015\x82R\x90\x81\x01\x84\x90R`@\x80Q\x83Q\x81R\x83\x83\x01Q\x81\x84\x01R\x81\x84\x01Q\x81\x83\x01R``\x80\x85\x01Q\x90\x82\x01R`\x80\x90 _\x81\x81R`\x05\x90\x93R\x91 T\x91\x92P\x90`\xFF\x16\x15a\x0BTW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FFunds have already withdrawn\0\0\0\0`D\x82\x01R`d\x01a\x03\xF9V[_\x90\x81R`\x05` R`@\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UPa\x0By\x92PPPV[PP[`\x01\x01a\x08\x08V[P`\nT`@\x80Qc\x1DC\xC9}`\xE2\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cu\x0F%\xF4\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0B\xC9W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xED\x91\x90a%\xE6V[\x90P_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0C8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0C=V[``\x91P[PP\x90P\x80a\x0C\xA1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FFailed to transfer the fee to th`D\x82\x01Ri2\x90897\xB87\xB9\xB2\xB9`\xB1\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[\x875`\x07U` \x88\x015`\x08U`@\x88\x015`\tU`\x03\x80T\x7FF\xBF\x14\x88'\xA7N\xB5\xC7\xCA\x85\xB1\x05\x131\xF7\xE0|kQ#\0X\x0CG\xBF\x1D\xD6F\xC1\xD8\x95\x91_a\x0C\xE6\x83a'sV[\x90\x91UP`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\r/W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a$\xDFV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01Ru\x15[\x9C\xDD\\\x1C\x1B\xDC\x9D\x08\x18\x9EH\x13\x9AY\xDA\x1D\x19\x98[\x1B`R\x1B`D\x82\x01R_\x90`d\x01a\x03\xF9V[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\r\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a$\xDFV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0EGW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FOnly the owner can call this fun`D\x82\x01Rd1\xBA4\xB7\xB7`\xD9\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[`\n\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\xAEW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E\xD2\x91\x90a%\x16V[a\x0E\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%5V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0FX\x91\x90a%\x16V[\x15a\x0FuW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%\x92V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x87\x16` \x82\x01R\x90\x81\x01\x85\x90R_\x90a\x0F\x9C\x90``\x01a\x07MV[`@\x80Q\x80\x82\x01\x82R`\x01`\x01`\xA0\x1B\x03\x89\x81\x16\x82R` \x80\x83\x01\x8A\x81R_\x86\x81R`\x06\x90\x92R\x93\x81 \x92Q\x83T`\x01`\x01`\xA0\x1B\x03\x19\x16\x92\x16\x91\x90\x91\x17\x82U\x91Q`\x01\x90\x91\x01U\x90\x91P`\x03\x83`\x03\x81\x11\x15a\x0F\xFBWa\x0F\xFBa'\x91V[\x14a\x10\x06W\x81a\x10\xA6V[`@Qc\x13\x1F\x9F?`\xE1\x1B\x81R`\x04\x81\x81\x01\x88\x90R\x90\x88\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c&?>~\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10MW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10q\x91\x90a'\xA5V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16` \x84\x01R\x82\x01R``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1C\x90\x1C[`@\x80Q`\x80\x80\x82\x01\x83R\x85\x82R` \x80\x83\x01\x85\x81R\x83\x85\x01\x8B\x81R``\x80\x86\x01\x8C\x81R\x87Q\x94\x85\x01\x8B\x90R\x92Q\x96\x84\x01\x96\x90\x96RQ\x94\x82\x01\x94\x90\x94R\x92Q\x90\x83\x01R\x91\x92P_\x90a\x10\xFA\x90`\xA0\x01a\x07MV[_\x81\x81R`\x04` R`@\x90 `\x01\x01T\x90\x91P`\xFF\x16\x15a\x11xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`1`$\x82\x01R\x7FFunds have already been escrowed`D\x82\x01Rp\x08\x19\x9B\xDC\x88\x1D\x1A\x1A\\\xC8\x11\x19\\\x1B\xDC\xDA]`z\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[`\x03\x85`\x03\x81\x11\x15a\x11\x8CWa\x11\x8Ca'\x91V[\x03a\x11\xF8W`@Qc#\xB8r\xDD`\xE0\x1B\x81R3`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x89\x90R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c#\xB8r\xDD\x90`d\x01[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x11\xDDW__\xFD[PZ\xF1\x15\x80\x15a\x11\xEFW=__>=_\xFD[PPPPa\x13\xCCV[`\x01\x85`\x03\x81\x11\x15a\x12\x0CWa\x12\x0Ca'\x91V[\x03a\x12CW`@Qcy!!\x95`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c\xF2BC*\x90a\x11\xC6\x903\x900\x90\x8D\x90\x8D\x90`\x04\x01a'\xBCV[`\x02\x85`\x03\x81\x11\x15a\x12WWa\x12Wa'\x91V[\x03a\x12\xC0W\x86\x15a\x12zW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a'\xF3V[`@Qc\\F\xA7\xEF`\xE1\x1B\x81R3`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x89\x90R`\x80`d\x82\x01R_`\x84\x82\x01R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c\xB8\x8DO\xDE\x90`\xA4\x01a\x11\xC6V[_\x85`\x03\x81\x11\x15a\x12\xD3Wa\x12\xD3a'\x91V[\x03a\x13\xB3W\x87\x15a\x12\xF6W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a(<V[`@Qc#\xB8r\xDD`\xE0\x1B\x81R3`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x88\x90R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c#\xB8r\xDD\x90`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x13FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13j\x91\x90a%\x16V[a\x13\xAEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x11T\x90\xCC\x8C\x08\x1D\x1C\x98[\x9C\xD9\x99\\\x88\x19\x98Z[\x19Y`Z\x1B`D\x82\x01R`d\x01a\x03\xF9V[a\x13\xCCV[`@Qc\xAF\xA9\x05\xDD`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x80Q``\x81\x01\x82R\x8B\x81R`\x01` \x80\x83\x01\x82\x81R_\x84\x86\x01\x81\x81R\x87\x82R`\x04\x90\x93R\x85\x90 \x93Q\x84UQ\x92\x90\x91\x01\x80T\x91Q`\xFF\x90\x81\x16a\x01\0\x02a\xFF\xFF\x19\x90\x93\x16\x93\x16\x92\x90\x92\x17\x17\x90UQ\x7F5G)\xB3XZ\xC9Q\x8AvY\xE8\xB323\x89\xF1H\xA7S\xE8\xC3\xC5\xD8\xC0\x1B\xFE\t\xBC\0\x93@\x90a\x14T\x90\x85\x90\x8A\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA1a\x14g\x8A`\x02a(\x83V[4\x11\x15a\x16\x01W_a\x14z\x8B`\x02a(\x83V[a\x14\x84\x904a(\x9AV[\x90P_`@Q\x80`\x80\x01`@R\x80`\x0CT\x81R` \x01`\x0CT\x81R` \x01\x83\x81R` \x01\x89\x81RP\x90P_a\x14\xE9\x82`@Q` \x01a\x07M\x91\x90\x81Q\x81R` \x80\x83\x01Q\x90\x82\x01R`@\x80\x83\x01Q\x90\x82\x01R``\x91\x82\x01Q\x91\x81\x01\x91\x90\x91R`\x80\x01\x90V[_\x81\x81R`\x04` R`@\x90 `\x01\x01T\x90\x91P`\xFF\x16\x15a\x15kW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`5`$\x82\x01R\x7FFunds have already been escrowed`D\x82\x01Rt\x08\x19\x9B\xDC\x88\x1D\x1A\x1A\\\xC8\x19\x99YH\x11\x19\\\x1B\xDC\xDA]`Z\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[`@\x80Q``\x81\x01\x82R\x8E\x81R`\x01` \x80\x83\x01\x82\x81R_\x84\x86\x01\x81\x81R\x87\x82R`\x04\x90\x93R\x85\x90 \x93Q\x84UQ\x92\x90\x91\x01\x80T\x91Q`\xFF\x90\x81\x16a\x01\0\x02a\xFF\xFF\x19\x90\x93\x16\x93\x16\x92\x90\x92\x17\x17\x90U`\x0CT\x90Q\x7F5G)\xB3XZ\xC9Q\x8AvY\xE8\xB323\x89\xF1H\xA7S\xE8\xC3\xC5\xD8\xC0\x1B\xFE\t\xBC\0\x93@\x91a\x15\xF5\x91\x86\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA1PPP[PPPPPPPPPPV[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x16RW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x16v\x91\x90a%\x16V[a\x16\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%5V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x16\xD8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x16\xFC\x91\x90a%\x16V[\x15a\x17\x19W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%\x92V[_\x82`@Q` \x01a\x17+\x91\x90a$\xA0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x81\x81R`\x05\x90\x93R\x91 T\x90\x91P`\xFF\x16`\x01\x14a\x17\xDBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`H`$\x82\x01R\x7FEither no funds are available to`D\x82\x01R\x7F withdraw, or they are already w`d\x82\x01Rg4\xBA4290\xBB\xB7`\xC1\x1B`\x84\x82\x01R`\xA4\x01a\x03\xF9V[\x825_\x90\x81R`\x06` \x90\x81R`@\x91\x82\x90 \x82Q\x80\x84\x01\x90\x93R\x80T`\x01`\x01`\xA0\x1B\x03\x16\x80\x84R`\x01\x90\x91\x01T\x91\x83\x01\x91\x90\x91Ra\x18\xC7W_a\x18&`@\x86\x01` \x87\x01a\"\x92V[`\x01`\x01`\xA0\x1B\x03\x16\x85`@\x015`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x18qW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x18vV[``\x91P[PP\x90P\x80a\x18\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuCould not withdraw fee`P\x1B`D\x82\x01R`d\x01a\x03\xF9V[PPPPPV[_`\x01\x84`\x03\x81\x11\x15a\x18\xDCWa\x18\xDCa'\x91V[\x03a\x19aW\x81Q`\x01`\x01`\xA0\x1B\x03\x16c\xF2BC*0a\x19\x02`@\x89\x01` \x8A\x01a\"\x92V[\x85` \x01Q\x89`@\x015`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x19+\x94\x93\x92\x91\x90a'\xBCV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x19BW__\xFD[PZ\xF1\x15\x80\x15a\x19TW=__>=_\xFD[PPPP`\x01\x90Pa\x1A\xD6V[`\x02\x84`\x03\x81\x11\x15a\x19uWa\x19ua'\x91V[\x03a\x1A\tW`@\x85\x015\x15a\x19\x9CW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a'\xF3V[\x81Q`\x01`\x01`\xA0\x1B\x03\x16c\xB8\x8DO\xDE0a\x19\xBD`@\x89\x01` \x8A\x01a\"\x92V[` \x86\x01Q`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x86\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x04\x82\x01R\x92\x90\x91\x16`$\x83\x01R`D\x82\x01R`\x80`d\x82\x01R_`\x84\x82\x01R`\xA4\x01a\x19+V[_\x84`\x03\x81\x11\x15a\x1A\x1CWa\x1A\x1Ca'\x91V[\x03a\x1A\xD6W` \x82\x01Q\x15a\x1ACW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a(<V[\x81Q`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBBa\x1Ac`@\x88\x01` \x89\x01a\"\x92V[`@\x80Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R\x88\x015`$\x82\x01R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x1A\xAFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1A\xD3\x91\x90a%\x16V[\x90P[\x80\x15a\x18\xC0WPP_\x90\x81R`\x05` R`@\x90 \x80T`\xFF\x19\x16\x90UPPV[``\x81\x81\x01Q\x80\x82\x01Q` \x80\x85\x01Q\x80Q\x81\x83\x01Q`@\x80\x84\x01Q\x93\x88\x01Q\x81\x8A\x01Q\x80Q\x81\x88\x01Q\x82\x85\x01Q\x92\x8C\x01Q\x8BQ\x8A\x8D\x01Q\x9C\x87\x01Q\x87Q\x9B\x8C\x01\x99\x90\x99R\x8A\x87\x01\x97\x90\x97R\x9B\x89\x01\x97\x90\x97R`\x80\x88\x01\x92\x90\x92R`\xA0\x87\x01\x91\x90\x91R`\xC0\x86\x01\x94\x90\x94R`\xE0\x85\x01\x93\x90\x93Ra\x01\0\x84\x01\x96\x90\x96Ra\x01 \x83\x01\x95\x90\x95Ra\x01@\x82\x01\x93\x90\x93Ra\x01`\x81\x01\x93\x90\x93R`\x01`\x01`\xFF\x1B\x03\x16a\x01\x80\x80\x84\x01\x82\x90R\x82Q\x80\x85\x03\x90\x91\x01\x81Ra\x01\xA0\x90\x93\x01\x90\x91R_\x91a\x1B\xBE\x81a\x1B\xC6V[\x94\x93PPPPV[_`@Q` \x81\x84Q` \x86\x01`\x02Z\xFAa\x1B\xDFW__\xFD[Q`\x04\x1C\x92\x91PPV[_\x80\x80a\x1B\xF9`\x80\x86\x01\x86a(\xADV[a\x1C\x07\x91` \x91_\x91a(\xEFV[\x81\x01\x90a\x1C\x14\x91\x90a)\x16V[\x90P\x80_a\x1C%`\x80\x88\x01\x88a(\xADV[a\x1C4\x91`@\x91` \x91a(\xEFV[\x81\x01\x90a\x1CA\x91\x90a)\x16V[\x90P_a\x1CQ`\x80\x89\x01\x89a(\xADV[a\x1C`\x91``\x91`@\x91a(\xEFV[\x81\x01\x90a\x1Cm\x91\x90a)\x16V[\x90P_a\x1C}`\x80\x8A\x01\x8Aa(\xADV[a\x1C\x8C\x91`\x80\x91``\x91a(\xEFV[\x81\x01\x90a\x1C\x99\x91\x90a)\x16V[\x90P_a\x1C\xA9`\x80\x8B\x01\x8Ba(\xADV[a\x1C\xB8\x91`\xA0\x91`\x80\x91a(\xEFV[\x81\x01\x90a\x1C\xC5\x91\x90a)\x16V[\x90P_a\x1C\xD5`\x80\x8C\x01\x8Ca(\xADV[a\x1C\xE4\x91`\xC0\x91`\xA0\x91a(\xEFV[\x81\x01\x90a\x1C\xF1\x91\x90a)\x16V[\x90P_a\x1D\x01`\x80\x8D\x01\x8Da(\xADV[a\x1D\x10\x91`\xE0\x91`\xC0\x91a(\xEFV[\x81\x01\x90a\x1D\x1D\x91\x90a)\x16V[\x90P_a\x1D-`\x80\x8E\x01\x8Ea(\xADV[a\x1D=\x91a\x01\0\x91`\xE0\x91a(\xEFV[\x81\x01\x90a\x1DJ\x91\x90a)\x16V[\x90P_a\x1DZ`\x80\x8F\x01\x8Fa(\xADV[a\x1Dk\x91a\x01 \x91a\x01\0\x91a(\xEFV[\x81\x01\x90a\x1Dx\x91\x90a)\x16V[`@\x80Q`\x10\x80\x82Ra\x02 \x82\x01\x90\x92R\x91\x92P_\x91\x90` \x82\x01a\x02\0\x806\x837\x01\x90PP\x90P\x8A\x81_\x81Q\x81\x10a\x1D\xB3Wa\x1D\xB3a&ZV[` \x02` \x01\x01\x81\x81RPP\x8D_\x1B\x81`\x01\x81Q\x81\x10a\x1D\xD5Wa\x1D\xD5a&ZV[` \x02` \x01\x01\x81\x81RPP`\x07T_\x1B\x81`\x02\x81Q\x81\x10a\x1D\xF9Wa\x1D\xF9a&ZV[` \x90\x81\x02\x91\x90\x91\x01\x01R\x80Q\x8F5\x90\x82\x90`\x03\x90\x81\x10a\x1E\x1CWa\x1E\x1Ca&ZV[` \x02` \x01\x01\x81\x81RPP`\x08T_\x1B\x81`\x04\x81Q\x81\x10a\x1E@Wa\x1E@a&ZV[` \x02` \x01\x01\x81\x81RPP\x8E` \x015_\x1B\x81`\x05\x81Q\x81\x10a\x1EfWa\x1Efa&ZV[` \x02` \x01\x01\x81\x81RPP`\tT_\x1B\x81`\x06\x81Q\x81\x10a\x1E\x8AWa\x1E\x8Aa&ZV[` \x02` \x01\x01\x81\x81RPP\x8E`@\x015_\x1B\x81`\x07\x81Q\x81\x10a\x1E\xB0Wa\x1E\xB0a&ZV[` \x02` \x01\x01\x81\x81RPP\x88\x81`\x08\x81Q\x81\x10a\x1E\xD0Wa\x1E\xD0a&ZV[` \x02` \x01\x01\x81\x81RPP\x87\x81`\t\x81Q\x81\x10a\x1E\xF0Wa\x1E\xF0a&ZV[` \x02` \x01\x01\x81\x81RPP\x86\x81`\n\x81Q\x81\x10a\x1F\x10Wa\x1F\x10a&ZV[` \x02` \x01\x01\x81\x81RPP\x85\x81`\x0B\x81Q\x81\x10a\x1F0Wa\x1F0a&ZV[` \x02` \x01\x01\x81\x81RPP\x84\x81`\x0C\x81Q\x81\x10a\x1FPWa\x1FPa&ZV[` \x02` \x01\x01\x81\x81RPP\x83\x81`\r\x81Q\x81\x10a\x1FpWa\x1Fpa&ZV[` \x02` \x01\x01\x81\x81RPP\x82\x81`\x0E\x81Q\x81\x10a\x1F\x90Wa\x1F\x90a&ZV[` \x02` \x01\x01\x81\x81RPP\x81\x81`\x0F\x81Q\x81\x10a\x1F\xB0Wa\x1F\xB0a&ZV[` \x02` \x01\x01\x81\x81RPP_\x8F\x80`\x80\x01\x90a\x1F\xCD\x91\x90a(\xADV[a\x1F\xDC\x91a\x01 \x90\x82\x90a(\xEFV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`\x0BT`@Qc:\x9449`\xE2\x1B\x81R\x93\x94P`\x01`\x01`\xA0\x1B\x03\x16\x92c\xEAP\xD0\xE4\x92Pa B\x91P\x84\x90\x86\x90`\x04\x01a)-V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a ]W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a \x81\x91\x90a%\x16V[\x9DP\x99\x9BPPPPPPPPPPPP[\x92P\x92\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a \xADW__\xFD[PV[__\x83`\x1F\x84\x01\x12a \xC0W__\xFD[P\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a \xD6W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a \x92W__\xFD[______`\xA0\x87\x89\x03\x12\x15a!\x02W__\xFD[\x865a!\r\x81a \x99V[\x95P` \x87\x015\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a!<W__\xFD[a!H\x89\x82\x8A\x01a \xB0V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[_` \x82\x84\x03\x12\x15a!jW__\xFD[\x815`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a!\x81W__\xFD[\x93\x92PPPV[_____`\x80\x86\x88\x03\x12\x15a!\x9CW__\xFD[\x855a!\xA7\x81a \x99V[\x94P` \x86\x015a!\xB7\x81a \x99V[\x93P`@\x86\x015\x92P``\x86\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a!\xD8W__\xFD[a!\xE4\x88\x82\x89\x01a \xB0V[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[_`\x80\x82\x84\x03\x12\x15a\"\x05W__\xFD[P\x91\x90PV[_`\x80\x82\x84\x03\x12\x15a\"\x1BW__\xFD[a!\x81\x83\x83a!\xF5V[__`@\x83\x85\x03\x12\x15a\"6W__\xFD[\x825a\"A\x81a \x99V[\x91P` \x83\x015a\"Q\x81a \x99V[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\"lW__\xFD[\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a\"\x81W__\xFD[\x82\x01`\xA0\x81\x85\x03\x12\x15a!\x81W__\xFD[_` \x82\x84\x03\x12\x15a\"\xA2W__\xFD[\x815a!\x81\x81a \x99V[__\x83`\x1F\x84\x01\x12a\"\xBDW__\xFD[P\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a\"\xD3W__\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a \x92W__\xFD[________`\xA0\x89\x8B\x03\x12\x15a#\x04W__\xFD[\x885a#\x0F\x81a \x99V[\x97P` \x89\x015a#\x1F\x81a \x99V[\x96P`@\x89\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a#9W__\xFD[a#E\x8B\x82\x8C\x01a\"\xADV[\x90\x97P\x95PP``\x89\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a#cW__\xFD[a#o\x8B\x82\x8C\x01a\"\xADV[\x90\x95P\x93PP`\x80\x89\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a#\x8DW__\xFD[a#\x99\x8B\x82\x8C\x01a \xB0V[\x99\x9C\x98\x9BP\x96\x99P\x94\x97\x93\x96\x92\x95\x94PPPV[\x805`\x04\x81\x10a#\xBBW__\xFD[\x91\x90PV[______`\xC0\x87\x89\x03\x12\x15a#\xD5W__\xFD[\x865\x95P` \x87\x015a#\xE7\x81a \x99V[\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015\x91Pa$\n`\xA0\x88\x01a#\xADV[\x90P\x92\x95P\x92\x95P\x92\x95V[______`\xA0\x87\x89\x03\x12\x15a$+W__\xFD[\x865a$6\x81a \x99V[\x95P` \x87\x015a$F\x81a \x99V[\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a!<W__\xFD[__`\xA0\x83\x85\x03\x12\x15a$\x7FW__\xFD[a$\x89\x84\x84a!\xF5V[\x91Pa$\x97`\x80\x84\x01a#\xADV[\x90P\x92P\x92\x90PV[\x815\x81R`\x80\x81\x01` \x83\x015a$\xB6\x81a \x99V[`\x01`\x01`\xA0\x1B\x03\x16` \x83\x01R`@\x83\x81\x015\x90\x83\x01R``\x92\x83\x015\x92\x90\x91\x01\x91\x90\x91R\x90V[` \x80\x82R`\x17\x90\x82\x01R\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a%&W__\xFD[\x81Q\x80\x15\x15\x81\x14a!\x81W__\xFD[` \x80\x82R`=\x90\x82\x01R\x7FCertified: You are not authorise`@\x82\x01R\x7Fd to transact using Nightfall\0\0\0``\x82\x01R`\x80\x01\x90V[` \x80\x82R`4\x90\x82\x01R\x7FCertified: You are on the Chaina`@\x82\x01Rs\x1B\x1E\\\xDA\\\xC8\x1C\xD8[\x98\xDD\x1A[\xDB\x9C\xC8\x1B\x1A\\\xDD`b\x1B``\x82\x01R`\x80\x01\x90V[_` \x82\x84\x03\x12\x15a%\xF6W__\xFD[\x81Qa!\x81\x81a \x99V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__\x835`\x1E\x19\x846\x03\x01\x81\x12a&*W__\xFD[\x83\x01\x805\x91P`\x01`\x01`@\x1B\x03\x82\x11\x15a&CW__\xFD[` \x01\x91Pa\x01\xA0\x81\x026\x03\x82\x13\x15a \x92W__\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`@Q`\x80\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a&\x9CWcNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@R\x90V[_\x82`\x1F\x83\x01\x12a&\xB1W__\xFD[a&\xB9a&nV[\x80`\x80\x84\x01\x85\x81\x11\x15a&\xCAW__\xFD[\x84[\x81\x81\x10\x15a&\xE4W\x805\x84R` \x93\x84\x01\x93\x01a&\xCCV[P\x90\x95\x94PPPPPV[_a\x01\xA0\x82\x84\x03\x12\x80\x15a'\x01W__\xFD[Pa'\na&nV[\x825\x81Ra'\x1B\x84` \x85\x01a&\xA2V[` \x82\x01Ra'-\x84`\xA0\x85\x01a&\xA2V[`@\x82\x01Ra'@\x84a\x01 \x85\x01a&\xA2V[``\x82\x01R\x93\x92PPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x03\x88Wa\x03\x88a'LV[_`\x01`\x01`\xFF\x1B\x01\x82\x01a'\x8AWa'\x8Aa'LV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a'\xB5W__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x81R\x92\x90\x93\x16` \x83\x01R`@\x82\x01R``\x81\x01\x91\x90\x91R`\xA0`\x80\x82\x01\x81\x90R_\x90\x82\x01R`\xC0\x01\x90V[` \x80\x82R`)\x90\x82\x01R\x7FERC721 tokens should have a valu`@\x82\x01Rhe of zero`\xB8\x1B``\x82\x01R`\x80\x01\x90V[` \x80\x82R`'\x90\x82\x01R\x7FERC20 tokens should have a token`@\x82\x01Rf\x04\x96B\x06\xF6b\x03`\xCC\x1B``\x82\x01R`\x80\x01\x90V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x03\x88Wa\x03\x88a'LV[\x81\x81\x03\x81\x81\x11\x15a\x03\x88Wa\x03\x88a'LV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a(\xC2W__\xFD[\x83\x01\x805\x91P`\x01`\x01`@\x1B\x03\x82\x11\x15a(\xDBW__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a \x92W__\xFD[__\x85\x85\x11\x15a(\xFDW__\xFD[\x83\x86\x11\x15a)\tW__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[_` \x82\x84\x03\x12\x15a)&W__\xFD[P5\x91\x90PV[`@\x81R_\x83Q\x80`@\x84\x01R\x80` \x86\x01``\x85\x01^_``\x82\x85\x01\x01R`\x1F\x19`\x1F\x82\x01\x16\x83\x01\x90P``\x81\x01``\x84\x83\x03\x01` \x85\x01R\x80\x85Q\x80\x83R`\x80\x84\x01\x91P` \x87\x01\x93P_\x92P[\x80\x83\x10\x15a)\xA0W\x83Q\x82R` \x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa)}V[P\x96\x95PPPPPPV\xFE\xA2dipfsX\"\x12 B\xF5o\x1B\xF5\x1D\x8D\\\xD6\xCD\xE7\x96U.W\xB8\xCD\x15\x06\x9E`\xD8\x90p\xDD&\xB3\xA1\x8E\xD7n\x90dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x6080604052600436106100e3575f3560e01c80638da5cb5b11610087578063e3178c8611610057578063e3178c86146102b2578063e6d5abe5146102d1578063f23a6e61146102e4578063f3b85fc214610310575f5ffd5b80638da5cb5b1461021e57806397e20d0e14610255578063bc197c8114610274578063d5e6c6f914610293575f5ffd5b8063186a4d08116100c2578063186a4d081461018a57806328c3d7e6146101bb5780634a8a4073146101de57806375137875146101ff575f5ffd5b80629ce20b146100e757806301ffc9a714610130578063150b7a021461015f575b5f5ffd5b3480156100f2575f5ffd5b506101126101013660046120ed565b629ce20b60e01b9695505050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b34801561013b575f5ffd5b5061014f61014a36600461215a565b610323565b6040519015158152602001610127565b34801561016a575f5ffd5b50610112610179366004612188565b630a85bd0160e11b95945050505050565b348015610195575f5ffd5b506101a96101a436600461220b565b61038e565b60405160ff9091168152602001610127565b3480156101c6575f5ffd5b506101d060035481565b604051908152602001610127565b3480156101e9575f5ffd5b506101fd6101f8366004612225565b6103cf565b005b34801561020a575f5ffd5b506101fd61021936600461225c565b610432565b348015610229575f5ffd5b5060025461023d906001600160a01b031681565b6040516001600160a01b039091168152602001610127565b348015610260575f5ffd5b506101fd61026f366004612292565b610d05565b34801561027f575f5ffd5b5061011261028e3660046122ed565b610d51565b34801561029e575f5ffd5b506101fd6102ad366004612292565b610d94565b3480156102bd575f5ffd5b506101fd6102cc366004612292565b610ddf565b6101fd6102df3660046123c0565b610e69565b3480156102ef575f5ffd5b506101126102fe366004612416565b63f23a6e6160e01b9695505050505050565b6101fd61031e36600461246e565b61160d565b5f6001600160e01b031982166301ffc9a760e01b148061035257506001600160e01b03198216629ce20b60e01b145b8061036d57506001600160e01b03198216630a85bd0160e11b145b8061038857506001600160e01b03198216630271189760e51b145b92915050565b5f5f826040516020016103a191906124a0565b60408051601f1981840301815291815281516020928301205f908152600590925290205460ff169392505050565b6002546001600160a01b031633146104025760405162461bcd60e51b81526004016103f9906124df565b60405180910390fd5b5f80546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015610477573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049b9190612516565b6104b75760405162461bcd60e51b81526004016103f990612535565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa1580156104fd573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105219190612516565b1561053e5760405162461bcd60e51b81526004016103f990612592565b600a5460408051631d43c97d60e21b8152905133926001600160a01b03169163750f25f49160048083019260209291908290030181865afa158015610585573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105a991906125e6565b6001600160a01b0316146106155760405162461bcd60e51b815260206004820152602d60248201527f4f6e6c79207468652063757272656e742070726f706f7365722063616e20707260448201526c6f706f7365206120626c6f636b60981b60648201526084016103f9565b60608101358101355f816001600160401b0381111561063657610636612601565b60405190808252806020026020018201604052801561065f578160200160208202803683370190505b5090505f5b828110156106cd576106a861067c6060860186612615565b8381811061068c5761068c61265a565b90506101a002018036038101906106a391906126ef565b611af7565b8282815181106106ba576106ba61265a565b6020908102919091010152600101610664565b5080825b600181111561078f575f5b600182901c8110156107865761076183600183901b815181106107015761070161265a565b602002602001015184600184901b600161071b9190612760565b8151811061072b5761072b61265a565b602002602001015160405160200161074d929190918252602082015260400190565b604051602081830303815290604052611bc6565b8382815181106107735761077361265a565b60209081029190910101526001016106dc565b5060011c6106d1565b505f5f6107b586855f815181106107a8576107a861265a565b6020026020010151611be9565b91509150816108065760405162461bcd60e51b815260206004820181905260248201527f526f6c6c75702070726f6f6620766572696669636174696f6e206661696c656460448201526064016103f9565b5f5b85811015610b815760608701356101a0820201870160c001351580156109795760608801356101a083020188016101400135158015610848575050610b79565b835f805b600481101561096c5760608c01356101a087020160208202018c01610140013591508115610964575f8281526004602052604090205461088c9084612760565b5f83815260046020526040902060019081015491945060ff9091161480156108ca57505f82815260046020526040902060010154610100900460ff16155b6109465760405162461bcd60e51b815260206004820152604160248201527f4465706f7369742065697468657220686173206e6f74206265656e206573637260448201527f6f776564206f722068617320616c7265616479206265656e2072656465656d656064820152601960fa1b608482015260a4016103f9565b5f828152600460205260409020600101805461ff0019166101001790555b60010161084c565b5081955050505050610b79565b604060608901356101a08402018901908101351560c091909101351515168015610b76575f6109ab60608b018b612615565b858181106109bb576109bb61265a565b90506101a0020160a0015f600481106109d6576109d661265a565b602002013590505f60405180608001604052808c80606001906109f99190612615565b88818110610a0957610a0961265a565b90506101a00201610120015f60048110610a2557610a2561265a565b602002013581526020018c8060600190610a3f9190612615565b88818110610a4f57610a4f61265a565b90506101a0020161012001600160048110610a6c57610a6c61265a565b60200201356001600160a01b031681526020018c8060600190610a8f9190612615565b88818110610a9f57610a9f61265a565b90506101a0020161012001600260048110610abc57610abc61265a565b60209081029190910135825290810184905260408051835181528383015181840152818401518183015260608085015190820152608090205f81815260059093529120549192509060ff1615610b545760405162461bcd60e51b815260206004820152601c60248201527f46756e6473206861766520616c72656164792077697468647261776e0000000060448201526064016103f9565b5f908152600560205260409020805460ff1916600117905550610b7992505050565b50505b600101610808565b50600a5460408051631d43c97d60e21b815290515f926001600160a01b03169163750f25f49160048083019260209291908290030181865afa158015610bc9573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bed91906125e6565b90505f816001600160a01b0316836040515f6040518083038185875af1925050503d805f8114610c38576040519150601f19603f3d011682016040523d82523d5f602084013e610c3d565b606091505b5050905080610ca15760405162461bcd60e51b815260206004820152602a60248201527f4661696c656420746f207472616e73666572207468652066656520746f2074686044820152693290383937b837b9b2b960b11b60648201526084016103f9565b873560075560208801356008556040880135600955600380547f46bf148827a74eb5c7ca85b1051331f7e07c6b512300580c47bf1dd646c1d895915f610ce683612773565b9091555060405190815260200160405180910390a15050505050505050565b6002546001600160a01b03163314610d2f5760405162461bcd60e51b81526004016103f9906124df565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60405162461bcd60e51b8152602060048201526016602482015275155b9cdd5c1c1bdc9d08189e48139a59da1d19985b1b60521b60448201525f906064016103f9565b6002546001600160a01b03163314610dbe5760405162461bcd60e51b81526004016103f9906124df565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b03163314610e475760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60448201526431ba34b7b760d91b60648201526084016103f9565b600a80546001600160a01b0319166001600160a01b0392909216919091179055565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015610eae573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ed29190612516565b610eee5760405162461bcd60e51b81526004016103f990612535565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa158015610f34573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f589190612516565b15610f755760405162461bcd60e51b81526004016103f990612592565b604080516001600160a01b03871660208201529081018590525f90610f9c9060600161074d565b6040805180820182526001600160a01b03898116825260208083018a81525f8681526006909252938120925183546001600160a01b031916921691909117825591516001909101559091506003836003811115610ffb57610ffb612791565b1461100657816110a6565b60405163131f9f3f60e11b815260048181018890529088906001600160a01b0382169063263f3e7e90602401602060405180830381865afa15801561104d573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061107191906127a5565b604080516001600160a01b039093166020840152820152606001604051602081830303815290604052805190602001205f1c901c5b604080516080808201835285825260208083018581528385018b815260608086018c815287519485018b905292519684019690965251948201949094529251908301529192505f906110fa9060a00161074d565b5f8181526004602052604090206001015490915060ff16156111785760405162461bcd60e51b815260206004820152603160248201527f46756e6473206861766520616c7265616479206265656e20657363726f77656460448201527008199bdc881d1a1a5cc811195c1bdcda5d607a1b60648201526084016103f9565b600385600381111561118c5761118c612791565b036111f8576040516323b872dd60e01b8152336004820152306024820152604481018990526001600160a01b038a16906323b872dd906064015b5f604051808303815f87803b1580156111dd575f5ffd5b505af11580156111ef573d5f5f3e3d5ffd5b505050506113cc565b600185600381111561120c5761120c612791565b0361124357604051637921219560e11b81526001600160a01b038a169063f242432a906111c690339030908d908d906004016127bc565b600285600381111561125757611257612791565b036112c057861561127a5760405162461bcd60e51b81526004016103f9906127f3565b604051635c46a7ef60e11b815233600482015230602482015260448101899052608060648201525f60848201526001600160a01b038a169063b88d4fde9060a4016111c6565b5f8560038111156112d3576112d3612791565b036113b35787156112f65760405162461bcd60e51b81526004016103f99061283c565b6040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b038a16906323b872dd906064016020604051808303815f875af1158015611346573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061136a9190612516565b6113ae5760405162461bcd60e51b8152602060048201526015602482015274115490cc8c081d1c985b9cd9995c8819985a5b1959605a1b60448201526064016103f9565b6113cc565b60405163afa905dd60e01b815260040160405180910390fd5b604080516060810182528b8152600160208083018281525f84860181815287825260049093528590209351845551929091018054915160ff9081166101000261ffff19909316931692909217179055517f354729b3585ac9518a7659e8b3323389f148a753e8c3c5d8c01bfe09bc009340906114549085908a90918252602082015260400190565b60405180910390a16114678a6002612883565b341115611601575f61147a8b6002612883565b611484903461289a565b90505f6040518060800160405280600c548152602001600c5481526020018381526020018981525090505f6114e98260405160200161074d91908151815260208083015190820152604080830151908201526060918201519181019190915260800190565b5f8181526004602052604090206001015490915060ff161561156b5760405162461bcd60e51b815260206004820152603560248201527f46756e6473206861766520616c7265616479206265656e20657363726f77656460448201527408199bdc881d1a1a5cc81999594811195c1bdcda5d605a1b60648201526084016103f9565b604080516060810182528e8152600160208083018281525f84860181815287825260049093528590209351845551929091018054915160ff9081166101000261ffff19909316931692909217179055600c5490517f354729b3585ac9518a7659e8b3323389f148a753e8c3c5d8c01bfe09bc009340916115f5918690918252602082015260400190565b60405180910390a15050505b50505050505050505050565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015611652573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116769190612516565b6116925760405162461bcd60e51b81526004016103f990612535565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa1580156116d8573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116fc9190612516565b156117195760405162461bcd60e51b81526004016103f990612592565b5f8260405160200161172b91906124a0565b60408051601f1981840301815291815281516020928301205f818152600590935291205490915060ff166001146117db5760405162461bcd60e51b815260206004820152604860248201527f456974686572206e6f2066756e64732061726520617661696c61626c6520746f60448201527f2077697468647261772c206f7220746865792061726520616c7265616479207760648201526734ba34323930bbb760c11b608482015260a4016103f9565b82355f90815260066020908152604091829020825180840190935280546001600160a01b0316808452600190910154918301919091526118c7575f6118266040860160208701612292565b6001600160a01b031685604001356040515f6040518083038185875af1925050503d805f8114611871576040519150601f19603f3d011682016040523d82523d5f602084013e611876565b606091505b50509050806118c05760405162461bcd60e51b8152602060048201526016602482015275436f756c64206e6f742077697468647261772066656560501b60448201526064016103f9565b5050505050565b5f60018460038111156118dc576118dc612791565b036119615781516001600160a01b031663f242432a306119026040890160208a01612292565b856020015189604001356040518563ffffffff1660e01b815260040161192b94939291906127bc565b5f604051808303815f87803b158015611942575f5ffd5b505af1158015611954573d5f5f3e3d5ffd5b5050505060019050611ad6565b600284600381111561197557611975612791565b03611a095760408501351561199c5760405162461bcd60e51b81526004016103f9906127f3565b81516001600160a01b031663b88d4fde306119bd6040890160208a01612292565b60208601516040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152608060648201525f608482015260a40161192b565b5f846003811115611a1c57611a1c612791565b03611ad657602082015115611a435760405162461bcd60e51b81526004016103f99061283c565b81516001600160a01b031663a9059cbb611a636040880160208901612292565b604080516001600160e01b031960e085901b1681526001600160a01b03909216600483015288013560248201526044016020604051808303815f875af1158015611aaf573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ad39190612516565b90505b80156118c05750505f908152600560205260409020805460ff191690555050565b6060818101518082015160208085015180518183015160408084015193880151818a015180518188015182850151928c01518b518a8d01519c87015187519b8c01999099528a8701979097529b890197909752608088019290925260a087019190915260c086019490945260e08501939093526101008401969096526101208301959095526101408201939093526101608101939093526001600160ff1b0316610180808401829052825180850390910181526101a09093019091525f91611bbe81611bc6565b949350505050565b5f60405160208184516020860160025afa611bdf575f5ffd5b5160041c92915050565b5f8080611bf960808601866128ad565b611c07916020915f916128ef565b810190611c149190612916565b9050805f611c2560808801886128ad565b611c34916040916020916128ef565b810190611c419190612916565b90505f611c5160808901896128ad565b611c60916060916040916128ef565b810190611c6d9190612916565b90505f611c7d60808a018a6128ad565b611c8c916080916060916128ef565b810190611c999190612916565b90505f611ca960808b018b6128ad565b611cb89160a0916080916128ef565b810190611cc59190612916565b90505f611cd560808c018c6128ad565b611ce49160c09160a0916128ef565b810190611cf19190612916565b90505f611d0160808d018d6128ad565b611d109160e09160c0916128ef565b810190611d1d9190612916565b90505f611d2d60808e018e6128ad565b611d3d916101009160e0916128ef565b810190611d4a9190612916565b90505f611d5a60808f018f6128ad565b611d6b9161012091610100916128ef565b810190611d789190612916565b60408051601080825261022082019092529192505f919060208201610200803683370190505090508a815f81518110611db357611db361265a565b6020026020010181815250508d5f1b81600181518110611dd557611dd561265a565b6020026020010181815250506007545f1b81600281518110611df957611df961265a565b602090810291909101015280518f359082906003908110611e1c57611e1c61265a565b6020026020010181815250506008545f1b81600481518110611e4057611e4061265a565b6020026020010181815250508e602001355f1b81600581518110611e6657611e6661265a565b6020026020010181815250506009545f1b81600681518110611e8a57611e8a61265a565b6020026020010181815250508e604001355f1b81600781518110611eb057611eb061265a565b6020026020010181815250508881600881518110611ed057611ed061265a565b6020026020010181815250508781600981518110611ef057611ef061265a565b6020026020010181815250508681600a81518110611f1057611f1061265a565b6020026020010181815250508581600b81518110611f3057611f3061265a565b6020026020010181815250508481600c81518110611f5057611f5061265a565b6020026020010181815250508381600d81518110611f7057611f7061265a565b6020026020010181815250508281600e81518110611f9057611f9061265a565b6020026020010181815250508181600f81518110611fb057611fb061265a565b6020026020010181815250505f8f8060800190611fcd91906128ad565b611fdc916101209082906128ef565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525050600b54604051633a94343960e21b81529394506001600160a01b03169263ea50d0e4925061204291508490869060040161292d565b602060405180830381865afa15801561205d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120819190612516565b9d50999b5050505050505050505050505b9250929050565b6001600160a01b03811681146120ad575f5ffd5b50565b5f5f83601f8401126120c0575f5ffd5b5081356001600160401b038111156120d6575f5ffd5b602083019150836020828501011115612092575f5ffd5b5f5f5f5f5f5f60a08789031215612102575f5ffd5b863561210d81612099565b955060208701359450604087013593506060870135925060808701356001600160401b0381111561213c575f5ffd5b61214889828a016120b0565b979a9699509497509295939492505050565b5f6020828403121561216a575f5ffd5b81356001600160e01b031981168114612181575f5ffd5b9392505050565b5f5f5f5f5f6080868803121561219c575f5ffd5b85356121a781612099565b945060208601356121b781612099565b93506040860135925060608601356001600160401b038111156121d8575f5ffd5b6121e4888289016120b0565b969995985093965092949392505050565b5f60808284031215612205575f5ffd5b50919050565b5f6080828403121561221b575f5ffd5b61218183836121f5565b5f5f60408385031215612236575f5ffd5b823561224181612099565b9150602083013561225181612099565b809150509250929050565b5f6020828403121561226c575f5ffd5b81356001600160401b03811115612281575f5ffd5b820160a08185031215612181575f5ffd5b5f602082840312156122a2575f5ffd5b813561218181612099565b5f5f83601f8401126122bd575f5ffd5b5081356001600160401b038111156122d3575f5ffd5b6020830191508360208260051b8501011115612092575f5ffd5b5f5f5f5f5f5f5f5f60a0898b031215612304575f5ffd5b883561230f81612099565b9750602089013561231f81612099565b965060408901356001600160401b03811115612339575f5ffd5b6123458b828c016122ad565b90975095505060608901356001600160401b03811115612363575f5ffd5b61236f8b828c016122ad565b90955093505060808901356001600160401b0381111561238d575f5ffd5b6123998b828c016120b0565b999c989b5096995094979396929594505050565b8035600481106123bb575f5ffd5b919050565b5f5f5f5f5f5f60c087890312156123d5575f5ffd5b8635955060208701356123e781612099565b945060408701359350606087013592506080870135915061240a60a088016123ad565b90509295509295509295565b5f5f5f5f5f5f60a0878903121561242b575f5ffd5b863561243681612099565b9550602087013561244681612099565b9450604087013593506060870135925060808701356001600160401b0381111561213c575f5ffd5b5f5f60a0838503121561247f575f5ffd5b61248984846121f5565b9150612497608084016123ad565b90509250929050565b813581526080810160208301356124b681612099565b6001600160a01b0316602083015260408381013590830152606092830135929091019190915290565b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b5f60208284031215612526575f5ffd5b81518015158114612181575f5ffd5b6020808252603d908201527f4365727469666965643a20596f7520617265206e6f7420617574686f7269736560408201527f6420746f207472616e73616374207573696e67204e6967687466616c6c000000606082015260800190565b60208082526034908201527f4365727469666965643a20596f7520617265206f6e2074686520436861696e616040820152731b1e5cda5cc81cd85b98dd1a5bdb9cc81b1a5cdd60621b606082015260800190565b5f602082840312156125f6575f5ffd5b815161218181612099565b634e487b7160e01b5f52604160045260245ffd5b5f5f8335601e1984360301811261262a575f5ffd5b8301803591506001600160401b03821115612643575f5ffd5b60200191506101a081023603821315612092575f5ffd5b634e487b7160e01b5f52603260045260245ffd5b604051608081016001600160401b038111828210171561269c57634e487b7160e01b5f52604160045260245ffd5b60405290565b5f82601f8301126126b1575f5ffd5b6126b961266e565b8060808401858111156126ca575f5ffd5b845b818110156126e45780358452602093840193016126cc565b509095945050505050565b5f6101a0828403128015612701575f5ffd5b5061270a61266e565b8235815261271b84602085016126a2565b602082015261272d8460a085016126a2565b60408201526127408461012085016126a2565b60608201529392505050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156103885761038861274c565b5f6001600160ff1b01820161278a5761278a61274c565b5060010190565b634e487b7160e01b5f52602160045260245ffd5b5f602082840312156127b5575f5ffd5b5051919050565b6001600160a01b0394851681529290931660208301526040820152606081019190915260a0608082018190525f9082015260c00190565b60208082526029908201527f45524337323120746f6b656e732073686f756c64206861766520612076616c7560408201526865206f66207a65726f60b81b606082015260800190565b60208082526027908201527f455243323020746f6b656e732073686f756c642068617665206120746f6b656e60408201526604964206f6620360cc1b606082015260800190565b80820281158282048414176103885761038861274c565b818103818111156103885761038861274c565b5f5f8335601e198436030181126128c2575f5ffd5b8301803591506001600160401b038211156128db575f5ffd5b602001915036819003821315612092575f5ffd5b5f5f858511156128fd575f5ffd5b83861115612909575f5ffd5b5050820193919092039150565b5f60208284031215612926575f5ffd5b5035919050565b604081525f83518060408401528060208601606085015e5f60608285010152601f19601f820116830190506060810160608483030160208501528085518083526080840191506020870193505f92505b808310156129a0578351825260208201915060208401935060018301925061297d565b50969550505050505056fea264697066735822122042f56f1bf51d8d5cd6cde796552e57b8cd15069e60d89070dd26b3a18ed76e9064736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\0\xE3W_5`\xE0\x1C\x80c\x8D\xA5\xCB[\x11a\0\x87W\x80c\xE3\x17\x8C\x86\x11a\0WW\x80c\xE3\x17\x8C\x86\x14a\x02\xB2W\x80c\xE6\xD5\xAB\xE5\x14a\x02\xD1W\x80c\xF2:na\x14a\x02\xE4W\x80c\xF3\xB8_\xC2\x14a\x03\x10W__\xFD[\x80c\x8D\xA5\xCB[\x14a\x02\x1EW\x80c\x97\xE2\r\x0E\x14a\x02UW\x80c\xBC\x19|\x81\x14a\x02tW\x80c\xD5\xE6\xC6\xF9\x14a\x02\x93W__\xFD[\x80c\x18jM\x08\x11a\0\xC2W\x80c\x18jM\x08\x14a\x01\x8AW\x80c(\xC3\xD7\xE6\x14a\x01\xBBW\x80cJ\x8A@s\x14a\x01\xDEW\x80cu\x13xu\x14a\x01\xFFW__\xFD[\x80b\x9C\xE2\x0B\x14a\0\xE7W\x80c\x01\xFF\xC9\xA7\x14a\x010W\x80c\x15\x0Bz\x02\x14a\x01_W[__\xFD[4\x80\x15a\0\xF2W__\xFD[Pa\x01\x12a\x01\x016`\x04a \xEDV[b\x9C\xE2\x0B`\xE0\x1B\x96\x95PPPPPPV[`@Q`\x01`\x01`\xE0\x1B\x03\x19\x90\x91\x16\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01;W__\xFD[Pa\x01Oa\x01J6`\x04a!ZV[a\x03#V[`@Q\x90\x15\x15\x81R` \x01a\x01'V[4\x80\x15a\x01jW__\xFD[Pa\x01\x12a\x01y6`\x04a!\x88V[c\n\x85\xBD\x01`\xE1\x1B\x95\x94PPPPPV[4\x80\x15a\x01\x95W__\xFD[Pa\x01\xA9a\x01\xA46`\x04a\"\x0BV[a\x03\x8EV[`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01'V[4\x80\x15a\x01\xC6W__\xFD[Pa\x01\xD0`\x03T\x81V[`@Q\x90\x81R` \x01a\x01'V[4\x80\x15a\x01\xE9W__\xFD[Pa\x01\xFDa\x01\xF86`\x04a\"%V[a\x03\xCFV[\0[4\x80\x15a\x02\nW__\xFD[Pa\x01\xFDa\x02\x196`\x04a\"\\V[a\x042V[4\x80\x15a\x02)W__\xFD[P`\x02Ta\x02=\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01'V[4\x80\x15a\x02`W__\xFD[Pa\x01\xFDa\x02o6`\x04a\"\x92V[a\r\x05V[4\x80\x15a\x02\x7FW__\xFD[Pa\x01\x12a\x02\x8E6`\x04a\"\xEDV[a\rQV[4\x80\x15a\x02\x9EW__\xFD[Pa\x01\xFDa\x02\xAD6`\x04a\"\x92V[a\r\x94V[4\x80\x15a\x02\xBDW__\xFD[Pa\x01\xFDa\x02\xCC6`\x04a\"\x92V[a\r\xDFV[a\x01\xFDa\x02\xDF6`\x04a#\xC0V[a\x0EiV[4\x80\x15a\x02\xEFW__\xFD[Pa\x01\x12a\x02\xFE6`\x04a$\x16V[c\xF2:na`\xE0\x1B\x96\x95PPPPPPV[a\x01\xFDa\x03\x1E6`\x04a$nV[a\x16\rV[_`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x01\xFF\xC9\xA7`\xE0\x1B\x14\x80a\x03RWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16b\x9C\xE2\x0B`\xE0\x1B\x14[\x80a\x03mWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\n\x85\xBD\x01`\xE1\x1B\x14[\x80a\x03\x88WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x02q\x18\x97`\xE5\x1B\x14[\x92\x91PPV[__\x82`@Q` \x01a\x03\xA1\x91\x90a$\xA0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x90\x81R`\x05\x90\x92R\x90 T`\xFF\x16\x93\x92PPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x04\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a$\xDFV[`@Q\x80\x91\x03\x90\xFD[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x01\x80T\x93\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UV[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04wW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x04\x9B\x91\x90a%\x16V[a\x04\xB7W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%5V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x04\xFDW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05!\x91\x90a%\x16V[\x15a\x05>W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%\x92V[`\nT`@\x80Qc\x1DC\xC9}`\xE2\x1B\x81R\x90Q3\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cu\x0F%\xF4\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x05\x85W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x05\xA9\x91\x90a%\xE6V[`\x01`\x01`\xA0\x1B\x03\x16\x14a\x06\x15W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FOnly the current proposer can pr`D\x82\x01Rlopose a block`\x98\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[``\x81\x015\x81\x015_\x81`\x01`\x01`@\x1B\x03\x81\x11\x15a\x066Wa\x066a&\x01V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x06_W\x81` \x01` \x82\x02\x806\x837\x01\x90P[P\x90P_[\x82\x81\x10\x15a\x06\xCDWa\x06\xA8a\x06|``\x86\x01\x86a&\x15V[\x83\x81\x81\x10a\x06\x8CWa\x06\x8Ca&ZV[\x90Pa\x01\xA0\x02\x01\x806\x03\x81\x01\x90a\x06\xA3\x91\x90a&\xEFV[a\x1A\xF7V[\x82\x82\x81Q\x81\x10a\x06\xBAWa\x06\xBAa&ZV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x06dV[P\x80\x82[`\x01\x81\x11\x15a\x07\x8FW_[`\x01\x82\x90\x1C\x81\x10\x15a\x07\x86Wa\x07a\x83`\x01\x83\x90\x1B\x81Q\x81\x10a\x07\x01Wa\x07\x01a&ZV[` \x02` \x01\x01Q\x84`\x01\x84\x90\x1B`\x01a\x07\x1B\x91\x90a'`V[\x81Q\x81\x10a\x07+Wa\x07+a&ZV[` \x02` \x01\x01Q`@Q` \x01a\x07M\x92\x91\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x1B\xC6V[\x83\x82\x81Q\x81\x10a\x07sWa\x07sa&ZV[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x06\xDCV[P`\x01\x1Ca\x06\xD1V[P__a\x07\xB5\x86\x85_\x81Q\x81\x10a\x07\xA8Wa\x07\xA8a&ZV[` \x02` \x01\x01Qa\x1B\xE9V[\x91P\x91P\x81a\x08\x06W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01\x81\x90R`$\x82\x01R\x7FRollup proof verification failed`D\x82\x01R`d\x01a\x03\xF9V[_[\x85\x81\x10\x15a\x0B\x81W``\x87\x015a\x01\xA0\x82\x02\x01\x87\x01`\xC0\x015\x15\x80\x15a\tyW``\x88\x015a\x01\xA0\x83\x02\x01\x88\x01a\x01@\x015\x15\x80\x15a\x08HWPPa\x0ByV[\x83_\x80[`\x04\x81\x10\x15a\tlW``\x8C\x015a\x01\xA0\x87\x02\x01` \x82\x02\x01\x8C\x01a\x01@\x015\x91P\x81\x15a\tdW_\x82\x81R`\x04` R`@\x90 Ta\x08\x8C\x90\x84a'`V[_\x83\x81R`\x04` R`@\x90 `\x01\x90\x81\x01T\x91\x94P`\xFF\x90\x91\x16\x14\x80\x15a\x08\xCAWP_\x82\x81R`\x04` R`@\x90 `\x01\x01Ta\x01\0\x90\x04`\xFF\x16\x15[a\tFW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`A`$\x82\x01R\x7FDeposit either has not been escr`D\x82\x01R\x7Fowed or has already been redeeme`d\x82\x01R`\x19`\xFA\x1B`\x84\x82\x01R`\xA4\x01a\x03\xF9V[_\x82\x81R`\x04` R`@\x90 `\x01\x01\x80Ta\xFF\0\x19\x16a\x01\0\x17\x90U[`\x01\x01a\x08LV[P\x81\x95PPPPPa\x0ByV[`@``\x89\x015a\x01\xA0\x84\x02\x01\x89\x01\x90\x81\x015\x15`\xC0\x91\x90\x91\x015\x15\x15\x16\x80\x15a\x0BvW_a\t\xAB``\x8B\x01\x8Ba&\x15V[\x85\x81\x81\x10a\t\xBBWa\t\xBBa&ZV[\x90Pa\x01\xA0\x02\x01`\xA0\x01_`\x04\x81\x10a\t\xD6Wa\t\xD6a&ZV[` \x02\x015\x90P_`@Q\x80`\x80\x01`@R\x80\x8C\x80``\x01\x90a\t\xF9\x91\x90a&\x15V[\x88\x81\x81\x10a\n\tWa\n\ta&ZV[\x90Pa\x01\xA0\x02\x01a\x01 \x01_`\x04\x81\x10a\n%Wa\n%a&ZV[` \x02\x015\x81R` \x01\x8C\x80``\x01\x90a\n?\x91\x90a&\x15V[\x88\x81\x81\x10a\nOWa\nOa&ZV[\x90Pa\x01\xA0\x02\x01a\x01 \x01`\x01`\x04\x81\x10a\nlWa\nla&ZV[` \x02\x015`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x8C\x80``\x01\x90a\n\x8F\x91\x90a&\x15V[\x88\x81\x81\x10a\n\x9FWa\n\x9Fa&ZV[\x90Pa\x01\xA0\x02\x01a\x01 \x01`\x02`\x04\x81\x10a\n\xBCWa\n\xBCa&ZV[` \x90\x81\x02\x91\x90\x91\x015\x82R\x90\x81\x01\x84\x90R`@\x80Q\x83Q\x81R\x83\x83\x01Q\x81\x84\x01R\x81\x84\x01Q\x81\x83\x01R``\x80\x85\x01Q\x90\x82\x01R`\x80\x90 _\x81\x81R`\x05\x90\x93R\x91 T\x91\x92P\x90`\xFF\x16\x15a\x0BTW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FFunds have already withdrawn\0\0\0\0`D\x82\x01R`d\x01a\x03\xF9V[_\x90\x81R`\x05` R`@\x90 \x80T`\xFF\x19\x16`\x01\x17\x90UPa\x0By\x92PPPV[PP[`\x01\x01a\x08\x08V[P`\nT`@\x80Qc\x1DC\xC9}`\xE2\x1B\x81R\x90Q_\x92`\x01`\x01`\xA0\x1B\x03\x16\x91cu\x0F%\xF4\x91`\x04\x80\x83\x01\x92` \x92\x91\x90\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x0B\xC9W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B\xED\x91\x90a%\xE6V[\x90P_\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x0C8W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x0C=V[``\x91P[PP\x90P\x80a\x0C\xA1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FFailed to transfer the fee to th`D\x82\x01Ri2\x90897\xB87\xB9\xB2\xB9`\xB1\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[\x875`\x07U` \x88\x015`\x08U`@\x88\x015`\tU`\x03\x80T\x7FF\xBF\x14\x88'\xA7N\xB5\xC7\xCA\x85\xB1\x05\x131\xF7\xE0|kQ#\0X\x0CG\xBF\x1D\xD6F\xC1\xD8\x95\x91_a\x0C\xE6\x83a'sV[\x90\x91UP`@Q\x90\x81R` \x01`@Q\x80\x91\x03\x90\xA1PPPPPPPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\r/W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a$\xDFV[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01Ru\x15[\x9C\xDD\\\x1C\x1B\xDC\x9D\x08\x18\x9EH\x13\x9AY\xDA\x1D\x19\x98[\x1B`R\x1B`D\x82\x01R_\x90`d\x01a\x03\xF9V[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\r\xBEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a$\xDFV[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x0EGW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FOnly the owner can call this fun`D\x82\x01Rd1\xBA4\xB7\xB7`\xD9\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[`\n\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0E\xAEW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0E\xD2\x91\x90a%\x16V[a\x0E\xEEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%5V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0F4W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0FX\x91\x90a%\x16V[\x15a\x0FuW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%\x92V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x87\x16` \x82\x01R\x90\x81\x01\x85\x90R_\x90a\x0F\x9C\x90``\x01a\x07MV[`@\x80Q\x80\x82\x01\x82R`\x01`\x01`\xA0\x1B\x03\x89\x81\x16\x82R` \x80\x83\x01\x8A\x81R_\x86\x81R`\x06\x90\x92R\x93\x81 \x92Q\x83T`\x01`\x01`\xA0\x1B\x03\x19\x16\x92\x16\x91\x90\x91\x17\x82U\x91Q`\x01\x90\x91\x01U\x90\x91P`\x03\x83`\x03\x81\x11\x15a\x0F\xFBWa\x0F\xFBa'\x91V[\x14a\x10\x06W\x81a\x10\xA6V[`@Qc\x13\x1F\x9F?`\xE1\x1B\x81R`\x04\x81\x81\x01\x88\x90R\x90\x88\x90`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c&?>~\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x10MW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x10q\x91\x90a'\xA5V[`@\x80Q`\x01`\x01`\xA0\x1B\x03\x90\x93\x16` \x84\x01R\x82\x01R``\x01`@Q` \x81\x83\x03\x03\x81R\x90`@R\x80Q\x90` \x01 _\x1C\x90\x1C[`@\x80Q`\x80\x80\x82\x01\x83R\x85\x82R` \x80\x83\x01\x85\x81R\x83\x85\x01\x8B\x81R``\x80\x86\x01\x8C\x81R\x87Q\x94\x85\x01\x8B\x90R\x92Q\x96\x84\x01\x96\x90\x96RQ\x94\x82\x01\x94\x90\x94R\x92Q\x90\x83\x01R\x91\x92P_\x90a\x10\xFA\x90`\xA0\x01a\x07MV[_\x81\x81R`\x04` R`@\x90 `\x01\x01T\x90\x91P`\xFF\x16\x15a\x11xW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`1`$\x82\x01R\x7FFunds have already been escrowed`D\x82\x01Rp\x08\x19\x9B\xDC\x88\x1D\x1A\x1A\\\xC8\x11\x19\\\x1B\xDC\xDA]`z\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[`\x03\x85`\x03\x81\x11\x15a\x11\x8CWa\x11\x8Ca'\x91V[\x03a\x11\xF8W`@Qc#\xB8r\xDD`\xE0\x1B\x81R3`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x89\x90R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c#\xB8r\xDD\x90`d\x01[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x11\xDDW__\xFD[PZ\xF1\x15\x80\x15a\x11\xEFW=__>=_\xFD[PPPPa\x13\xCCV[`\x01\x85`\x03\x81\x11\x15a\x12\x0CWa\x12\x0Ca'\x91V[\x03a\x12CW`@Qcy!!\x95`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c\xF2BC*\x90a\x11\xC6\x903\x900\x90\x8D\x90\x8D\x90`\x04\x01a'\xBCV[`\x02\x85`\x03\x81\x11\x15a\x12WWa\x12Wa'\x91V[\x03a\x12\xC0W\x86\x15a\x12zW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a'\xF3V[`@Qc\\F\xA7\xEF`\xE1\x1B\x81R3`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x89\x90R`\x80`d\x82\x01R_`\x84\x82\x01R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c\xB8\x8DO\xDE\x90`\xA4\x01a\x11\xC6V[_\x85`\x03\x81\x11\x15a\x12\xD3Wa\x12\xD3a'\x91V[\x03a\x13\xB3W\x87\x15a\x12\xF6W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a(<V[`@Qc#\xB8r\xDD`\xE0\x1B\x81R3`\x04\x82\x01R0`$\x82\x01R`D\x81\x01\x88\x90R`\x01`\x01`\xA0\x1B\x03\x8A\x16\x90c#\xB8r\xDD\x90`d\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x13FW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x13j\x91\x90a%\x16V[a\x13\xAEW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x15`$\x82\x01Rt\x11T\x90\xCC\x8C\x08\x1D\x1C\x98[\x9C\xD9\x99\\\x88\x19\x98Z[\x19Y`Z\x1B`D\x82\x01R`d\x01a\x03\xF9V[a\x13\xCCV[`@Qc\xAF\xA9\x05\xDD`\xE0\x1B\x81R`\x04\x01`@Q\x80\x91\x03\x90\xFD[`@\x80Q``\x81\x01\x82R\x8B\x81R`\x01` \x80\x83\x01\x82\x81R_\x84\x86\x01\x81\x81R\x87\x82R`\x04\x90\x93R\x85\x90 \x93Q\x84UQ\x92\x90\x91\x01\x80T\x91Q`\xFF\x90\x81\x16a\x01\0\x02a\xFF\xFF\x19\x90\x93\x16\x93\x16\x92\x90\x92\x17\x17\x90UQ\x7F5G)\xB3XZ\xC9Q\x8AvY\xE8\xB323\x89\xF1H\xA7S\xE8\xC3\xC5\xD8\xC0\x1B\xFE\t\xBC\0\x93@\x90a\x14T\x90\x85\x90\x8A\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA1a\x14g\x8A`\x02a(\x83V[4\x11\x15a\x16\x01W_a\x14z\x8B`\x02a(\x83V[a\x14\x84\x904a(\x9AV[\x90P_`@Q\x80`\x80\x01`@R\x80`\x0CT\x81R` \x01`\x0CT\x81R` \x01\x83\x81R` \x01\x89\x81RP\x90P_a\x14\xE9\x82`@Q` \x01a\x07M\x91\x90\x81Q\x81R` \x80\x83\x01Q\x90\x82\x01R`@\x80\x83\x01Q\x90\x82\x01R``\x91\x82\x01Q\x91\x81\x01\x91\x90\x91R`\x80\x01\x90V[_\x81\x81R`\x04` R`@\x90 `\x01\x01T\x90\x91P`\xFF\x16\x15a\x15kW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`5`$\x82\x01R\x7FFunds have already been escrowed`D\x82\x01Rt\x08\x19\x9B\xDC\x88\x1D\x1A\x1A\\\xC8\x19\x99YH\x11\x19\\\x1B\xDC\xDA]`Z\x1B`d\x82\x01R`\x84\x01a\x03\xF9V[`@\x80Q``\x81\x01\x82R\x8E\x81R`\x01` \x80\x83\x01\x82\x81R_\x84\x86\x01\x81\x81R\x87\x82R`\x04\x90\x93R\x85\x90 \x93Q\x84UQ\x92\x90\x91\x01\x80T\x91Q`\xFF\x90\x81\x16a\x01\0\x02a\xFF\xFF\x19\x90\x93\x16\x93\x16\x92\x90\x92\x17\x17\x90U`\x0CT\x90Q\x7F5G)\xB3XZ\xC9Q\x8AvY\xE8\xB323\x89\xF1H\xA7S\xE8\xC3\xC5\xD8\xC0\x1B\xFE\t\xBC\0\x93@\x91a\x15\xF5\x91\x86\x90\x91\x82R` \x82\x01R`@\x01\x90V[`@Q\x80\x91\x03\x90\xA1PPP[PPPPPPPPPPV[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x16RW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x16v\x91\x90a%\x16V[a\x16\x92W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%5V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x16\xD8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x16\xFC\x91\x90a%\x16V[\x15a\x17\x19W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a%\x92V[_\x82`@Q` \x01a\x17+\x91\x90a$\xA0V[`@\x80Q`\x1F\x19\x81\x84\x03\x01\x81R\x91\x81R\x81Q` \x92\x83\x01 _\x81\x81R`\x05\x90\x93R\x91 T\x90\x91P`\xFF\x16`\x01\x14a\x17\xDBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`H`$\x82\x01R\x7FEither no funds are available to`D\x82\x01R\x7F withdraw, or they are already w`d\x82\x01Rg4\xBA4290\xBB\xB7`\xC1\x1B`\x84\x82\x01R`\xA4\x01a\x03\xF9V[\x825_\x90\x81R`\x06` \x90\x81R`@\x91\x82\x90 \x82Q\x80\x84\x01\x90\x93R\x80T`\x01`\x01`\xA0\x1B\x03\x16\x80\x84R`\x01\x90\x91\x01T\x91\x83\x01\x91\x90\x91Ra\x18\xC7W_a\x18&`@\x86\x01` \x87\x01a\"\x92V[`\x01`\x01`\xA0\x1B\x03\x16\x85`@\x015`@Q_`@Q\x80\x83\x03\x81\x85\x87Z\xF1\x92PPP=\x80_\x81\x14a\x18qW`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x18vV[``\x91P[PP\x90P\x80a\x18\xC0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x16`$\x82\x01RuCould not withdraw fee`P\x1B`D\x82\x01R`d\x01a\x03\xF9V[PPPPPV[_`\x01\x84`\x03\x81\x11\x15a\x18\xDCWa\x18\xDCa'\x91V[\x03a\x19aW\x81Q`\x01`\x01`\xA0\x1B\x03\x16c\xF2BC*0a\x19\x02`@\x89\x01` \x8A\x01a\"\x92V[\x85` \x01Q\x89`@\x015`@Q\x85c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01a\x19+\x94\x93\x92\x91\x90a'\xBCV[_`@Q\x80\x83\x03\x81_\x87\x80;\x15\x80\x15a\x19BW__\xFD[PZ\xF1\x15\x80\x15a\x19TW=__>=_\xFD[PPPP`\x01\x90Pa\x1A\xD6V[`\x02\x84`\x03\x81\x11\x15a\x19uWa\x19ua'\x91V[\x03a\x1A\tW`@\x85\x015\x15a\x19\x9CW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a'\xF3V[\x81Q`\x01`\x01`\xA0\x1B\x03\x16c\xB8\x8DO\xDE0a\x19\xBD`@\x89\x01` \x8A\x01a\"\x92V[` \x86\x01Q`@Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x86\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x93\x84\x16`\x04\x82\x01R\x92\x90\x91\x16`$\x83\x01R`D\x82\x01R`\x80`d\x82\x01R_`\x84\x82\x01R`\xA4\x01a\x19+V[_\x84`\x03\x81\x11\x15a\x1A\x1CWa\x1A\x1Ca'\x91V[\x03a\x1A\xD6W` \x82\x01Q\x15a\x1ACW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x03\xF9\x90a(<V[\x81Q`\x01`\x01`\xA0\x1B\x03\x16c\xA9\x05\x9C\xBBa\x1Ac`@\x88\x01` \x89\x01a\"\x92V[`@\x80Q`\x01`\x01`\xE0\x1B\x03\x19`\xE0\x85\x90\x1B\x16\x81R`\x01`\x01`\xA0\x1B\x03\x90\x92\x16`\x04\x83\x01R\x88\x015`$\x82\x01R`D\x01` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x1A\xAFW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1A\xD3\x91\x90a%\x16V[\x90P[\x80\x15a\x18\xC0WPP_\x90\x81R`\x05` R`@\x90 \x80T`\xFF\x19\x16\x90UPPV[``\x81\x81\x01Q\x80\x82\x01Q` \x80\x85\x01Q\x80Q\x81\x83\x01Q`@\x80\x84\x01Q\x93\x88\x01Q\x81\x8A\x01Q\x80Q\x81\x88\x01Q\x82\x85\x01Q\x92\x8C\x01Q\x8BQ\x8A\x8D\x01Q\x9C\x87\x01Q\x87Q\x9B\x8C\x01\x99\x90\x99R\x8A\x87\x01\x97\x90\x97R\x9B\x89\x01\x97\x90\x97R`\x80\x88\x01\x92\x90\x92R`\xA0\x87\x01\x91\x90\x91R`\xC0\x86\x01\x94\x90\x94R`\xE0\x85\x01\x93\x90\x93Ra\x01\0\x84\x01\x96\x90\x96Ra\x01 \x83\x01\x95\x90\x95Ra\x01@\x82\x01\x93\x90\x93Ra\x01`\x81\x01\x93\x90\x93R`\x01`\x01`\xFF\x1B\x03\x16a\x01\x80\x80\x84\x01\x82\x90R\x82Q\x80\x85\x03\x90\x91\x01\x81Ra\x01\xA0\x90\x93\x01\x90\x91R_\x91a\x1B\xBE\x81a\x1B\xC6V[\x94\x93PPPPV[_`@Q` \x81\x84Q` \x86\x01`\x02Z\xFAa\x1B\xDFW__\xFD[Q`\x04\x1C\x92\x91PPV[_\x80\x80a\x1B\xF9`\x80\x86\x01\x86a(\xADV[a\x1C\x07\x91` \x91_\x91a(\xEFV[\x81\x01\x90a\x1C\x14\x91\x90a)\x16V[\x90P\x80_a\x1C%`\x80\x88\x01\x88a(\xADV[a\x1C4\x91`@\x91` \x91a(\xEFV[\x81\x01\x90a\x1CA\x91\x90a)\x16V[\x90P_a\x1CQ`\x80\x89\x01\x89a(\xADV[a\x1C`\x91``\x91`@\x91a(\xEFV[\x81\x01\x90a\x1Cm\x91\x90a)\x16V[\x90P_a\x1C}`\x80\x8A\x01\x8Aa(\xADV[a\x1C\x8C\x91`\x80\x91``\x91a(\xEFV[\x81\x01\x90a\x1C\x99\x91\x90a)\x16V[\x90P_a\x1C\xA9`\x80\x8B\x01\x8Ba(\xADV[a\x1C\xB8\x91`\xA0\x91`\x80\x91a(\xEFV[\x81\x01\x90a\x1C\xC5\x91\x90a)\x16V[\x90P_a\x1C\xD5`\x80\x8C\x01\x8Ca(\xADV[a\x1C\xE4\x91`\xC0\x91`\xA0\x91a(\xEFV[\x81\x01\x90a\x1C\xF1\x91\x90a)\x16V[\x90P_a\x1D\x01`\x80\x8D\x01\x8Da(\xADV[a\x1D\x10\x91`\xE0\x91`\xC0\x91a(\xEFV[\x81\x01\x90a\x1D\x1D\x91\x90a)\x16V[\x90P_a\x1D-`\x80\x8E\x01\x8Ea(\xADV[a\x1D=\x91a\x01\0\x91`\xE0\x91a(\xEFV[\x81\x01\x90a\x1DJ\x91\x90a)\x16V[\x90P_a\x1DZ`\x80\x8F\x01\x8Fa(\xADV[a\x1Dk\x91a\x01 \x91a\x01\0\x91a(\xEFV[\x81\x01\x90a\x1Dx\x91\x90a)\x16V[`@\x80Q`\x10\x80\x82Ra\x02 \x82\x01\x90\x92R\x91\x92P_\x91\x90` \x82\x01a\x02\0\x806\x837\x01\x90PP\x90P\x8A\x81_\x81Q\x81\x10a\x1D\xB3Wa\x1D\xB3a&ZV[` \x02` \x01\x01\x81\x81RPP\x8D_\x1B\x81`\x01\x81Q\x81\x10a\x1D\xD5Wa\x1D\xD5a&ZV[` \x02` \x01\x01\x81\x81RPP`\x07T_\x1B\x81`\x02\x81Q\x81\x10a\x1D\xF9Wa\x1D\xF9a&ZV[` \x90\x81\x02\x91\x90\x91\x01\x01R\x80Q\x8F5\x90\x82\x90`\x03\x90\x81\x10a\x1E\x1CWa\x1E\x1Ca&ZV[` \x02` \x01\x01\x81\x81RPP`\x08T_\x1B\x81`\x04\x81Q\x81\x10a\x1E@Wa\x1E@a&ZV[` \x02` \x01\x01\x81\x81RPP\x8E` \x015_\x1B\x81`\x05\x81Q\x81\x10a\x1EfWa\x1Efa&ZV[` \x02` \x01\x01\x81\x81RPP`\tT_\x1B\x81`\x06\x81Q\x81\x10a\x1E\x8AWa\x1E\x8Aa&ZV[` \x02` \x01\x01\x81\x81RPP\x8E`@\x015_\x1B\x81`\x07\x81Q\x81\x10a\x1E\xB0Wa\x1E\xB0a&ZV[` \x02` \x01\x01\x81\x81RPP\x88\x81`\x08\x81Q\x81\x10a\x1E\xD0Wa\x1E\xD0a&ZV[` \x02` \x01\x01\x81\x81RPP\x87\x81`\t\x81Q\x81\x10a\x1E\xF0Wa\x1E\xF0a&ZV[` \x02` \x01\x01\x81\x81RPP\x86\x81`\n\x81Q\x81\x10a\x1F\x10Wa\x1F\x10a&ZV[` \x02` \x01\x01\x81\x81RPP\x85\x81`\x0B\x81Q\x81\x10a\x1F0Wa\x1F0a&ZV[` \x02` \x01\x01\x81\x81RPP\x84\x81`\x0C\x81Q\x81\x10a\x1FPWa\x1FPa&ZV[` \x02` \x01\x01\x81\x81RPP\x83\x81`\r\x81Q\x81\x10a\x1FpWa\x1Fpa&ZV[` \x02` \x01\x01\x81\x81RPP\x82\x81`\x0E\x81Q\x81\x10a\x1F\x90Wa\x1F\x90a&ZV[` \x02` \x01\x01\x81\x81RPP\x81\x81`\x0F\x81Q\x81\x10a\x1F\xB0Wa\x1F\xB0a&ZV[` \x02` \x01\x01\x81\x81RPP_\x8F\x80`\x80\x01\x90a\x1F\xCD\x91\x90a(\xADV[a\x1F\xDC\x91a\x01 \x90\x82\x90a(\xEFV[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`\x0BT`@Qc:\x9449`\xE2\x1B\x81R\x93\x94P`\x01`\x01`\xA0\x1B\x03\x16\x92c\xEAP\xD0\xE4\x92Pa B\x91P\x84\x90\x86\x90`\x04\x01a)-V[` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a ]W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a \x81\x91\x90a%\x16V[\x9DP\x99\x9BPPPPPPPPPPPP[\x92P\x92\x90PV[`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a \xADW__\xFD[PV[__\x83`\x1F\x84\x01\x12a \xC0W__\xFD[P\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a \xD6W__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a \x92W__\xFD[______`\xA0\x87\x89\x03\x12\x15a!\x02W__\xFD[\x865a!\r\x81a \x99V[\x95P` \x87\x015\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a!<W__\xFD[a!H\x89\x82\x8A\x01a \xB0V[\x97\x9A\x96\x99P\x94\x97P\x92\x95\x93\x94\x92PPPV[_` \x82\x84\x03\x12\x15a!jW__\xFD[\x815`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a!\x81W__\xFD[\x93\x92PPPV[_____`\x80\x86\x88\x03\x12\x15a!\x9CW__\xFD[\x855a!\xA7\x81a \x99V[\x94P` \x86\x015a!\xB7\x81a \x99V[\x93P`@\x86\x015\x92P``\x86\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a!\xD8W__\xFD[a!\xE4\x88\x82\x89\x01a \xB0V[\x96\x99\x95\x98P\x93\x96P\x92\x94\x93\x92PPPV[_`\x80\x82\x84\x03\x12\x15a\"\x05W__\xFD[P\x91\x90PV[_`\x80\x82\x84\x03\x12\x15a\"\x1BW__\xFD[a!\x81\x83\x83a!\xF5V[__`@\x83\x85\x03\x12\x15a\"6W__\xFD[\x825a\"A\x81a \x99V[\x91P` \x83\x015a\"Q\x81a \x99V[\x80\x91PP\x92P\x92\x90PV[_` \x82\x84\x03\x12\x15a\"lW__\xFD[\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a\"\x81W__\xFD[\x82\x01`\xA0\x81\x85\x03\x12\x15a!\x81W__\xFD[_` \x82\x84\x03\x12\x15a\"\xA2W__\xFD[\x815a!\x81\x81a \x99V[__\x83`\x1F\x84\x01\x12a\"\xBDW__\xFD[P\x815`\x01`\x01`@\x1B\x03\x81\x11\x15a\"\xD3W__\xFD[` \x83\x01\x91P\x83` \x82`\x05\x1B\x85\x01\x01\x11\x15a \x92W__\xFD[________`\xA0\x89\x8B\x03\x12\x15a#\x04W__\xFD[\x885a#\x0F\x81a \x99V[\x97P` \x89\x015a#\x1F\x81a \x99V[\x96P`@\x89\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a#9W__\xFD[a#E\x8B\x82\x8C\x01a\"\xADV[\x90\x97P\x95PP``\x89\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a#cW__\xFD[a#o\x8B\x82\x8C\x01a\"\xADV[\x90\x95P\x93PP`\x80\x89\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a#\x8DW__\xFD[a#\x99\x8B\x82\x8C\x01a \xB0V[\x99\x9C\x98\x9BP\x96\x99P\x94\x97\x93\x96\x92\x95\x94PPPV[\x805`\x04\x81\x10a#\xBBW__\xFD[\x91\x90PV[______`\xC0\x87\x89\x03\x12\x15a#\xD5W__\xFD[\x865\x95P` \x87\x015a#\xE7\x81a \x99V[\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015\x91Pa$\n`\xA0\x88\x01a#\xADV[\x90P\x92\x95P\x92\x95P\x92\x95V[______`\xA0\x87\x89\x03\x12\x15a$+W__\xFD[\x865a$6\x81a \x99V[\x95P` \x87\x015a$F\x81a \x99V[\x94P`@\x87\x015\x93P``\x87\x015\x92P`\x80\x87\x015`\x01`\x01`@\x1B\x03\x81\x11\x15a!<W__\xFD[__`\xA0\x83\x85\x03\x12\x15a$\x7FW__\xFD[a$\x89\x84\x84a!\xF5V[\x91Pa$\x97`\x80\x84\x01a#\xADV[\x90P\x92P\x92\x90PV[\x815\x81R`\x80\x81\x01` \x83\x015a$\xB6\x81a \x99V[`\x01`\x01`\xA0\x1B\x03\x16` \x83\x01R`@\x83\x81\x015\x90\x83\x01R``\x92\x83\x015\x92\x90\x91\x01\x91\x90\x91R\x90V[` \x80\x82R`\x17\x90\x82\x01R\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a%&W__\xFD[\x81Q\x80\x15\x15\x81\x14a!\x81W__\xFD[` \x80\x82R`=\x90\x82\x01R\x7FCertified: You are not authorise`@\x82\x01R\x7Fd to transact using Nightfall\0\0\0``\x82\x01R`\x80\x01\x90V[` \x80\x82R`4\x90\x82\x01R\x7FCertified: You are on the Chaina`@\x82\x01Rs\x1B\x1E\\\xDA\\\xC8\x1C\xD8[\x98\xDD\x1A[\xDB\x9C\xC8\x1B\x1A\\\xDD`b\x1B``\x82\x01R`\x80\x01\x90V[_` \x82\x84\x03\x12\x15a%\xF6W__\xFD[\x81Qa!\x81\x81a \x99V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__\x835`\x1E\x19\x846\x03\x01\x81\x12a&*W__\xFD[\x83\x01\x805\x91P`\x01`\x01`@\x1B\x03\x82\x11\x15a&CW__\xFD[` \x01\x91Pa\x01\xA0\x81\x026\x03\x82\x13\x15a \x92W__\xFD[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[`@Q`\x80\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a&\x9CWcNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@R\x90V[_\x82`\x1F\x83\x01\x12a&\xB1W__\xFD[a&\xB9a&nV[\x80`\x80\x84\x01\x85\x81\x11\x15a&\xCAW__\xFD[\x84[\x81\x81\x10\x15a&\xE4W\x805\x84R` \x93\x84\x01\x93\x01a&\xCCV[P\x90\x95\x94PPPPPV[_a\x01\xA0\x82\x84\x03\x12\x80\x15a'\x01W__\xFD[Pa'\na&nV[\x825\x81Ra'\x1B\x84` \x85\x01a&\xA2V[` \x82\x01Ra'-\x84`\xA0\x85\x01a&\xA2V[`@\x82\x01Ra'@\x84a\x01 \x85\x01a&\xA2V[``\x82\x01R\x93\x92PPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x80\x82\x01\x80\x82\x11\x15a\x03\x88Wa\x03\x88a'LV[_`\x01`\x01`\xFF\x1B\x01\x82\x01a'\x8AWa'\x8Aa'LV[P`\x01\x01\x90V[cNH{q`\xE0\x1B_R`!`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a'\xB5W__\xFD[PQ\x91\x90PV[`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x81R\x92\x90\x93\x16` \x83\x01R`@\x82\x01R``\x81\x01\x91\x90\x91R`\xA0`\x80\x82\x01\x81\x90R_\x90\x82\x01R`\xC0\x01\x90V[` \x80\x82R`)\x90\x82\x01R\x7FERC721 tokens should have a valu`@\x82\x01Rhe of zero`\xB8\x1B``\x82\x01R`\x80\x01\x90V[` \x80\x82R`'\x90\x82\x01R\x7FERC20 tokens should have a token`@\x82\x01Rf\x04\x96B\x06\xF6b\x03`\xCC\x1B``\x82\x01R`\x80\x01\x90V[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x03\x88Wa\x03\x88a'LV[\x81\x81\x03\x81\x81\x11\x15a\x03\x88Wa\x03\x88a'LV[__\x835`\x1E\x19\x846\x03\x01\x81\x12a(\xC2W__\xFD[\x83\x01\x805\x91P`\x01`\x01`@\x1B\x03\x82\x11\x15a(\xDBW__\xFD[` \x01\x91P6\x81\x90\x03\x82\x13\x15a \x92W__\xFD[__\x85\x85\x11\x15a(\xFDW__\xFD[\x83\x86\x11\x15a)\tW__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV[_` \x82\x84\x03\x12\x15a)&W__\xFD[P5\x91\x90PV[`@\x81R_\x83Q\x80`@\x84\x01R\x80` \x86\x01``\x85\x01^_``\x82\x85\x01\x01R`\x1F\x19`\x1F\x82\x01\x16\x83\x01\x90P``\x81\x01``\x84\x83\x03\x01` \x85\x01R\x80\x85Q\x80\x83R`\x80\x84\x01\x91P` \x87\x01\x93P_\x92P[\x80\x83\x10\x15a)\xA0W\x83Q\x82R` \x82\x01\x91P` \x84\x01\x93P`\x01\x83\x01\x92Pa)}V[P\x96\x95PPPPPPV\xFE\xA2dipfsX\"\x12 B\xF5o\x1B\xF5\x1D\x8D\\\xD6\xCD\xE7\x96U.W\xB8\xCD\x15\x06\x9E`\xD8\x90p\xDD&\xB3\xA1\x8E\xD7n\x90dsolcC\0\x08\x1C\x003",
    );
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct TokenType(u8);
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<TokenType> for u8 {
            #[inline]
            fn stv_to_tokens(
                &self,
            ) -> <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'_> {
                alloy_sol_types::private::SolTypeValue::<
                    alloy::sol_types::sol_data::Uint<8>,
                >::stv_to_tokens(self)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::tokenize(self)
                    .0
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(self, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::abi_encoded_size(self)
            }
        }
        #[automatically_derived]
        impl TokenType {
            /// The Solidity type name.
            pub const NAME: &'static str = stringify!(@ name);
            /// Convert from the underlying value type.
            #[inline]
            pub const fn from(value: u8) -> Self {
                Self(value)
            }
            /// Return the underlying value.
            #[inline]
            pub const fn into(self) -> u8 {
                self.0
            }
            /// Return the single encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode(&self.0)
            }
            /// Return the packed encoding of this value, delegating to the
            /// underlying type.
            #[inline]
            pub fn abi_encode_packed(&self) -> alloy_sol_types::private::Vec<u8> {
                <Self as alloy_sol_types::SolType>::abi_encode_packed(&self.0)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for TokenType {
            type RustType = u8;
            type Token<'a> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = Self::NAME;
            const ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <alloy::sol_types::sol_data::Uint<
                8,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                Self::type_check(token).is_ok()
            }
            #[inline]
            fn type_check(token: &Self::Token<'_>) -> alloy_sol_types::Result<()> {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::type_check(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::SolType>::detokenize(token)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for TokenType {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::topic_preimage_length(rust)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(rust, out)
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                <alloy::sol_types::sol_data::Uint<
                    8,
                > as alloy_sol_types::EventTopic>::encode_topic(rust)
            }
        }
    };
    /**```solidity
struct Block { uint256 commitments_root; uint256 nullifier_root; uint256 commitments_root_root; OnChainTransaction[] transactions; bytes rollup_proof; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Block {
        pub commitments_root: alloy::sol_types::private::primitives::aliases::U256,
        pub nullifier_root: alloy::sol_types::private::primitives::aliases::U256,
        pub commitments_root_root: alloy::sol_types::private::primitives::aliases::U256,
        pub transactions: alloy::sol_types::private::Vec<
            <OnChainTransaction as alloy::sol_types::SolType>::RustType,
        >,
        pub rollup_proof: alloy::sol_types::private::Bytes,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Array<OnChainTransaction>,
            alloy::sol_types::sol_data::Bytes,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Vec<
                <OnChainTransaction as alloy::sol_types::SolType>::RustType,
            >,
            alloy::sol_types::private::Bytes,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Block> for UnderlyingRustTuple<'_> {
            fn from(value: Block) -> Self {
                (
                    value.commitments_root,
                    value.nullifier_root,
                    value.commitments_root_root,
                    value.transactions,
                    value.rollup_proof,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Block {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    commitments_root: tuple.0,
                    nullifier_root: tuple.1,
                    commitments_root_root: tuple.2,
                    transactions: tuple.3,
                    rollup_proof: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Block {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Block {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.commitments_root),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nullifier_root),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(
                        &self.commitments_root_root,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        OnChainTransaction,
                    > as alloy_sol_types::SolType>::tokenize(&self.transactions),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.rollup_proof,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Block {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Block {
            const NAME: &'static str = "Block";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Block(uint256 commitments_root,uint256 nullifier_root,uint256 commitments_root_root,OnChainTransaction[] transactions,bytes rollup_proof)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components
                    .push(
                        <OnChainTransaction as alloy_sol_types::SolStruct>::eip712_root_type(),
                    );
                components
                    .extend(
                        <OnChainTransaction as alloy_sol_types::SolStruct>::eip712_components(),
                    );
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.commitments_root,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.nullifier_root,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.commitments_root_root,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Array<
                        OnChainTransaction,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.transactions)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.rollup_proof,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Block {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.commitments_root,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.nullifier_root,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.commitments_root_root,
                    )
                    + <alloy::sol_types::sol_data::Array<
                        OnChainTransaction,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.transactions,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.rollup_proof,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.commitments_root,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nullifier_root,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.commitments_root_root,
                    out,
                );
                <alloy::sol_types::sol_data::Array<
                    OnChainTransaction,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.transactions,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.rollup_proof,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct OnChainTransaction { uint256 fee; uint256[4] commitments; uint256[4] nullifiers; uint256[4] public_data; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct OnChainTransaction {
        pub fee: alloy::sol_types::private::primitives::aliases::U256,
        pub commitments: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
        pub nullifiers: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
        pub public_data: [alloy::sol_types::private::primitives::aliases::U256; 4usize],
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<256>,
                4usize,
            >,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<256>,
                4usize,
            >,
            alloy::sol_types::sol_data::FixedArray<
                alloy::sol_types::sol_data::Uint<256>,
                4usize,
            >,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            [alloy::sol_types::private::primitives::aliases::U256; 4usize],
            [alloy::sol_types::private::primitives::aliases::U256; 4usize],
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<OnChainTransaction> for UnderlyingRustTuple<'_> {
            fn from(value: OnChainTransaction) -> Self {
                (value.fee, value.commitments, value.nullifiers, value.public_data)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for OnChainTransaction {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    fee: tuple.0,
                    commitments: tuple.1,
                    nullifiers: tuple.2,
                    public_data: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for OnChainTransaction {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for OnChainTransaction {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.commitments),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.nullifiers),
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::tokenize(&self.public_data),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for OnChainTransaction {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for OnChainTransaction {
            const NAME: &'static str = "OnChainTransaction";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "OnChainTransaction(uint256 fee,uint256[4] commitments,uint256[4] nullifiers,uint256[4] public_data)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.fee)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.commitments)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.nullifiers)
                        .0,
                    <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.public_data)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for OnChainTransaction {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.fee)
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.commitments,
                    )
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.nullifiers,
                    )
                    + <alloy::sol_types::sol_data::FixedArray<
                        alloy::sol_types::sol_data::Uint<256>,
                        4usize,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.public_data,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(&rust.fee, out);
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.commitments,
                    out,
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nullifiers,
                    out,
                );
                <alloy::sol_types::sol_data::FixedArray<
                    alloy::sol_types::sol_data::Uint<256>,
                    4usize,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.public_data,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct WithdrawData { uint256 nf_token_id; address recipient_address; uint256 value; uint256 withdraw_fund_salt; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct WithdrawData {
        pub nf_token_id: alloy::sol_types::private::primitives::aliases::U256,
        pub recipient_address: alloy::sol_types::private::Address,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub withdraw_fund_salt: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<WithdrawData> for UnderlyingRustTuple<'_> {
            fn from(value: WithdrawData) -> Self {
                (
                    value.nf_token_id,
                    value.recipient_address,
                    value.value,
                    value.withdraw_fund_salt,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for WithdrawData {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    nf_token_id: tuple.0,
                    recipient_address: tuple.1,
                    value: tuple.2,
                    withdraw_fund_salt: tuple.3,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for WithdrawData {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for WithdrawData {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nf_token_id),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.recipient_address,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.withdraw_fund_salt),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for WithdrawData {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for WithdrawData {
            const NAME: &'static str = "WithdrawData";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "WithdrawData(uint256 nf_token_id,address recipient_address,uint256 value,uint256 withdraw_fund_salt)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.nf_token_id)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.recipient_address,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.value)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(
                            &self.withdraw_fund_salt,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for WithdrawData {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.nf_token_id,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.recipient_address,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.value)
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.withdraw_fund_salt,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.nf_token_id,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.recipient_address,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.withdraw_fund_salt,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Custom error with signature `escrowFundsError()` and selector `0xafa905dd`.
```solidity
error escrowFundsError();
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct escrowFundsError {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = ();
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = ();
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<escrowFundsError> for UnderlyingRustTuple<'_> {
            fn from(value: escrowFundsError) -> Self {
                ()
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for escrowFundsError {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {}
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for escrowFundsError {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "escrowFundsError()";
            const SELECTOR: [u8; 4] = [175u8, 169u8, 5u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
        }
    };
    /**Event with signature `BlockProposed(int256)` and selector `0x46bf148827a74eb5c7ca85b1051331f7e07c6b512300580c47bf1dd646c1d895`.
```solidity
event BlockProposed(int256 layer2_block_number);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct BlockProposed {
        #[allow(missing_docs)]
        pub layer2_block_number: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for BlockProposed {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "BlockProposed(int256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                70u8,
                191u8,
                20u8,
                136u8,
                39u8,
                167u8,
                78u8,
                181u8,
                199u8,
                202u8,
                133u8,
                177u8,
                5u8,
                19u8,
                49u8,
                247u8,
                224u8,
                124u8,
                107u8,
                81u8,
                35u8,
                0u8,
                88u8,
                12u8,
                71u8,
                191u8,
                29u8,
                214u8,
                70u8,
                193u8,
                216u8,
                149u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    layer2_block_number: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Int<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.layer2_block_number),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for BlockProposed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&BlockProposed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &BlockProposed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `DepositEscrowed(uint256,uint256)` and selector `0x354729b3585ac9518a7659e8b3323389f148a753e8c3c5d8c01bfe09bc009340`.
```solidity
event DepositEscrowed(uint256 nfSlotId, uint256 value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct DepositEscrowed {
        #[allow(missing_docs)]
        pub nfSlotId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for DepositEscrowed {
            type DataTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "DepositEscrowed(uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                53u8,
                71u8,
                41u8,
                179u8,
                88u8,
                90u8,
                201u8,
                81u8,
                138u8,
                118u8,
                89u8,
                232u8,
                179u8,
                50u8,
                51u8,
                137u8,
                241u8,
                72u8,
                167u8,
                83u8,
                232u8,
                195u8,
                197u8,
                216u8,
                192u8,
                27u8,
                254u8,
                9u8,
                188u8,
                0u8,
                147u8,
                64u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    nfSlotId: data.0,
                    value: data.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.nfSlotId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for DepositEscrowed {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&DepositEscrowed> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &DepositEscrowed) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address addr_verifier, address x509_address, address sanctionsListAddress);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub addr_verifier: alloy::sol_types::private::Address,
        pub x509_address: alloy::sol_types::private::Address,
        pub sanctionsListAddress: alloy::sol_types::private::Address,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.addr_verifier, value.x509_address, value.sanctionsListAddress)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        addr_verifier: tuple.0,
                        x509_address: tuple.1,
                        sanctionsListAddress: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr_verifier,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.x509_address,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sanctionsListAddress,
                    ),
                )
            }
        }
    };
    /**Function with signature `descrow_funds((uint256,address,uint256,uint256),uint8)` and selector `0xf3b85fc2`.
```solidity
function descrow_funds(WithdrawData memory data, TokenType token_type) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct descrow_fundsCall {
        pub data: <WithdrawData as alloy::sol_types::SolType>::RustType,
        pub token_type: <TokenType as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`descrow_funds((uint256,address,uint256,uint256),uint8)`](descrow_fundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct descrow_fundsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (WithdrawData, TokenType);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <WithdrawData as alloy::sol_types::SolType>::RustType,
                <TokenType as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<descrow_fundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: descrow_fundsCall) -> Self {
                    (value.data, value.token_type)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for descrow_fundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        data: tuple.0,
                        token_type: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<descrow_fundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: descrow_fundsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for descrow_fundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for descrow_fundsCall {
            type Parameters<'a> = (WithdrawData, TokenType);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = descrow_fundsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "descrow_funds((uint256,address,uint256,uint256),uint8)";
            const SELECTOR: [u8; 4] = [243u8, 184u8, 95u8, 194u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <WithdrawData as alloy_sol_types::SolType>::tokenize(&self.data),
                    <TokenType as alloy_sol_types::SolType>::tokenize(&self.token_type),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `escrow_funds(uint256,address,uint256,uint256,uint256,uint8)` and selector `0xe6d5abe5`.
```solidity
function escrow_funds(uint256 fee, address ercAddress, uint256 tokenId, uint256 value, uint256 secretHash, TokenType token_type) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct escrow_fundsCall {
        pub fee: alloy::sol_types::private::primitives::aliases::U256,
        pub ercAddress: alloy::sol_types::private::Address,
        pub tokenId: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub secretHash: alloy::sol_types::private::primitives::aliases::U256,
        pub token_type: <TokenType as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`escrow_funds(uint256,address,uint256,uint256,uint256,uint8)`](escrow_fundsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct escrow_fundsReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                TokenType,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                <TokenType as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<escrow_fundsCall> for UnderlyingRustTuple<'_> {
                fn from(value: escrow_fundsCall) -> Self {
                    (
                        value.fee,
                        value.ercAddress,
                        value.tokenId,
                        value.value,
                        value.secretHash,
                        value.token_type,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for escrow_fundsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fee: tuple.0,
                        ercAddress: tuple.1,
                        tokenId: tuple.2,
                        value: tuple.3,
                        secretHash: tuple.4,
                        token_type: tuple.5,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<escrow_fundsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: escrow_fundsReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for escrow_fundsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for escrow_fundsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                TokenType,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = escrow_fundsReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "escrow_funds(uint256,address,uint256,uint256,uint256,uint8)";
            const SELECTOR: [u8; 4] = [230u8, 213u8, 171u8, 229u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.fee),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.ercAddress,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.secretHash),
                    <TokenType as alloy_sol_types::SolType>::tokenize(&self.token_type),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `layer2_block_number()` and selector `0x28c3d7e6`.
```solidity
function layer2_block_number() external view returns (int256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct layer2_block_numberCall {}
    ///Container type for the return parameters of the [`layer2_block_number()`](layer2_block_numberCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct layer2_block_numberReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<layer2_block_numberCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: layer2_block_numberCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for layer2_block_numberCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<layer2_block_numberReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: layer2_block_numberReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for layer2_block_numberReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for layer2_block_numberCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = layer2_block_numberReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "layer2_block_number()";
            const SELECTOR: [u8; 4] = [40u8, 195u8, 215u8, 230u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)` and selector `0xbc197c81`.
```solidity
function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) external pure returns (bytes4);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC1155BatchReceivedCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::Address,
        pub _2: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        pub _3: alloy::sol_types::private::Vec<
            alloy::sol_types::private::primitives::aliases::U256,
        >,
        pub _4: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)`](onERC1155BatchReceivedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC1155BatchReceivedReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Vec<
                    alloy::sol_types::private::primitives::aliases::U256,
                >,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC1155BatchReceivedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC1155BatchReceivedCall) -> Self {
                    (value._0, value._1, value._2, value._3, value._4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC1155BatchReceivedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                        _4: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC1155BatchReceivedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC1155BatchReceivedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC1155BatchReceivedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for onERC1155BatchReceivedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Array<alloy::sol_types::sol_data::Uint<256>>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = onERC1155BatchReceivedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)";
            const SELECTOR: [u8; 4] = [188u8, 25u8, 124u8, 129u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self._2),
                    <alloy::sol_types::sol_data::Array<
                        alloy::sol_types::sol_data::Uint<256>,
                    > as alloy_sol_types::SolType>::tokenize(&self._3),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `onERC1155Received(address,address,uint256,uint256,bytes)` and selector `0xf23a6e61`.
```solidity
function onERC1155Received(address, address, uint256, uint256, bytes memory) external pure returns (bytes4);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC1155ReceivedCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::Address,
        pub _2: alloy::sol_types::private::primitives::aliases::U256,
        pub _3: alloy::sol_types::private::primitives::aliases::U256,
        pub _4: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`onERC1155Received(address,address,uint256,uint256,bytes)`](onERC1155ReceivedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC1155ReceivedReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC1155ReceivedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC1155ReceivedCall) -> Self {
                    (value._0, value._1, value._2, value._3, value._4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC1155ReceivedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                        _4: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC1155ReceivedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC1155ReceivedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC1155ReceivedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for onERC1155ReceivedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = onERC1155ReceivedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "onERC1155Received(address,address,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [242u8, 58u8, 110u8, 97u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._2),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._3),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `onERC3525Received(address,uint256,uint256,uint256,bytes)` and selector `0x009ce20b`.
```solidity
function onERC3525Received(address, uint256, uint256, uint256, bytes memory) external pure returns (bytes4);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC3525ReceivedCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::primitives::aliases::U256,
        pub _2: alloy::sol_types::private::primitives::aliases::U256,
        pub _3: alloy::sol_types::private::primitives::aliases::U256,
        pub _4: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`onERC3525Received(address,uint256,uint256,uint256,bytes)`](onERC3525ReceivedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC3525ReceivedReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC3525ReceivedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC3525ReceivedCall) -> Self {
                    (value._0, value._1, value._2, value._3, value._4)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC3525ReceivedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                        _4: tuple.4,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC3525ReceivedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC3525ReceivedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC3525ReceivedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for onERC3525ReceivedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = onERC3525ReceivedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "onERC3525Received(address,uint256,uint256,uint256,bytes)";
            const SELECTOR: [u8; 4] = [0u8, 156u8, 226u8, 11u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._1),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._2),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._3),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._4,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `onERC721Received(address,address,uint256,bytes)` and selector `0x150b7a02`.
```solidity
function onERC721Received(address, address, uint256, bytes memory) external pure returns (bytes4);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC721ReceivedCall {
        pub _0: alloy::sol_types::private::Address,
        pub _1: alloy::sol_types::private::Address,
        pub _2: alloy::sol_types::private::primitives::aliases::U256,
        pub _3: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`onERC721Received(address,address,uint256,bytes)`](onERC721ReceivedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct onERC721ReceivedReturn {
        pub _0: alloy::sol_types::private::FixedBytes<4>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC721ReceivedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC721ReceivedCall) -> Self {
                    (value._0, value._1, value._2, value._3)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC721ReceivedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        _0: tuple.0,
                        _1: tuple.1,
                        _2: tuple.2,
                        _3: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<onERC721ReceivedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: onERC721ReceivedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for onERC721ReceivedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for onERC721ReceivedCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = onERC721ReceivedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "onERC721Received(address,address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [21u8, 11u8, 122u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._1,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._2),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self._3,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `propose_block((uint256,uint256,uint256,(uint256,uint256[4],uint256[4],uint256[4])[],bytes))` and selector `0x75137875`.
```solidity
function propose_block(Block memory blk) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct propose_blockCall {
        pub blk: <Block as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`propose_block((uint256,uint256,uint256,(uint256,uint256[4],uint256[4],uint256[4])[],bytes))`](propose_blockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct propose_blockReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (Block,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <Block as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<propose_blockCall> for UnderlyingRustTuple<'_> {
                fn from(value: propose_blockCall) -> Self {
                    (value.blk,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for propose_blockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { blk: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<propose_blockReturn> for UnderlyingRustTuple<'_> {
                fn from(value: propose_blockReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for propose_blockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for propose_blockCall {
            type Parameters<'a> = (Block,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = propose_blockReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "propose_block((uint256,uint256,uint256,(uint256,uint256[4],uint256[4],uint256[4])[],bytes))";
            const SELECTOR: [u8; 4] = [117u8, 19u8, 120u8, 117u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<Block as alloy_sol_types::SolType>::tokenize(&self.blk),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAuthorities(address,address)` and selector `0x4a8a4073`.
```solidity
function setAuthorities(address sanctionsListAddress, address x509Address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAuthoritiesCall {
        pub sanctionsListAddress: alloy::sol_types::private::Address,
        pub x509Address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setAuthorities(address,address)`](setAuthoritiesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAuthoritiesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAuthoritiesCall> for UnderlyingRustTuple<'_> {
                fn from(value: setAuthoritiesCall) -> Self {
                    (value.sanctionsListAddress, value.x509Address)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setAuthoritiesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sanctionsListAddress: tuple.0,
                        x509Address: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAuthoritiesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAuthoritiesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAuthoritiesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAuthoritiesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAuthoritiesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAuthorities(address,address)";
            const SELECTOR: [u8; 4] = [74u8, 138u8, 64u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sanctionsListAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.x509Address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set_proposer_manager(address)` and selector `0xe3178c86`.
```solidity
function set_proposer_manager(address proposer_manager_address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_proposer_managerCall {
        pub proposer_manager_address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`set_proposer_manager(address)`](set_proposer_managerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_proposer_managerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_proposer_managerCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_proposer_managerCall) -> Self {
                    (value.proposer_manager_address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_proposer_managerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        proposer_manager_address: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_proposer_managerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_proposer_managerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_proposer_managerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for set_proposer_managerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = set_proposer_managerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set_proposer_manager(address)";
            const SELECTOR: [u8; 4] = [227u8, 23u8, 140u8, 134u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.proposer_manager_address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set_sanctions_list(address)` and selector `0x97e20d0e`.
```solidity
function set_sanctions_list(address sanctionsListAddress) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_sanctions_listCall {
        pub sanctionsListAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`set_sanctions_list(address)`](set_sanctions_listCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_sanctions_listReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_sanctions_listCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_sanctions_listCall) -> Self {
                    (value.sanctionsListAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_sanctions_listCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sanctionsListAddress: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_sanctions_listReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_sanctions_listReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_sanctions_listReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for set_sanctions_listCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = set_sanctions_listReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set_sanctions_list(address)";
            const SELECTOR: [u8; 4] = [151u8, 226u8, 13u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sanctionsListAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set_x509_address(address)` and selector `0xd5e6c6f9`.
```solidity
function set_x509_address(address x509_address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_x509_addressCall {
        pub x509_address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`set_x509_address(address)`](set_x509_addressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_x509_addressReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_x509_addressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_x509_addressCall) -> Self {
                    (value.x509_address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_x509_addressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x509_address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_x509_addressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_x509_addressReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_x509_addressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for set_x509_addressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = set_x509_addressReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set_x509_address(address)";
            const SELECTOR: [u8; 4] = [213u8, 230u8, 198u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.x509_address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external pure returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdraw_processed((uint256,address,uint256,uint256))` and selector `0x186a4d08`.
```solidity
function withdraw_processed(WithdrawData memory data) external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdraw_processedCall {
        pub data: <WithdrawData as alloy::sol_types::SolType>::RustType,
    }
    ///Container type for the return parameters of the [`withdraw_processed((uint256,address,uint256,uint256))`](withdraw_processedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdraw_processedReturn {
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (WithdrawData,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                <WithdrawData as alloy::sol_types::SolType>::RustType,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdraw_processedCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdraw_processedCall) -> Self {
                    (value.data,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdraw_processedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { data: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdraw_processedReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: withdraw_processedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for withdraw_processedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdraw_processedCall {
            type Parameters<'a> = (WithdrawData,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdraw_processedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdraw_processed((uint256,address,uint256,uint256))";
            const SELECTOR: [u8; 4] = [24u8, 106u8, 77u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (<WithdrawData as alloy_sol_types::SolType>::tokenize(&self.data),)
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`Nightfall`](self) function calls.
    pub enum NightfallCalls {
        descrow_funds(descrow_fundsCall),
        escrow_funds(escrow_fundsCall),
        layer2_block_number(layer2_block_numberCall),
        onERC1155BatchReceived(onERC1155BatchReceivedCall),
        onERC1155Received(onERC1155ReceivedCall),
        onERC3525Received(onERC3525ReceivedCall),
        onERC721Received(onERC721ReceivedCall),
        owner(ownerCall),
        propose_block(propose_blockCall),
        setAuthorities(setAuthoritiesCall),
        set_proposer_manager(set_proposer_managerCall),
        set_sanctions_list(set_sanctions_listCall),
        set_x509_address(set_x509_addressCall),
        supportsInterface(supportsInterfaceCall),
        withdraw_processed(withdraw_processedCall),
    }
    #[automatically_derived]
    impl NightfallCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [0u8, 156u8, 226u8, 11u8],
            [1u8, 255u8, 201u8, 167u8],
            [21u8, 11u8, 122u8, 2u8],
            [24u8, 106u8, 77u8, 8u8],
            [40u8, 195u8, 215u8, 230u8],
            [74u8, 138u8, 64u8, 115u8],
            [117u8, 19u8, 120u8, 117u8],
            [141u8, 165u8, 203u8, 91u8],
            [151u8, 226u8, 13u8, 14u8],
            [188u8, 25u8, 124u8, 129u8],
            [213u8, 230u8, 198u8, 249u8],
            [227u8, 23u8, 140u8, 134u8],
            [230u8, 213u8, 171u8, 229u8],
            [242u8, 58u8, 110u8, 97u8],
            [243u8, 184u8, 95u8, 194u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for NightfallCalls {
        const NAME: &'static str = "NightfallCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 15usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::descrow_funds(_) => {
                    <descrow_fundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::escrow_funds(_) => {
                    <escrow_fundsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::layer2_block_number(_) => {
                    <layer2_block_numberCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::onERC1155BatchReceived(_) => {
                    <onERC1155BatchReceivedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::onERC1155Received(_) => {
                    <onERC1155ReceivedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::onERC3525Received(_) => {
                    <onERC3525ReceivedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::onERC721Received(_) => {
                    <onERC721ReceivedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::propose_block(_) => {
                    <propose_blockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAuthorities(_) => {
                    <setAuthoritiesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::set_proposer_manager(_) => {
                    <set_proposer_managerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::set_sanctions_list(_) => {
                    <set_sanctions_listCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::set_x509_address(_) => {
                    <set_x509_addressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdraw_processed(_) => {
                    <withdraw_processedCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<NightfallCalls>] = &[
                {
                    fn onERC3525Received(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <onERC3525ReceivedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::onERC3525Received)
                    }
                    onERC3525Received
                },
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn onERC721Received(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <onERC721ReceivedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::onERC721Received)
                    }
                    onERC721Received
                },
                {
                    fn withdraw_processed(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <withdraw_processedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::withdraw_processed)
                    }
                    withdraw_processed
                },
                {
                    fn layer2_block_number(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <layer2_block_numberCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::layer2_block_number)
                    }
                    layer2_block_number
                },
                {
                    fn setAuthorities(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <setAuthoritiesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::setAuthorities)
                    }
                    setAuthorities
                },
                {
                    fn propose_block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <propose_blockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::propose_block)
                    }
                    propose_block
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::owner)
                    }
                    owner
                },
                {
                    fn set_sanctions_list(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <set_sanctions_listCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::set_sanctions_list)
                    }
                    set_sanctions_list
                },
                {
                    fn onERC1155BatchReceived(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <onERC1155BatchReceivedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::onERC1155BatchReceived)
                    }
                    onERC1155BatchReceived
                },
                {
                    fn set_x509_address(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <set_x509_addressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::set_x509_address)
                    }
                    set_x509_address
                },
                {
                    fn set_proposer_manager(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <set_proposer_managerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::set_proposer_manager)
                    }
                    set_proposer_manager
                },
                {
                    fn escrow_funds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <escrow_fundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::escrow_funds)
                    }
                    escrow_funds
                },
                {
                    fn onERC1155Received(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <onERC1155ReceivedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::onERC1155Received)
                    }
                    onERC1155Received
                },
                {
                    fn descrow_funds(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallCalls> {
                        <descrow_fundsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallCalls::descrow_funds)
                    }
                    descrow_funds
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::descrow_funds(inner) => {
                    <descrow_fundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::escrow_funds(inner) => {
                    <escrow_fundsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::layer2_block_number(inner) => {
                    <layer2_block_numberCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::onERC1155BatchReceived(inner) => {
                    <onERC1155BatchReceivedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::onERC1155Received(inner) => {
                    <onERC1155ReceivedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::onERC3525Received(inner) => {
                    <onERC3525ReceivedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::onERC721Received(inner) => {
                    <onERC721ReceivedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::propose_block(inner) => {
                    <propose_blockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAuthorities(inner) => {
                    <setAuthoritiesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::set_proposer_manager(inner) => {
                    <set_proposer_managerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::set_sanctions_list(inner) => {
                    <set_sanctions_listCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::set_x509_address(inner) => {
                    <set_x509_addressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdraw_processed(inner) => {
                    <withdraw_processedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::descrow_funds(inner) => {
                    <descrow_fundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::escrow_funds(inner) => {
                    <escrow_fundsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::layer2_block_number(inner) => {
                    <layer2_block_numberCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::onERC1155BatchReceived(inner) => {
                    <onERC1155BatchReceivedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::onERC1155Received(inner) => {
                    <onERC1155ReceivedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::onERC3525Received(inner) => {
                    <onERC3525ReceivedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::onERC721Received(inner) => {
                    <onERC721ReceivedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::propose_block(inner) => {
                    <propose_blockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAuthorities(inner) => {
                    <setAuthoritiesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::set_proposer_manager(inner) => {
                    <set_proposer_managerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::set_sanctions_list(inner) => {
                    <set_sanctions_listCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::set_x509_address(inner) => {
                    <set_x509_addressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdraw_processed(inner) => {
                    <withdraw_processedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Nightfall`](self) custom errors.
    pub enum NightfallErrors {
        escrowFundsError(escrowFundsError),
    }
    #[automatically_derived]
    impl NightfallErrors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[175u8, 169u8, 5u8, 221u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for NightfallErrors {
        const NAME: &'static str = "NightfallErrors";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::escrowFundsError(_) => {
                    <escrowFundsError as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<NightfallErrors>] = &[
                {
                    fn escrowFundsError(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<NightfallErrors> {
                        <escrowFundsError as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(NightfallErrors::escrowFundsError)
                    }
                    escrowFundsError
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::escrowFundsError(inner) => {
                    <escrowFundsError as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::escrowFundsError(inner) => {
                    <escrowFundsError as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`Nightfall`](self) events.
    pub enum NightfallEvents {
        BlockProposed(BlockProposed),
        DepositEscrowed(DepositEscrowed),
    }
    #[automatically_derived]
    impl NightfallEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                53u8,
                71u8,
                41u8,
                179u8,
                88u8,
                90u8,
                201u8,
                81u8,
                138u8,
                118u8,
                89u8,
                232u8,
                179u8,
                50u8,
                51u8,
                137u8,
                241u8,
                72u8,
                167u8,
                83u8,
                232u8,
                195u8,
                197u8,
                216u8,
                192u8,
                27u8,
                254u8,
                9u8,
                188u8,
                0u8,
                147u8,
                64u8,
            ],
            [
                70u8,
                191u8,
                20u8,
                136u8,
                39u8,
                167u8,
                78u8,
                181u8,
                199u8,
                202u8,
                133u8,
                177u8,
                5u8,
                19u8,
                49u8,
                247u8,
                224u8,
                124u8,
                107u8,
                81u8,
                35u8,
                0u8,
                88u8,
                12u8,
                71u8,
                191u8,
                29u8,
                214u8,
                70u8,
                193u8,
                216u8,
                149u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for NightfallEvents {
        const NAME: &'static str = "NightfallEvents";
        const COUNT: usize = 2usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<BlockProposed as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <BlockProposed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::BlockProposed)
                }
                Some(<DepositEscrowed as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <DepositEscrowed as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::DepositEscrowed)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for NightfallEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BlockProposed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::DepositEscrowed(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::BlockProposed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::DepositEscrowed(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`Nightfall`](self) contract instance.

See the [wrapper's documentation](`NightfallInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> NightfallInstance<T, P, N> {
        NightfallInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        addr_verifier: alloy::sol_types::private::Address,
        x509_address: alloy::sol_types::private::Address,
        sanctionsListAddress: alloy::sol_types::private::Address,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<NightfallInstance<T, P, N>>,
    > {
        NightfallInstance::<
            T,
            P,
            N,
        >::deploy(provider, addr_verifier, x509_address, sanctionsListAddress)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        addr_verifier: alloy::sol_types::private::Address,
        x509_address: alloy::sol_types::private::Address,
        sanctionsListAddress: alloy::sol_types::private::Address,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        NightfallInstance::<
            T,
            P,
            N,
        >::deploy_builder(provider, addr_verifier, x509_address, sanctionsListAddress)
    }
    /**A [`Nightfall`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`Nightfall`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct NightfallInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for NightfallInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("NightfallInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > NightfallInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`Nightfall`](self) contract instance.

See the [wrapper's documentation](`NightfallInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            addr_verifier: alloy::sol_types::private::Address,
            x509_address: alloy::sol_types::private::Address,
            sanctionsListAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::Result<NightfallInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                addr_verifier,
                x509_address,
                sanctionsListAddress,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            addr_verifier: alloy::sol_types::private::Address,
            x509_address: alloy::sol_types::private::Address,
            sanctionsListAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            addr_verifier,
                            x509_address,
                            sanctionsListAddress,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> NightfallInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> NightfallInstance<T, P, N> {
            NightfallInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > NightfallInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`descrow_funds`] function.
        pub fn descrow_funds(
            &self,
            data: <WithdrawData as alloy::sol_types::SolType>::RustType,
            token_type: <TokenType as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, descrow_fundsCall, N> {
            self.call_builder(
                &descrow_fundsCall {
                    data,
                    token_type,
                },
            )
        }
        ///Creates a new call builder for the [`escrow_funds`] function.
        pub fn escrow_funds(
            &self,
            fee: alloy::sol_types::private::primitives::aliases::U256,
            ercAddress: alloy::sol_types::private::Address,
            tokenId: alloy::sol_types::private::primitives::aliases::U256,
            value: alloy::sol_types::private::primitives::aliases::U256,
            secretHash: alloy::sol_types::private::primitives::aliases::U256,
            token_type: <TokenType as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, escrow_fundsCall, N> {
            self.call_builder(
                &escrow_fundsCall {
                    fee,
                    ercAddress,
                    tokenId,
                    value,
                    secretHash,
                    token_type,
                },
            )
        }
        ///Creates a new call builder for the [`layer2_block_number`] function.
        pub fn layer2_block_number(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, layer2_block_numberCall, N> {
            self.call_builder(&layer2_block_numberCall {})
        }
        ///Creates a new call builder for the [`onERC1155BatchReceived`] function.
        pub fn onERC1155BatchReceived(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            _3: alloy::sol_types::private::Vec<
                alloy::sol_types::private::primitives::aliases::U256,
            >,
            _4: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, onERC1155BatchReceivedCall, N> {
            self.call_builder(
                &onERC1155BatchReceivedCall {
                    _0,
                    _1,
                    _2,
                    _3,
                    _4,
                },
            )
        }
        ///Creates a new call builder for the [`onERC1155Received`] function.
        pub fn onERC1155Received(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::primitives::aliases::U256,
            _3: alloy::sol_types::private::primitives::aliases::U256,
            _4: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, onERC1155ReceivedCall, N> {
            self.call_builder(
                &onERC1155ReceivedCall {
                    _0,
                    _1,
                    _2,
                    _3,
                    _4,
                },
            )
        }
        ///Creates a new call builder for the [`onERC3525Received`] function.
        pub fn onERC3525Received(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::primitives::aliases::U256,
            _2: alloy::sol_types::private::primitives::aliases::U256,
            _3: alloy::sol_types::private::primitives::aliases::U256,
            _4: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, onERC3525ReceivedCall, N> {
            self.call_builder(
                &onERC3525ReceivedCall {
                    _0,
                    _1,
                    _2,
                    _3,
                    _4,
                },
            )
        }
        ///Creates a new call builder for the [`onERC721Received`] function.
        pub fn onERC721Received(
            &self,
            _0: alloy::sol_types::private::Address,
            _1: alloy::sol_types::private::Address,
            _2: alloy::sol_types::private::primitives::aliases::U256,
            _3: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, onERC721ReceivedCall, N> {
            self.call_builder(
                &onERC721ReceivedCall {
                    _0,
                    _1,
                    _2,
                    _3,
                },
            )
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`propose_block`] function.
        pub fn propose_block(
            &self,
            blk: <Block as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, propose_blockCall, N> {
            self.call_builder(&propose_blockCall { blk })
        }
        ///Creates a new call builder for the [`setAuthorities`] function.
        pub fn setAuthorities(
            &self,
            sanctionsListAddress: alloy::sol_types::private::Address,
            x509Address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAuthoritiesCall, N> {
            self.call_builder(
                &setAuthoritiesCall {
                    sanctionsListAddress,
                    x509Address,
                },
            )
        }
        ///Creates a new call builder for the [`set_proposer_manager`] function.
        pub fn set_proposer_manager(
            &self,
            proposer_manager_address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, set_proposer_managerCall, N> {
            self.call_builder(
                &set_proposer_managerCall {
                    proposer_manager_address,
                },
            )
        }
        ///Creates a new call builder for the [`set_sanctions_list`] function.
        pub fn set_sanctions_list(
            &self,
            sanctionsListAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, set_sanctions_listCall, N> {
            self.call_builder(
                &set_sanctions_listCall {
                    sanctionsListAddress,
                },
            )
        }
        ///Creates a new call builder for the [`set_x509_address`] function.
        pub fn set_x509_address(
            &self,
            x509_address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, set_x509_addressCall, N> {
            self.call_builder(
                &set_x509_addressCall {
                    x509_address,
                },
            )
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`withdraw_processed`] function.
        pub fn withdraw_processed(
            &self,
            data: <WithdrawData as alloy::sol_types::SolType>::RustType,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdraw_processedCall, N> {
            self.call_builder(&withdraw_processedCall { data })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > NightfallInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`BlockProposed`] event.
        pub fn BlockProposed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, BlockProposed, N> {
            self.event_filter::<BlockProposed>()
        }
        ///Creates a new event filter for the [`DepositEscrowed`] event.
        pub fn DepositEscrowed_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, DepositEscrowed, N> {
            self.event_filter::<DepositEscrowed>()
        }
    }
}
