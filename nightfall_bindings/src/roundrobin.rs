/**

Generated by the following Solidity interface...
```solidity
interface RoundRobin {
    struct Proposer {
        uint256 stake;
        address addr;
        string url;
        address next_addr;
        address previous_addr;
    }

    event ProposerRotated(Proposer proposer);

    constructor(address x509_address, address sanctionsListAddress, address default_proposer_address, string default_proposer_url, uint256 stake, uint256 ding, uint256 exit_penalty, uint256 cooling_blocks, uint256 rotation_blocks) payable;

    function COOLDOWN_BLOCKS() external view returns (uint256);
    function DING() external view returns (uint256);
    function EXIT_PENALTY() external view returns (uint256);
    function ROTATION_BlOCKS() external view returns (uint256);
    function STAKE() external view returns (uint256);
    function add_proposer(string memory proposer_url) external payable;
    function escrow() external view returns (uint256);
    function get_current_proposer_address() external view returns (address);
    function get_proposers() external view returns (Proposer[] memory);
    function last_exit_block(address) external view returns (uint256);
    function owner() external view returns (address);
    function pending_withdraws(address) external view returns (uint256);
    function proposer_count() external view returns (uint256);
    function proposer_urls(string memory) external view returns (bool);
    function proposers(address) external view returns (uint256 stake, address addr, string memory url, address next_addr, address previous_addr);
    function remove_proposer() external;
    function rotate_proposer() external;
    function setAuthorities(address sanctionsListAddress, address x509Address) external;
    function set_nightfall(address nightfall_address) external;
    function set_sanctions_list(address sanctionsListAddress) external;
    function set_x509_address(address x509_address) external;
    function start_l1_block() external view returns (uint256);
    function start_l2_block() external view returns (int256);
    function withdraw(uint256 amount) external;
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "x509_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "sanctionsListAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "default_proposer_address",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "default_proposer_url",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "stake",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "ding",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "exit_penalty",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "cooling_blocks",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "rotation_blocks",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "COOLDOWN_BLOCKS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "DING",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "EXIT_PENALTY",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ROTATION_BlOCKS",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "STAKE",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "add_proposer",
    "inputs": [
      {
        "name": "proposer_url",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "escrow",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "get_current_proposer_address",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "get_proposers",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "tuple[]",
        "internalType": "struct Proposer[]",
        "components": [
          {
            "name": "stake",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "addr",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "url",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "next_addr",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "previous_addr",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "last_exit_block",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "owner",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "pending_withdraws",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proposer_count",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proposer_urls",
    "inputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "proposers",
    "inputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "stake",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "addr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "url",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "next_addr",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "previous_addr",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "remove_proposer",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "rotate_proposer",
    "inputs": [],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "setAuthorities",
    "inputs": [
      {
        "name": "sanctionsListAddress",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "x509Address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "set_nightfall",
    "inputs": [
      {
        "name": "nightfall_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "set_sanctions_list",
    "inputs": [
      {
        "name": "sanctionsListAddress",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "set_x509_address",
    "inputs": [
      {
        "name": "x509_address",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "start_l1_block",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "start_l2_block",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "int256",
        "internalType": "int256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "withdraw",
    "inputs": [
      {
        "name": "amount",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "event",
    "name": "ProposerRotated",
    "inputs": [
      {
        "name": "proposer",
        "type": "tuple",
        "indexed": false,
        "internalType": "struct Proposer",
        "components": [
          {
            "name": "stake",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "addr",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "url",
            "type": "string",
            "internalType": "string"
          },
          {
            "name": "next_addr",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "previous_addr",
            "type": "address",
            "internalType": "address"
          }
        ]
      }
    ],
    "anonymous": false
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod RoundRobin {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6101206040525f600f556040516127bb3803806127bb83398101604081905261002791610364565b5f80546001600160a01b03808c166001600160a01b03199283161790925560018054928b16928216929092179091556002805490911633179055608085905260a084905260c083905260e0829052816100d85760405162461bcd60e51b815260206004820152602860248201527f436f6f6c696e6720626c6f636b73206d7573742062652067726561746572207460448201526768616e207a65726f60c01b60648201526084015b60405180910390fd5b828510156101385760405162461bcd60e51b815260206004820152602760248201527f5374616b65206d7573742062652067726561746572207468616e20657869742060448201526670656e616c747960c81b60648201526084016100cf565b61010081905260805134146101b55760405162461bcd60e51b815260206004820152603e60248201527f596f752068617665206e6f7420706169642074686520636f727265637420737460448201527f616b696e6720616d6f756e7420647572696e67206465706c6f796d656e74000060648201526084016100cf565b6040805160a081018252608080518083526001600160a01b038b16602084018190529383018a9052606083018490529082018390526007908155600880546001600160a01b0319169093179092559060096102108982610511565b5060608201516003820180546001600160a01b039283166001600160a01b0319918216179091556080938401516004909301805493909216921691909117905551600f80545f906102629084906105ce565b90915550506001600160a01b038088165f9081526003602052604090206007805482556008546001830180546001600160a01b0319169190941617909255600281016102af6009826105f3565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015493909201805490921692169190911790556040516001906005906103019089906106bf565b908152604051908190036020019020805491151560ff1990921691909117905550506001600e55506106d595505050505050565b80516001600160a01b038116811461034b575f5ffd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f5f5f5f5f5f5f5f5f6101208a8c03121561037d575f5ffd5b6103868a610335565b985061039460208b01610335565b97506103a260408b01610335565b60608b01519097506001600160401b038111156103bd575f5ffd5b8a01601f81018c136103cd575f5ffd5b80516001600160401b038111156103e6576103e6610350565b604051601f8201601f19908116603f011681016001600160401b038111828210171561041457610414610350565b6040528181528282016020018e101561042b575f5ffd5b8160208401602083015e5f602083830101528098505050505f60808b01519050809550505f60a08b01519050809450505f60c08b01519050809350505f60e08b01519050809250505f6101008b01519050809150509295985092959850929598565b600181811c908216806104a157607f821691505b6020821081036104bf57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561050c57805f5260205f20601f840160051c810160208510156104ea5750805b601f840160051c820191505b81811015610509575f81556001016104f6565b50505b505050565b81516001600160401b0381111561052a5761052a610350565b61053e81610538845461048d565b846104c5565b6020601f821160018114610573575f83156105595750848201515b600184901b5f19600386901b1c198216175b855550610509565b5f84815260208120601f198516915b828110156105a25787850151825560209485019460019092019101610582565b50848210156105bf57868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b808201808211156105ed57634e487b7160e01b5f52601160045260245ffd5b92915050565b8181036105fe575050565b610608825461048d565b6001600160401b0381111561061f5761061f610350565b61062d81610538845461048d565b5f601f82116001811461065c575f8315610559575081850154600184901b5f19600386901b1c1982161761056b565b5f8581526020808220868352908220601f198616925b838110156106925782860154825560019586019590910190602001610672565b50858310156106af57818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f82518060208501845e5f920191825250919050565b60805160a05160c05160e051610100516120636107585f395f818161036f015261189001525f81816102d90152610c1101525f818161015c0152818161147c01528181611504015261153901525f8181610493015281816118e6015261192701525f81816101a201528181610c8601528181610e030152610e4c01526120635ff3fe608060405260043610610147575f3560e01c8063750f25f4116100b3578063c12f666e1161006d578063c12f666e146103da578063c739d79c146103ee578063d1cef1ee14610419578063d5e6c6f914610463578063d7ae76b614610482578063e2fdcc17146104b5575f5ffd5b8063750f25f41461030e5780638da5cb5b1461033f57806397c1d0471461035e57806397e20d0e14610391578063a8404aee146103b0578063ac2beca0146103c5575f5ffd5b80632e1a7d4d116101045780632e1a7d4d1461025557806348c0f487146102745780634a8a4073146102955780634b98b3b6146102b457806354831354146102c857806355c25d17146102fb575f5ffd5b80630acf4f931461014b578063125fdbbc1461019157806318177497146101c4578063194f6b64146101f45780631ffff6981461021557806322b092af1461022a575b5f5ffd5b348015610156575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561019c575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101cf575f5ffd5b506101e36101de3660046119cc565b6104ca565b604051610188959493929190611a1a565b3480156101ff575f5ffd5b5061021361020e3660046119cc565b610595565b005b348015610220575f5ffd5b5061017e600e5481565b348015610235575f5ffd5b5061017e6102443660046119cc565b60066020525f908152604090205481565b348015610260575f5ffd5b5061021361026f366004611a65565b610624565b34801561027f575f5ffd5b506102886106eb565b6040516101889190611a7c565b3480156102a0575f5ffd5b506102136102af366004611b2b565b6109d4565b3480156102bf575f5ffd5b50610213610a2e565b3480156102d3575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b610213610309366004611b5c565b610a39565b348015610319575f5ffd5b506008546001600160a01b03165b6040516001600160a01b039091168152602001610188565b34801561034a575f5ffd5b50600254610327906001600160a01b031681565b348015610369575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039c575f5ffd5b506102136103ab3660046119cc565b61109c565b3480156103bb575f5ffd5b5061017e600d5481565b3480156103d0575f5ffd5b5061017e600c5481565b3480156103e5575f5ffd5b506102136110e8565b3480156103f9575f5ffd5b5061017e6104083660046119cc565b60046020525f908152604090205481565b348015610424575f5ffd5b50610453610433366004611bde565b805160208183018101805160058252928201919093012091525460ff1681565b6040519015158152602001610188565b34801561046e575f5ffd5b5061021361047d3660046119cc565b6112d2565b34801561048d575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104c0575f5ffd5b5061017e600f5481565b60036020525f908152604090208054600182015460028301805492936001600160a01b03909216926104fb90611c91565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611c91565b80156105725780601f1061054957610100808354040283529160200191610572565b820191905f5260205f20905b81548152906001019060200180831161055557829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905085565b6002546001600160a01b031633146106025760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60448201526431ba34b7b760d91b60648201526084015b60405180910390fd5b601080546001600160a01b0319166001600160a01b0392909216919091179055565b335f90815260046020526040902054808211156106995760405162461bcd60e51b815260206004820152602d60248201527f596f752061726520747279696e6720746f207769746864726177206d6f72652060448201526c7468616e20796f75206861766560981b60648201526084016105f9565b335f90815260046020526040812080548492906106b7908490611cd7565b9091555050604051339083156108fc029084905f818181858888f193505050501580156106e6573d5f5f3e3d5ffd5b505050565b60605f600e5467ffffffffffffffff81111561070957610709611bca565b60405190808252806020026020018201604052801561076157816020015b6040805160a0810182525f80825260208083018290526060938301849052928201819052608082015282525f199092019101816107275790505b506040805160a0810182526007805482526008546001600160a01b0316602083015260098054949550919390928401919061079b90611c91565b80601f01602080910402602001604051908101604052809291908181526020018280546107c790611c91565b80156108125780601f106107e957610100808354040283529160200191610812565b820191905f5260205f20905b8154815290600101906020018083116107f557829003601f168201915b505050918352505060038201546001600160a01b039081166020830152600490920154909116604090910152815182905f9061085057610850611cf0565b602090810291909101015260015b600e548110156109ce5760035f83610877600185611cd7565b8151811061088757610887611cf0565b6020026020010151606001516001600160a01b03166001600160a01b031681526020019081526020015f206040518060a00160405290815f8201548152602001600182015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201805461090490611c91565b80601f016020809104026020016040519081016040528092919081815260200182805461093090611c91565b801561097b5780601f106109525761010080835404028352916020019161097b565b820191905f5260205f20905b81548152906001019060200180831161095e57829003601f168201915b505050918352505060038201546001600160a01b03908116602083015260049092015490911660409091015282518390839081106109bb576109bb611cf0565b602090810291909101015260010161085e565b50919050565b6002546001600160a01b031633146109fe5760405162461bcd60e51b81526004016105f990611d04565b5f80546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055565b610a373361131d565b565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015610a7e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aa29190611d3b565b610b145760405162461bcd60e51b815260206004820152603d60248201527f4365727469666965643a20596f7520617265206e6f7420617574686f7269736560448201527f6420746f207472616e73616374207573696e67204e6967687466616c6c00000060648201526084016105f9565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa158015610b5a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b7e9190611d3b565b15610be85760405162461bcd60e51b815260206004820152603460248201527f4365727469666965643a20596f7520617265206f6e2074686520436861696e616044820152731b1e5cda5cc81cd85b98dd1a5bdb9cc81b1a5cdd60621b60648201526084016105f9565b335f9081526006602052604090205415610c8457335f90815260066020526040902054610c36907f000000000000000000000000000000000000000000000000000000000000000090611d5a565b4311610c845760405162461bcd60e51b815260206004820152601760248201527f436f6f6c646f776e20706572696f64206e6f74206d657400000000000000000060448201526064016105f9565b7f00000000000000000000000000000000000000000000000000000000000000003414610d1b576040805162461bcd60e51b81526020600482015260248101919091527f596f752068617665206e6f7420706169642074686520636f727265637420737460448201527f616b696e6720616d6f756e7420647572696e6720726567697374726174696f6e60648201526084016105f9565b335f908152600360205260409020600101546001600160a01b031615610d835760405162461bcd60e51b815260206004820152601a60248201527f596f752061726520616c726561647920612070726f706f73657200000000000060448201526064016105f9565b60058282604051610d95929190611d6d565b9081526040519081900360200190205460ff1615610e015760405162461bcd60e51b815260206004820152602360248201527f546869732070726f706f7365722055524c20697320616c726561647920696e2060448201526275736560e81b60648201526084016105f9565b7f0000000000000000000000000000000000000000000000000000000000000000600f5f828254610e329190611d5a565b9091555050600854600b54600a546040805160a0810182527f00000000000000000000000000000000000000000000000000000000000000008152336020808301919091528251601f880182900482028101820184528781526001600160a01b0396871696958616959094169391928301919088908890819084018382808284375f9201829052509385525050506001600160a01b03868116602080850191909152868216604094850152338352600381529183902084518155918401516001830180546001600160a01b03191691909216179055908201516002820190610f1a9082611dc7565b506060820151600382810180546001600160a01b03199081166001600160a01b03948516179091556080909401516004938401805486169184169190911790558682165f8181526020839052604080822090950180543390881681179091558885168252949020909101805490941690921790925590821603610fc3576001600160a01b0383165f9081526003602081905260409091200180546001600160a01b031916331790555b600160058686604051610fd7929190611d6d565b9081526040805160209281900383019020805460ff1916931515939093179092556001600160a01b038581165f908152600390925291902080546007908155600182015460088054919094166001600160a01b0319909116179092559060096110436002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b03938416179091556004938401549390920180549092169216919091179055600e8054905f61109083611f52565b91905055505050505050565b6002546001600160a01b031633146110c65760405162461bcd60e51b81526004016105f990611d04565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110f061188d565b61114a5760405162461bcd60e51b815260206004820152602560248201527f4974206973206e6f742074696d6520746f20726f74617465207468652070726f6044820152643837b9b2b960d91b60648201526084016105f9565b600d5460105f9054906101000a90046001600160a01b03166001600160a01b03166328c3d7e66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111c19190611f6a565b036111db576008546111db906001600160a01b03166118c4565b600a546001600160a01b039081165f908152600360205260409020805460079081556001820154600880546001600160a01b03191691909416179092559060096112286002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015492840180549091169282169290921790915543600c5560105460408051631461ebf360e11b8152905191909216926328c3d7e6928082019260209290918290030181865afa1580156112a9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112cd9190611f6a565b600d55565b6002546001600160a01b031633146112fc5760405162461bcd60e51b81526004016105f990611d04565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038082165f81815260036020526040902060010154909116146113895760405162461bcd60e51b815260206004820152601c60248201527f546869732070726f706f73657220646f6573206e6f742065786973740000000060448201526064016105f9565b6001600160a01b0381166113eb5760405162461bcd60e51b815260206004820152602360248201527f5468652070726f706f73657220616464726573732063616e6e6f74206265207a60448201526265726f60e81b60648201526084016105f9565b6008546001600160a01b0316330361167d576001600e54116114625760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f74206465726567697374657220746865206f6e6c792061637469766044820152693290383937b837b9b2b960b11b60648201526084016105f9565b6001600160a01b0381165f908152600360205260409020547f000000000000000000000000000000000000000000000000000000000000000011156114e95760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74207374616b6520666f722065786974000000000060448201526064016105f9565b6001600160a01b0381165f90815260036020526040812080547f00000000000000000000000000000000000000000000000000000000000000009290611530908490611cd7565b925050819055507f0000000000000000000000000000000000000000000000000000000000000000600f5f8282546115689190611cd7565b9091555050600a546001600160a01b039081165f908152600360205260409020805460079081556001820154600880546001600160a01b03191691909416179092559060096115ba6002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015492840180549091169282169290921790915543600c5560105460408051631461ebf360e11b8152905191909216926328c3d7e6928082019260209290918290030181865afa15801561163b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165f9190611f6a565b600d556001600160a01b0381165f9081526006602052604090204390555b6001600160a01b038082165f908152600360208190526040808320808301805486168552828520600480840154881680885294872090820180546001600160a01b031990811690961790559154948201805490941694909616939093179091558054600f805492959491929091906116f6908490611cd7565b909155505082546001600160a01b0385165f9081526004602052604081208054909190611724908490611d5a565b90915550506001600160a01b0384165f9081526003602052604081208181556001810180546001600160a01b031916905590611763600283018261195f565b506003810180546001600160a01b0319908116909155600490910180549091169055604051600590611799906002860190611f81565b908152604051908190036020019020805460ff19169055600e8054905f6117bf83611ff2565b9190505550600e5460010361188757600880546001600160a01b039081165f81815260036020819052604080832090910180546001600160a01b0319908116909417905584548416808352818320600401805485169091179055845480851683529120805460079081556001820154909416919092161790925560096118486002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015493909201805490921692169190911790555b50505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000600c546118bc9190611d5a565b431015905090565b6001600160a01b0381165f908152600360205260408120805490919061190b907f000000000000000000000000000000000000000000000000000000000000000090612007565b90505f81121561191e576106e68361131d565b808255600f80547f000000000000000000000000000000000000000000000000000000000000000091905f90611955908490611cd7565b9091555050505050565b50805461196b90611c91565b5f825580601f1061197a575050565b601f0160209004905f5260205f20908101906119969190611999565b50565b5b808211156119ad575f815560010161199a565b5090565b80356001600160a01b03811681146119c7575f5ffd5b919050565b5f602082840312156119dc575f5ffd5b6119e5826119b1565b9392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b8581526001600160a01b038516602082015260a0604082018190525f90611a43908301866119ec565b6001600160a01b03948516606084015292909316608090910152949350505050565b5f60208284031215611a75575f5ffd5b5035919050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015611b1f57603f1987860301845281518051865260018060a01b036020820151166020870152604081015160a06040880152611ae460a08801826119ec565b6060838101516001600160a01b03908116918a0191909152608093840151169290970191909152506020938401939190910190600101611aa2565b50929695505050505050565b5f5f60408385031215611b3c575f5ffd5b611b45836119b1565b9150611b53602084016119b1565b90509250929050565b5f5f60208385031215611b6d575f5ffd5b823567ffffffffffffffff811115611b83575f5ffd5b8301601f81018513611b93575f5ffd5b803567ffffffffffffffff811115611ba9575f5ffd5b856020828401011115611bba575f5ffd5b6020919091019590945092505050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611bee575f5ffd5b813567ffffffffffffffff811115611c04575f5ffd5b8201601f81018413611c14575f5ffd5b803567ffffffffffffffff811115611c2e57611c2e611bca565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611c5d57611c5d611bca565b604052818152828201602001861015611c74575f5ffd5b816020840160208301375f91810160200191909152949350505050565b600181811c90821680611ca557607f821691505b6020821081036109ce57634e487b7160e01b5f52602260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b81810381811115611cea57611cea611cc3565b92915050565b634e487b7160e01b5f52603260045260245ffd5b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b5f60208284031215611d4b575f5ffd5b815180151581146119e5575f5ffd5b80820180821115611cea57611cea611cc3565b818382375f9101908152919050565b601f8211156106e657805f5260205f20601f840160051c81016020851015611da15750805b601f840160051c820191505b81811015611dc0575f8155600101611dad565b5050505050565b815167ffffffffffffffff811115611de157611de1611bca565b611df581611def8454611c91565b84611d7c565b6020601f821160018114611e2a575f8315611e105750848201515b600184901b5f19600386901b1c198216175b855550611dc0565b5f84815260208120601f198516915b82811015611e595787850151825560209485019460019092019101611e39565b5084821015611e7657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b818103611e90575050565b611e9a8254611c91565b67ffffffffffffffff811115611eb257611eb2611bca565b611ec081611def8454611c91565b5f601f821160018114611eef575f8315611e10575081850154600184901b5f19600386901b1c19821617611e22565b5f8581526020808220868352908220601f198616925b83811015611f255782860154825560019586019590910190602001611f05565b5085831015611f4257818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f60018201611f6357611f63611cc3565b5060010190565b5f60208284031215611f7a575f5ffd5b5051919050565b5f5f8354611f8e81611c91565b600182168015611fa55760018114611fba57611fe7565b60ff1983168652811515820286019350611fe7565b865f5260205f205f5b83811015611fdf57815488820152600190910190602001611fc3565b505081860193505b509195945050505050565b5f8161200057612000611cc3565b505f190190565b8181035f83128015838313168383128216171561202657612026611cc3565b509291505056fea2646970667358221220ff6228799b2d2c715a6bcf643ddd55e6e6fb5e8b27ad82ddaec2dfa0b3871d5c64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"a\x01 `@R_`\x0FU`@Qa'\xBB8\x03\x80a'\xBB\x839\x81\x01`@\x81\x90Ra\0'\x91a\x03dV[_\x80T`\x01`\x01`\xA0\x1B\x03\x80\x8C\x16`\x01`\x01`\xA0\x1B\x03\x19\x92\x83\x16\x17\x90\x92U`\x01\x80T\x92\x8B\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91U`\x02\x80T\x90\x91\x163\x17\x90U`\x80\x85\x90R`\xA0\x84\x90R`\xC0\x83\x90R`\xE0\x82\x90R\x81a\0\xD8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`(`$\x82\x01R\x7FCooling blocks must be greater t`D\x82\x01Rghan zero`\xC0\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[\x82\x85\x10\x15a\x018W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FStake must be greater than exit `D\x82\x01Rfpenalty`\xC8\x1B`d\x82\x01R`\x84\x01a\0\xCFV[a\x01\0\x81\x90R`\x80Q4\x14a\x01\xB5W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`>`$\x82\x01R\x7FYou have not paid the correct st`D\x82\x01R\x7Faking amount during deployment\0\0`d\x82\x01R`\x84\x01a\0\xCFV[`@\x80Q`\xA0\x81\x01\x82R`\x80\x80Q\x80\x83R`\x01`\x01`\xA0\x1B\x03\x8B\x16` \x84\x01\x81\x90R\x93\x83\x01\x8A\x90R``\x83\x01\x84\x90R\x90\x82\x01\x83\x90R`\x07\x90\x81U`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90\x93\x17\x90\x92U\x90`\ta\x02\x10\x89\x82a\x05\x11V[P``\x82\x01Q`\x03\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x80\x93\x84\x01Q`\x04\x90\x93\x01\x80T\x93\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UQ`\x0F\x80T_\x90a\x02b\x90\x84\x90a\x05\xCEV[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x80\x88\x16_\x90\x81R`\x03` R`@\x90 `\x07\x80T\x82U`\x08T`\x01\x83\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x94\x16\x17\x90\x92U`\x02\x81\x01a\x02\xAF`\t\x82a\x05\xF3V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x93\x90\x92\x01\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U`@Q`\x01\x90`\x05\x90a\x03\x01\x90\x89\x90a\x06\xBFV[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x80T\x91\x15\x15`\xFF\x19\x90\x92\x16\x91\x90\x91\x17\x90UPP`\x01`\x0EUPa\x06\xD5\x95PPPPPPV[\x80Q`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x03KW__\xFD[\x91\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_________a\x01 \x8A\x8C\x03\x12\x15a\x03}W__\xFD[a\x03\x86\x8Aa\x035V[\x98Pa\x03\x94` \x8B\x01a\x035V[\x97Pa\x03\xA2`@\x8B\x01a\x035V[``\x8B\x01Q\x90\x97P`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03\xBDW__\xFD[\x8A\x01`\x1F\x81\x01\x8C\x13a\x03\xCDW__\xFD[\x80Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x03\xE6Wa\x03\xE6a\x03PV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\x04\x14Wa\x04\x14a\x03PV[`@R\x81\x81R\x82\x82\x01` \x01\x8E\x10\x15a\x04+W__\xFD[\x81` \x84\x01` \x83\x01^_` \x83\x83\x01\x01R\x80\x98PPPP_`\x80\x8B\x01Q\x90P\x80\x95PP_`\xA0\x8B\x01Q\x90P\x80\x94PP_`\xC0\x8B\x01Q\x90P\x80\x93PP_`\xE0\x8B\x01Q\x90P\x80\x92PP_a\x01\0\x8B\x01Q\x90P\x80\x91PP\x92\x95\x98P\x92\x95\x98P\x92\x95\x98V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x04\xA1W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x04\xBFWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x05\x0CW\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x04\xEAWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x05\tW_\x81U`\x01\x01a\x04\xF6V[PP[PPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x05*Wa\x05*a\x03PV[a\x05>\x81a\x058\x84Ta\x04\x8DV[\x84a\x04\xC5V[` `\x1F\x82\x11`\x01\x81\x14a\x05sW_\x83\x15a\x05YWP\x84\x82\x01Q[`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17[\x85UPa\x05\tV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x05\xA2W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x05\x82V[P\x84\x82\x10\x15a\x05\xBFW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[\x80\x82\x01\x80\x82\x11\x15a\x05\xEDWcNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x92\x91PPV[\x81\x81\x03a\x05\xFEWPPV[a\x06\x08\x82Ta\x04\x8DV[`\x01`\x01`@\x1B\x03\x81\x11\x15a\x06\x1FWa\x06\x1Fa\x03PV[a\x06-\x81a\x058\x84Ta\x04\x8DV[_`\x1F\x82\x11`\x01\x81\x14a\x06\\W_\x83\x15a\x05YWP\x81\x85\x01T`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17a\x05kV[_\x85\x81R` \x80\x82 \x86\x83R\x90\x82 `\x1F\x19\x86\x16\x92[\x83\x81\x10\x15a\x06\x92W\x82\x86\x01T\x82U`\x01\x95\x86\x01\x95\x90\x91\x01\x90` \x01a\x06rV[P\x85\x83\x10\x15a\x06\xAFW\x81\x85\x01T_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[_\x82Q\x80` \x85\x01\x84^_\x92\x01\x91\x82RP\x91\x90PV[`\x80Q`\xA0Q`\xC0Q`\xE0Qa\x01\0Qa ca\x07X_9_\x81\x81a\x03o\x01Ra\x18\x90\x01R_\x81\x81a\x02\xD9\x01Ra\x0C\x11\x01R_\x81\x81a\x01\\\x01R\x81\x81a\x14|\x01R\x81\x81a\x15\x04\x01Ra\x159\x01R_\x81\x81a\x04\x93\x01R\x81\x81a\x18\xE6\x01Ra\x19'\x01R_\x81\x81a\x01\xA2\x01R\x81\x81a\x0C\x86\x01R\x81\x81a\x0E\x03\x01Ra\x0EL\x01Ra c_\xF3\xFE`\x80`@R`\x046\x10a\x01GW_5`\xE0\x1C\x80cu\x0F%\xF4\x11a\0\xB3W\x80c\xC1/fn\x11a\0mW\x80c\xC1/fn\x14a\x03\xDAW\x80c\xC79\xD7\x9C\x14a\x03\xEEW\x80c\xD1\xCE\xF1\xEE\x14a\x04\x19W\x80c\xD5\xE6\xC6\xF9\x14a\x04cW\x80c\xD7\xAEv\xB6\x14a\x04\x82W\x80c\xE2\xFD\xCC\x17\x14a\x04\xB5W__\xFD[\x80cu\x0F%\xF4\x14a\x03\x0EW\x80c\x8D\xA5\xCB[\x14a\x03?W\x80c\x97\xC1\xD0G\x14a\x03^W\x80c\x97\xE2\r\x0E\x14a\x03\x91W\x80c\xA8@J\xEE\x14a\x03\xB0W\x80c\xAC+\xEC\xA0\x14a\x03\xC5W__\xFD[\x80c.\x1A}M\x11a\x01\x04W\x80c.\x1A}M\x14a\x02UW\x80cH\xC0\xF4\x87\x14a\x02tW\x80cJ\x8A@s\x14a\x02\x95W\x80cK\x98\xB3\xB6\x14a\x02\xB4W\x80cT\x83\x13T\x14a\x02\xC8W\x80cU\xC2]\x17\x14a\x02\xFBW__\xFD[\x80c\n\xCFO\x93\x14a\x01KW\x80c\x12_\xDB\xBC\x14a\x01\x91W\x80c\x18\x17t\x97\x14a\x01\xC4W\x80c\x19Okd\x14a\x01\xF4W\x80c\x1F\xFF\xF6\x98\x14a\x02\x15W\x80c\"\xB0\x92\xAF\x14a\x02*W[__\xFD[4\x80\x15a\x01VW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x9CW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x01\xCFW__\xFD[Pa\x01\xE3a\x01\xDE6`\x04a\x19\xCCV[a\x04\xCAV[`@Qa\x01\x88\x95\x94\x93\x92\x91\x90a\x1A\x1AV[4\x80\x15a\x01\xFFW__\xFD[Pa\x02\x13a\x02\x0E6`\x04a\x19\xCCV[a\x05\x95V[\0[4\x80\x15a\x02 W__\xFD[Pa\x01~`\x0ET\x81V[4\x80\x15a\x025W__\xFD[Pa\x01~a\x02D6`\x04a\x19\xCCV[`\x06` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x02`W__\xFD[Pa\x02\x13a\x02o6`\x04a\x1AeV[a\x06$V[4\x80\x15a\x02\x7FW__\xFD[Pa\x02\x88a\x06\xEBV[`@Qa\x01\x88\x91\x90a\x1A|V[4\x80\x15a\x02\xA0W__\xFD[Pa\x02\x13a\x02\xAF6`\x04a\x1B+V[a\t\xD4V[4\x80\x15a\x02\xBFW__\xFD[Pa\x02\x13a\n.V[4\x80\x15a\x02\xD3W__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x02\x13a\x03\t6`\x04a\x1B\\V[a\n9V[4\x80\x15a\x03\x19W__\xFD[P`\x08T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x88V[4\x80\x15a\x03JW__\xFD[P`\x02Ta\x03'\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x03iW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x03\x9CW__\xFD[Pa\x02\x13a\x03\xAB6`\x04a\x19\xCCV[a\x10\x9CV[4\x80\x15a\x03\xBBW__\xFD[Pa\x01~`\rT\x81V[4\x80\x15a\x03\xD0W__\xFD[Pa\x01~`\x0CT\x81V[4\x80\x15a\x03\xE5W__\xFD[Pa\x02\x13a\x10\xE8V[4\x80\x15a\x03\xF9W__\xFD[Pa\x01~a\x04\x086`\x04a\x19\xCCV[`\x04` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x04$W__\xFD[Pa\x04Sa\x0436`\x04a\x1B\xDEV[\x80Q` \x81\x83\x01\x81\x01\x80Q`\x05\x82R\x92\x82\x01\x91\x90\x93\x01 \x91RT`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01\x88V[4\x80\x15a\x04nW__\xFD[Pa\x02\x13a\x04}6`\x04a\x19\xCCV[a\x12\xD2V[4\x80\x15a\x04\x8DW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x04\xC0W__\xFD[Pa\x01~`\x0FT\x81V[`\x03` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01\x80T\x92\x93`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92a\x04\xFB\x90a\x1C\x91V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05'\x90a\x1C\x91V[\x80\x15a\x05rW\x80`\x1F\x10a\x05IWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05rV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05UW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPP`\x03\x83\x01T`\x04\x90\x93\x01T\x91\x92`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x92\x16\x90P\x85V[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FOnly the owner can call this fun`D\x82\x01Rd1\xBA4\xB7\xB7`\xD9\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x10\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[3_\x90\x81R`\x04` R`@\x90 T\x80\x82\x11\x15a\x06\x99W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FYou are trying to withdraw more `D\x82\x01Rlthan you have`\x98\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[3_\x90\x81R`\x04` R`@\x81 \x80T\x84\x92\x90a\x06\xB7\x90\x84\x90a\x1C\xD7V[\x90\x91UPP`@Q3\x90\x83\x15a\x08\xFC\x02\x90\x84\x90_\x81\x81\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x06\xE6W=__>=_\xFD[PPPV[``_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\tWa\x07\ta\x1B\xCAV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x07aW\x81` \x01[`@\x80Q`\xA0\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R``\x93\x83\x01\x84\x90R\x92\x82\x01\x81\x90R`\x80\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x07'W\x90P[P`@\x80Q`\xA0\x81\x01\x82R`\x07\x80T\x82R`\x08T`\x01`\x01`\xA0\x1B\x03\x16` \x83\x01R`\t\x80T\x94\x95P\x91\x93\x90\x92\x84\x01\x91\x90a\x07\x9B\x90a\x1C\x91V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x07\xC7\x90a\x1C\x91V[\x80\x15a\x08\x12W\x80`\x1F\x10a\x07\xE9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x08\x12V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x07\xF5W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x83RPP`\x03\x82\x01T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x04\x90\x92\x01T\x90\x91\x16`@\x90\x91\x01R\x81Q\x82\x90_\x90a\x08PWa\x08Pa\x1C\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01[`\x0ET\x81\x10\x15a\t\xCEW`\x03_\x83a\x08w`\x01\x85a\x1C\xD7V[\x81Q\x81\x10a\x08\x87Wa\x08\x87a\x1C\xF0V[` \x02` \x01\x01Q``\x01Q`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\xA0\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01`\x02\x82\x01\x80Ta\t\x04\x90a\x1C\x91V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\t0\x90a\x1C\x91V[\x80\x15a\t{W\x80`\x1F\x10a\tRWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t{V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t^W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x83RPP`\x03\x82\x01T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x04\x90\x92\x01T\x90\x91\x16`@\x90\x91\x01R\x82Q\x83\x90\x83\x90\x81\x10a\t\xBBWa\t\xBBa\x1C\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x08^V[P\x91\x90PV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\xFEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF9\x90a\x1D\x04V[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x01\x80T\x93\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UV[a\n73a\x13\x1DV[V[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n~W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xA2\x91\x90a\x1D;V[a\x0B\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FCertified: You are not authorise`D\x82\x01R\x7Fd to transact using Nightfall\0\0\0`d\x82\x01R`\x84\x01a\x05\xF9V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0BZW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B~\x91\x90a\x1D;V[\x15a\x0B\xE8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`4`$\x82\x01R\x7FCertified: You are on the Chaina`D\x82\x01Rs\x1B\x1E\\\xDA\\\xC8\x1C\xD8[\x98\xDD\x1A[\xDB\x9C\xC8\x1B\x1A\\\xDD`b\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[3_\x90\x81R`\x06` R`@\x90 T\x15a\x0C\x84W3_\x90\x81R`\x06` R`@\x90 Ta\x0C6\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x1DZV[C\x11a\x0C\x84W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FCooldown period not met\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x004\x14a\r\x1BW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x81\x01\x91\x90\x91R\x7FYou have not paid the correct st`D\x82\x01R\x7Faking amount during registration`d\x82\x01R`\x84\x01a\x05\xF9V[3_\x90\x81R`\x03` R`@\x90 `\x01\x01T`\x01`\x01`\xA0\x1B\x03\x16\x15a\r\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FYou are already a proposer\0\0\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[`\x05\x82\x82`@Qa\r\x95\x92\x91\x90a\x1DmV[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 T`\xFF\x16\x15a\x0E\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FThis proposer URL is already in `D\x82\x01Rbuse`\xE8\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0F_\x82\x82Ta\x0E2\x91\x90a\x1DZV[\x90\x91UPP`\x08T`\x0BT`\nT`@\x80Q`\xA0\x81\x01\x82R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3` \x80\x83\x01\x91\x90\x91R\x82Q`\x1F\x88\x01\x82\x90\x04\x82\x02\x81\x01\x82\x01\x84R\x87\x81R`\x01`\x01`\xA0\x1B\x03\x96\x87\x16\x96\x95\x86\x16\x95\x90\x94\x16\x93\x91\x92\x83\x01\x91\x90\x88\x90\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x93\x85RPPP`\x01`\x01`\xA0\x1B\x03\x86\x81\x16` \x80\x85\x01\x91\x90\x91R\x86\x82\x16`@\x94\x85\x01R3\x83R`\x03\x81R\x91\x83\x90 \x84Q\x81U\x91\x84\x01Q`\x01\x83\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x92\x16\x17\x90U\x90\x82\x01Q`\x02\x82\x01\x90a\x0F\x1A\x90\x82a\x1D\xC7V[P``\x82\x01Q`\x03\x82\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x90\x91U`\x80\x90\x94\x01Q`\x04\x93\x84\x01\x80T\x86\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x86\x82\x16_\x81\x81R` \x83\x90R`@\x80\x82 \x90\x95\x01\x80T3\x90\x88\x16\x81\x17\x90\x91U\x88\x85\x16\x82R\x94\x90 \x90\x91\x01\x80T\x90\x94\x16\x90\x92\x17\x90\x92U\x90\x82\x16\x03a\x0F\xC3W`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x03` \x81\x90R`@\x90\x91 \x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90U[`\x01`\x05\x86\x86`@Qa\x0F\xD7\x92\x91\x90a\x1DmV[\x90\x81R`@\x80Q` \x92\x81\x90\x03\x83\x01\x90 \x80T`\xFF\x19\x16\x93\x15\x15\x93\x90\x93\x17\x90\x92U`\x01`\x01`\xA0\x1B\x03\x85\x81\x16_\x90\x81R`\x03\x90\x92R\x91\x90 \x80T`\x07\x90\x81U`\x01\x82\x01T`\x08\x80T\x91\x90\x94\x16`\x01`\x01`\xA0\x1B\x03\x19\x90\x91\x16\x17\x90\x92U\x90`\ta\x10C`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x93\x90\x92\x01\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U`\x0E\x80T\x90_a\x10\x90\x83a\x1FRV[\x91\x90PUPPPPPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x10\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF9\x90a\x1D\x04V[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[a\x10\xF0a\x18\x8DV[a\x11JW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FIt is not time to rotate the pro`D\x82\x01Rd87\xB9\xB2\xB9`\xD9\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[`\rT`\x10_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c(\xC3\xD7\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x9DW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xC1\x91\x90a\x1FjV[\x03a\x11\xDBW`\x08Ta\x11\xDB\x90`\x01`\x01`\xA0\x1B\x03\x16a\x18\xC4V[`\nT`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x03` R`@\x90 \x80T`\x07\x90\x81U`\x01\x82\x01T`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x94\x16\x17\x90\x92U\x90`\ta\x12(`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x92\x84\x01\x80T\x90\x91\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91UC`\x0CU`\x10T`@\x80Qc\x14a\xEB\xF3`\xE1\x1B\x81R\x90Q\x91\x90\x92\x16\x92c(\xC3\xD7\xE6\x92\x80\x82\x01\x92` \x92\x90\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x12\xA9W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\xCD\x91\x90a\x1FjV[`\rUV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x12\xFCW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF9\x90a\x1D\x04V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16_\x81\x81R`\x03` R`@\x90 `\x01\x01T\x90\x91\x16\x14a\x13\x89W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FThis proposer does not exist\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x13\xEBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FThe proposer address cannot be z`D\x82\x01Rbero`\xE8\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x03a\x16}W`\x01`\x0ET\x11a\x14bW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FCannot deregister the only activ`D\x82\x01Ri2\x90897\xB87\xB9\xB2\xB9`\xB1\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` R`@\x90 T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\x15a\x14\xE9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FInsufficient stake for exit\0\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` R`@\x81 \x80T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x90a\x150\x90\x84\x90a\x1C\xD7V[\x92PP\x81\x90UP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0F_\x82\x82Ta\x15h\x91\x90a\x1C\xD7V[\x90\x91UPP`\nT`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x03` R`@\x90 \x80T`\x07\x90\x81U`\x01\x82\x01T`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x94\x16\x17\x90\x92U\x90`\ta\x15\xBA`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x92\x84\x01\x80T\x90\x91\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91UC`\x0CU`\x10T`@\x80Qc\x14a\xEB\xF3`\xE1\x1B\x81R\x90Q\x91\x90\x92\x16\x92c(\xC3\xD7\xE6\x92\x80\x82\x01\x92` \x92\x90\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x16;W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x16_\x91\x90a\x1FjV[`\rU`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x06` R`@\x90 C\x90U[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16_\x90\x81R`\x03` \x81\x90R`@\x80\x83 \x80\x83\x01\x80T\x86\x16\x85R\x82\x85 `\x04\x80\x84\x01T\x88\x16\x80\x88R\x94\x87 \x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x96\x17\x90U\x91T\x94\x82\x01\x80T\x90\x94\x16\x94\x90\x96\x16\x93\x90\x93\x17\x90\x91U\x80T`\x0F\x80T\x92\x95\x94\x91\x92\x90\x91\x90a\x16\xF6\x90\x84\x90a\x1C\xD7V[\x90\x91UPP\x82T`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x04` R`@\x81 \x80T\x90\x91\x90a\x17$\x90\x84\x90a\x1DZV[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x03` R`@\x81 \x81\x81U`\x01\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90U\x90a\x17c`\x02\x83\x01\x82a\x19_V[P`\x03\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U`\x04\x90\x91\x01\x80T\x90\x91\x16\x90U`@Q`\x05\x90a\x17\x99\x90`\x02\x86\x01\x90a\x1F\x81V[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x80T`\xFF\x19\x16\x90U`\x0E\x80T\x90_a\x17\xBF\x83a\x1F\xF2V[\x91\x90PUP`\x0ET`\x01\x03a\x18\x87W`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x81\x81R`\x03` \x81\x90R`@\x80\x83 \x90\x91\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x94\x17\x90U\x84T\x84\x16\x80\x83R\x81\x83 `\x04\x01\x80T\x85\x16\x90\x91\x17\x90U\x84T\x80\x85\x16\x83R\x91 \x80T`\x07\x90\x81U`\x01\x82\x01T\x90\x94\x16\x91\x90\x92\x16\x17\x90\x92U`\ta\x18H`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x93\x90\x92\x01\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U[PPPPV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0CTa\x18\xBC\x91\x90a\x1DZV[C\x10\x15\x90P\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` R`@\x81 \x80T\x90\x91\x90a\x19\x0B\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a \x07V[\x90P_\x81\x12\x15a\x19\x1EWa\x06\xE6\x83a\x13\x1DV[\x80\x82U`\x0F\x80T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90_\x90a\x19U\x90\x84\x90a\x1C\xD7V[\x90\x91UPPPPPV[P\x80Ta\x19k\x90a\x1C\x91V[_\x82U\x80`\x1F\x10a\x19zWPPV[`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x19\x96\x91\x90a\x19\x99V[PV[[\x80\x82\x11\x15a\x19\xADW_\x81U`\x01\x01a\x19\x9AV[P\x90V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x19\xC7W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x19\xDCW__\xFD[a\x19\xE5\x82a\x19\xB1V[\x93\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x85\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16` \x82\x01R`\xA0`@\x82\x01\x81\x90R_\x90a\x1AC\x90\x83\x01\x86a\x19\xECV[`\x01`\x01`\xA0\x1B\x03\x94\x85\x16``\x84\x01R\x92\x90\x93\x16`\x80\x90\x91\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x1AuW__\xFD[P5\x91\x90PV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x1B\x1FW`?\x19\x87\x86\x03\x01\x84R\x81Q\x80Q\x86R`\x01\x80`\xA0\x1B\x03` \x82\x01Q\x16` \x87\x01R`@\x81\x01Q`\xA0`@\x88\x01Ra\x1A\xE4`\xA0\x88\x01\x82a\x19\xECV[``\x83\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x8A\x01\x91\x90\x91R`\x80\x93\x84\x01Q\x16\x92\x90\x97\x01\x91\x90\x91RP` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x1A\xA2V[P\x92\x96\x95PPPPPPV[__`@\x83\x85\x03\x12\x15a\x1B<W__\xFD[a\x1BE\x83a\x19\xB1V[\x91Pa\x1BS` \x84\x01a\x19\xB1V[\x90P\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15a\x1BmW__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x83W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x1B\x93W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xA9W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x1B\xBAW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1B\xEEW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x04W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x1C\x14W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C.Wa\x1C.a\x1B\xCAV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1C]Wa\x1C]a\x1B\xCAV[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x1CtW__\xFD[\x81` \x84\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x1C\xA5W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\t\xCEWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x1C\xEAWa\x1C\xEAa\x1C\xC3V[\x92\x91PPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[` \x80\x82R`\x17\x90\x82\x01R\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\x1DKW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x19\xE5W__\xFD[\x80\x82\x01\x80\x82\x11\x15a\x1C\xEAWa\x1C\xEAa\x1C\xC3V[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[`\x1F\x82\x11\x15a\x06\xE6W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x1D\xA1WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x1D\xC0W_\x81U`\x01\x01a\x1D\xADV[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\xE1Wa\x1D\xE1a\x1B\xCAV[a\x1D\xF5\x81a\x1D\xEF\x84Ta\x1C\x91V[\x84a\x1D|V[` `\x1F\x82\x11`\x01\x81\x14a\x1E*W_\x83\x15a\x1E\x10WP\x84\x82\x01Q[`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17[\x85UPa\x1D\xC0V[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x1EYW\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x1E9V[P\x84\x82\x10\x15a\x1EvW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[\x81\x81\x03a\x1E\x90WPPV[a\x1E\x9A\x82Ta\x1C\x91V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xB2Wa\x1E\xB2a\x1B\xCAV[a\x1E\xC0\x81a\x1D\xEF\x84Ta\x1C\x91V[_`\x1F\x82\x11`\x01\x81\x14a\x1E\xEFW_\x83\x15a\x1E\x10WP\x81\x85\x01T`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17a\x1E\"V[_\x85\x81R` \x80\x82 \x86\x83R\x90\x82 `\x1F\x19\x86\x16\x92[\x83\x81\x10\x15a\x1F%W\x82\x86\x01T\x82U`\x01\x95\x86\x01\x95\x90\x91\x01\x90` \x01a\x1F\x05V[P\x85\x83\x10\x15a\x1FBW\x81\x85\x01T_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[_`\x01\x82\x01a\x1FcWa\x1Fca\x1C\xC3V[P`\x01\x01\x90V[_` \x82\x84\x03\x12\x15a\x1FzW__\xFD[PQ\x91\x90PV[__\x83Ta\x1F\x8E\x81a\x1C\x91V[`\x01\x82\x16\x80\x15a\x1F\xA5W`\x01\x81\x14a\x1F\xBAWa\x1F\xE7V[`\xFF\x19\x83\x16\x86R\x81\x15\x15\x82\x02\x86\x01\x93Pa\x1F\xE7V[\x86_R` _ _[\x83\x81\x10\x15a\x1F\xDFW\x81T\x88\x82\x01R`\x01\x90\x91\x01\x90` \x01a\x1F\xC3V[PP\x81\x86\x01\x93P[P\x91\x95\x94PPPPPV[_\x81a \0Wa \0a\x1C\xC3V[P_\x19\x01\x90V[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a &Wa &a\x1C\xC3V[P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xFFb(y\x9B-,qZk\xCFd=\xDDU\xE6\xE6\xFB^\x8B'\xAD\x82\xDD\xAE\xC2\xDF\xA0\xB3\x87\x1D\\dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405260043610610147575f3560e01c8063750f25f4116100b3578063c12f666e1161006d578063c12f666e146103da578063c739d79c146103ee578063d1cef1ee14610419578063d5e6c6f914610463578063d7ae76b614610482578063e2fdcc17146104b5575f5ffd5b8063750f25f41461030e5780638da5cb5b1461033f57806397c1d0471461035e57806397e20d0e14610391578063a8404aee146103b0578063ac2beca0146103c5575f5ffd5b80632e1a7d4d116101045780632e1a7d4d1461025557806348c0f487146102745780634a8a4073146102955780634b98b3b6146102b457806354831354146102c857806355c25d17146102fb575f5ffd5b80630acf4f931461014b578063125fdbbc1461019157806318177497146101c4578063194f6b64146101f45780631ffff6981461021557806322b092af1461022a575b5f5ffd5b348015610156575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b34801561019c575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156101cf575f5ffd5b506101e36101de3660046119cc565b6104ca565b604051610188959493929190611a1a565b3480156101ff575f5ffd5b5061021361020e3660046119cc565b610595565b005b348015610220575f5ffd5b5061017e600e5481565b348015610235575f5ffd5b5061017e6102443660046119cc565b60066020525f908152604090205481565b348015610260575f5ffd5b5061021361026f366004611a65565b610624565b34801561027f575f5ffd5b506102886106eb565b6040516101889190611a7c565b3480156102a0575f5ffd5b506102136102af366004611b2b565b6109d4565b3480156102bf575f5ffd5b50610213610a2e565b3480156102d3575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b610213610309366004611b5c565b610a39565b348015610319575f5ffd5b506008546001600160a01b03165b6040516001600160a01b039091168152602001610188565b34801561034a575f5ffd5b50600254610327906001600160a01b031681565b348015610369575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561039c575f5ffd5b506102136103ab3660046119cc565b61109c565b3480156103bb575f5ffd5b5061017e600d5481565b3480156103d0575f5ffd5b5061017e600c5481565b3480156103e5575f5ffd5b506102136110e8565b3480156103f9575f5ffd5b5061017e6104083660046119cc565b60046020525f908152604090205481565b348015610424575f5ffd5b50610453610433366004611bde565b805160208183018101805160058252928201919093012091525460ff1681565b6040519015158152602001610188565b34801561046e575f5ffd5b5061021361047d3660046119cc565b6112d2565b34801561048d575f5ffd5b5061017e7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104c0575f5ffd5b5061017e600f5481565b60036020525f908152604090208054600182015460028301805492936001600160a01b03909216926104fb90611c91565b80601f016020809104026020016040519081016040528092919081815260200182805461052790611c91565b80156105725780601f1061054957610100808354040283529160200191610572565b820191905f5260205f20905b81548152906001019060200180831161055557829003601f168201915b50505050600383015460049093015491926001600160a01b039081169216905085565b6002546001600160a01b031633146106025760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920746865206f776e65722063616e2063616c6c20746869732066756e60448201526431ba34b7b760d91b60648201526084015b60405180910390fd5b601080546001600160a01b0319166001600160a01b0392909216919091179055565b335f90815260046020526040902054808211156106995760405162461bcd60e51b815260206004820152602d60248201527f596f752061726520747279696e6720746f207769746864726177206d6f72652060448201526c7468616e20796f75206861766560981b60648201526084016105f9565b335f90815260046020526040812080548492906106b7908490611cd7565b9091555050604051339083156108fc029084905f818181858888f193505050501580156106e6573d5f5f3e3d5ffd5b505050565b60605f600e5467ffffffffffffffff81111561070957610709611bca565b60405190808252806020026020018201604052801561076157816020015b6040805160a0810182525f80825260208083018290526060938301849052928201819052608082015282525f199092019101816107275790505b506040805160a0810182526007805482526008546001600160a01b0316602083015260098054949550919390928401919061079b90611c91565b80601f01602080910402602001604051908101604052809291908181526020018280546107c790611c91565b80156108125780601f106107e957610100808354040283529160200191610812565b820191905f5260205f20905b8154815290600101906020018083116107f557829003601f168201915b505050918352505060038201546001600160a01b039081166020830152600490920154909116604090910152815182905f9061085057610850611cf0565b602090810291909101015260015b600e548110156109ce5760035f83610877600185611cd7565b8151811061088757610887611cf0565b6020026020010151606001516001600160a01b03166001600160a01b031681526020019081526020015f206040518060a00160405290815f8201548152602001600182015f9054906101000a90046001600160a01b03166001600160a01b03166001600160a01b0316815260200160028201805461090490611c91565b80601f016020809104026020016040519081016040528092919081815260200182805461093090611c91565b801561097b5780601f106109525761010080835404028352916020019161097b565b820191905f5260205f20905b81548152906001019060200180831161095e57829003601f168201915b505050918352505060038201546001600160a01b03908116602083015260049092015490911660409091015282518390839081106109bb576109bb611cf0565b602090810291909101015260010161085e565b50919050565b6002546001600160a01b031633146109fe5760405162461bcd60e51b81526004016105f990611d04565b5f80546001600160a01b039283166001600160a01b03199182161790915560018054939092169216919091179055565b610a373361131d565b565b5f5460405163e23c27e960e01b81523360048201526001600160a01b039091169063e23c27e990602401602060405180830381865afa158015610a7e573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aa29190611d3b565b610b145760405162461bcd60e51b815260206004820152603d60248201527f4365727469666965643a20596f7520617265206e6f7420617574686f7269736560448201527f6420746f207472616e73616374207573696e67204e6967687466616c6c00000060648201526084016105f9565b60015460405163df592f7d60e01b81523360048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa158015610b5a573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b7e9190611d3b565b15610be85760405162461bcd60e51b815260206004820152603460248201527f4365727469666965643a20596f7520617265206f6e2074686520436861696e616044820152731b1e5cda5cc81cd85b98dd1a5bdb9cc81b1a5cdd60621b60648201526084016105f9565b335f9081526006602052604090205415610c8457335f90815260066020526040902054610c36907f000000000000000000000000000000000000000000000000000000000000000090611d5a565b4311610c845760405162461bcd60e51b815260206004820152601760248201527f436f6f6c646f776e20706572696f64206e6f74206d657400000000000000000060448201526064016105f9565b7f00000000000000000000000000000000000000000000000000000000000000003414610d1b576040805162461bcd60e51b81526020600482015260248101919091527f596f752068617665206e6f7420706169642074686520636f727265637420737460448201527f616b696e6720616d6f756e7420647572696e6720726567697374726174696f6e60648201526084016105f9565b335f908152600360205260409020600101546001600160a01b031615610d835760405162461bcd60e51b815260206004820152601a60248201527f596f752061726520616c726561647920612070726f706f73657200000000000060448201526064016105f9565b60058282604051610d95929190611d6d565b9081526040519081900360200190205460ff1615610e015760405162461bcd60e51b815260206004820152602360248201527f546869732070726f706f7365722055524c20697320616c726561647920696e2060448201526275736560e81b60648201526084016105f9565b7f0000000000000000000000000000000000000000000000000000000000000000600f5f828254610e329190611d5a565b9091555050600854600b54600a546040805160a0810182527f00000000000000000000000000000000000000000000000000000000000000008152336020808301919091528251601f880182900482028101820184528781526001600160a01b0396871696958616959094169391928301919088908890819084018382808284375f9201829052509385525050506001600160a01b03868116602080850191909152868216604094850152338352600381529183902084518155918401516001830180546001600160a01b03191691909216179055908201516002820190610f1a9082611dc7565b506060820151600382810180546001600160a01b03199081166001600160a01b03948516179091556080909401516004938401805486169184169190911790558682165f8181526020839052604080822090950180543390881681179091558885168252949020909101805490941690921790925590821603610fc3576001600160a01b0383165f9081526003602081905260409091200180546001600160a01b031916331790555b600160058686604051610fd7929190611d6d565b9081526040805160209281900383019020805460ff1916931515939093179092556001600160a01b038581165f908152600390925291902080546007908155600182015460088054919094166001600160a01b0319909116179092559060096110436002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b03938416179091556004938401549390920180549092169216919091179055600e8054905f61109083611f52565b91905055505050505050565b6002546001600160a01b031633146110c65760405162461bcd60e51b81526004016105f990611d04565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6110f061188d565b61114a5760405162461bcd60e51b815260206004820152602560248201527f4974206973206e6f742074696d6520746f20726f74617465207468652070726f6044820152643837b9b2b960d91b60648201526084016105f9565b600d5460105f9054906101000a90046001600160a01b03166001600160a01b03166328c3d7e66040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119d573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111c19190611f6a565b036111db576008546111db906001600160a01b03166118c4565b600a546001600160a01b039081165f908152600360205260409020805460079081556001820154600880546001600160a01b03191691909416179092559060096112286002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015492840180549091169282169290921790915543600c5560105460408051631461ebf360e11b8152905191909216926328c3d7e6928082019260209290918290030181865afa1580156112a9573d5f5f3e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112cd9190611f6a565b600d55565b6002546001600160a01b031633146112fc5760405162461bcd60e51b81526004016105f990611d04565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038082165f81815260036020526040902060010154909116146113895760405162461bcd60e51b815260206004820152601c60248201527f546869732070726f706f73657220646f6573206e6f742065786973740000000060448201526064016105f9565b6001600160a01b0381166113eb5760405162461bcd60e51b815260206004820152602360248201527f5468652070726f706f73657220616464726573732063616e6e6f74206265207a60448201526265726f60e81b60648201526084016105f9565b6008546001600160a01b0316330361167d576001600e54116114625760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f74206465726567697374657220746865206f6e6c792061637469766044820152693290383937b837b9b2b960b11b60648201526084016105f9565b6001600160a01b0381165f908152600360205260409020547f000000000000000000000000000000000000000000000000000000000000000011156114e95760405162461bcd60e51b815260206004820152601b60248201527f496e73756666696369656e74207374616b6520666f722065786974000000000060448201526064016105f9565b6001600160a01b0381165f90815260036020526040812080547f00000000000000000000000000000000000000000000000000000000000000009290611530908490611cd7565b925050819055507f0000000000000000000000000000000000000000000000000000000000000000600f5f8282546115689190611cd7565b9091555050600a546001600160a01b039081165f908152600360205260409020805460079081556001820154600880546001600160a01b03191691909416179092559060096115ba6002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015492840180549091169282169290921790915543600c5560105460408051631461ebf360e11b8152905191909216926328c3d7e6928082019260209290918290030181865afa15801561163b573d5f5f3e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061165f9190611f6a565b600d556001600160a01b0381165f9081526006602052604090204390555b6001600160a01b038082165f908152600360208190526040808320808301805486168552828520600480840154881680885294872090820180546001600160a01b031990811690961790559154948201805490941694909616939093179091558054600f805492959491929091906116f6908490611cd7565b909155505082546001600160a01b0385165f9081526004602052604081208054909190611724908490611d5a565b90915550506001600160a01b0384165f9081526003602052604081208181556001810180546001600160a01b031916905590611763600283018261195f565b506003810180546001600160a01b0319908116909155600490910180549091169055604051600590611799906002860190611f81565b908152604051908190036020019020805460ff19169055600e8054905f6117bf83611ff2565b9190505550600e5460010361188757600880546001600160a01b039081165f81815260036020819052604080832090910180546001600160a01b0319908116909417905584548416808352818320600401805485169091179055845480851683529120805460079081556001820154909416919092161790925560096118486002840182611e85565b5060038281015490820180546001600160a01b03199081166001600160a01b039384161790915560049384015493909201805490921692169190911790555b50505050565b5f7f0000000000000000000000000000000000000000000000000000000000000000600c546118bc9190611d5a565b431015905090565b6001600160a01b0381165f908152600360205260408120805490919061190b907f000000000000000000000000000000000000000000000000000000000000000090612007565b90505f81121561191e576106e68361131d565b808255600f80547f000000000000000000000000000000000000000000000000000000000000000091905f90611955908490611cd7565b9091555050505050565b50805461196b90611c91565b5f825580601f1061197a575050565b601f0160209004905f5260205f20908101906119969190611999565b50565b5b808211156119ad575f815560010161199a565b5090565b80356001600160a01b03811681146119c7575f5ffd5b919050565b5f602082840312156119dc575f5ffd5b6119e5826119b1565b9392505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b8581526001600160a01b038516602082015260a0604082018190525f90611a43908301866119ec565b6001600160a01b03948516606084015292909316608090910152949350505050565b5f60208284031215611a75575f5ffd5b5035919050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b82811015611b1f57603f1987860301845281518051865260018060a01b036020820151166020870152604081015160a06040880152611ae460a08801826119ec565b6060838101516001600160a01b03908116918a0191909152608093840151169290970191909152506020938401939190910190600101611aa2565b50929695505050505050565b5f5f60408385031215611b3c575f5ffd5b611b45836119b1565b9150611b53602084016119b1565b90509250929050565b5f5f60208385031215611b6d575f5ffd5b823567ffffffffffffffff811115611b83575f5ffd5b8301601f81018513611b93575f5ffd5b803567ffffffffffffffff811115611ba9575f5ffd5b856020828401011115611bba575f5ffd5b6020919091019590945092505050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215611bee575f5ffd5b813567ffffffffffffffff811115611c04575f5ffd5b8201601f81018413611c14575f5ffd5b803567ffffffffffffffff811115611c2e57611c2e611bca565b604051601f8201601f19908116603f0116810167ffffffffffffffff81118282101715611c5d57611c5d611bca565b604052818152828201602001861015611c74575f5ffd5b816020840160208301375f91810160200191909152949350505050565b600181811c90821680611ca557607f821691505b6020821081036109ce57634e487b7160e01b5f52602260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b81810381811115611cea57611cea611cc3565b92915050565b634e487b7160e01b5f52603260045260245ffd5b60208082526017908201527f43616c6c6572206973206e6f7420746865206f776e6572000000000000000000604082015260600190565b5f60208284031215611d4b575f5ffd5b815180151581146119e5575f5ffd5b80820180821115611cea57611cea611cc3565b818382375f9101908152919050565b601f8211156106e657805f5260205f20601f840160051c81016020851015611da15750805b601f840160051c820191505b81811015611dc0575f8155600101611dad565b5050505050565b815167ffffffffffffffff811115611de157611de1611bca565b611df581611def8454611c91565b84611d7c565b6020601f821160018114611e2a575f8315611e105750848201515b600184901b5f19600386901b1c198216175b855550611dc0565b5f84815260208120601f198516915b82811015611e595787850151825560209485019460019092019101611e39565b5084821015611e7657868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b818103611e90575050565b611e9a8254611c91565b67ffffffffffffffff811115611eb257611eb2611bca565b611ec081611def8454611c91565b5f601f821160018114611eef575f8315611e10575081850154600184901b5f19600386901b1c19821617611e22565b5f8581526020808220868352908220601f198616925b83811015611f255782860154825560019586019590910190602001611f05565b5085831015611f4257818501545f19600388901b60f8161c191681555b5050505050600190811b01905550565b5f60018201611f6357611f63611cc3565b5060010190565b5f60208284031215611f7a575f5ffd5b5051919050565b5f5f8354611f8e81611c91565b600182168015611fa55760018114611fba57611fe7565b60ff1983168652811515820286019350611fe7565b865f5260205f205f5b83811015611fdf57815488820152600190910190602001611fc3565b505081860193505b509195945050505050565b5f8161200057612000611cc3565b505f190190565b8181035f83128015838313168383128216171561202657612026611cc3565b509291505056fea2646970667358221220ff6228799b2d2c715a6bcf643ddd55e6e6fb5e8b27ad82ddaec2dfa0b3871d5c64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01GW_5`\xE0\x1C\x80cu\x0F%\xF4\x11a\0\xB3W\x80c\xC1/fn\x11a\0mW\x80c\xC1/fn\x14a\x03\xDAW\x80c\xC79\xD7\x9C\x14a\x03\xEEW\x80c\xD1\xCE\xF1\xEE\x14a\x04\x19W\x80c\xD5\xE6\xC6\xF9\x14a\x04cW\x80c\xD7\xAEv\xB6\x14a\x04\x82W\x80c\xE2\xFD\xCC\x17\x14a\x04\xB5W__\xFD[\x80cu\x0F%\xF4\x14a\x03\x0EW\x80c\x8D\xA5\xCB[\x14a\x03?W\x80c\x97\xC1\xD0G\x14a\x03^W\x80c\x97\xE2\r\x0E\x14a\x03\x91W\x80c\xA8@J\xEE\x14a\x03\xB0W\x80c\xAC+\xEC\xA0\x14a\x03\xC5W__\xFD[\x80c.\x1A}M\x11a\x01\x04W\x80c.\x1A}M\x14a\x02UW\x80cH\xC0\xF4\x87\x14a\x02tW\x80cJ\x8A@s\x14a\x02\x95W\x80cK\x98\xB3\xB6\x14a\x02\xB4W\x80cT\x83\x13T\x14a\x02\xC8W\x80cU\xC2]\x17\x14a\x02\xFBW__\xFD[\x80c\n\xCFO\x93\x14a\x01KW\x80c\x12_\xDB\xBC\x14a\x01\x91W\x80c\x18\x17t\x97\x14a\x01\xC4W\x80c\x19Okd\x14a\x01\xF4W\x80c\x1F\xFF\xF6\x98\x14a\x02\x15W\x80c\"\xB0\x92\xAF\x14a\x02*W[__\xFD[4\x80\x15a\x01VW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[`@Q\x90\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\x9CW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x01\xCFW__\xFD[Pa\x01\xE3a\x01\xDE6`\x04a\x19\xCCV[a\x04\xCAV[`@Qa\x01\x88\x95\x94\x93\x92\x91\x90a\x1A\x1AV[4\x80\x15a\x01\xFFW__\xFD[Pa\x02\x13a\x02\x0E6`\x04a\x19\xCCV[a\x05\x95V[\0[4\x80\x15a\x02 W__\xFD[Pa\x01~`\x0ET\x81V[4\x80\x15a\x025W__\xFD[Pa\x01~a\x02D6`\x04a\x19\xCCV[`\x06` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x02`W__\xFD[Pa\x02\x13a\x02o6`\x04a\x1AeV[a\x06$V[4\x80\x15a\x02\x7FW__\xFD[Pa\x02\x88a\x06\xEBV[`@Qa\x01\x88\x91\x90a\x1A|V[4\x80\x15a\x02\xA0W__\xFD[Pa\x02\x13a\x02\xAF6`\x04a\x1B+V[a\t\xD4V[4\x80\x15a\x02\xBFW__\xFD[Pa\x02\x13a\n.V[4\x80\x15a\x02\xD3W__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[a\x02\x13a\x03\t6`\x04a\x1B\\V[a\n9V[4\x80\x15a\x03\x19W__\xFD[P`\x08T`\x01`\x01`\xA0\x1B\x03\x16[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\x88V[4\x80\x15a\x03JW__\xFD[P`\x02Ta\x03'\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[4\x80\x15a\x03iW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x03\x9CW__\xFD[Pa\x02\x13a\x03\xAB6`\x04a\x19\xCCV[a\x10\x9CV[4\x80\x15a\x03\xBBW__\xFD[Pa\x01~`\rT\x81V[4\x80\x15a\x03\xD0W__\xFD[Pa\x01~`\x0CT\x81V[4\x80\x15a\x03\xE5W__\xFD[Pa\x02\x13a\x10\xE8V[4\x80\x15a\x03\xF9W__\xFD[Pa\x01~a\x04\x086`\x04a\x19\xCCV[`\x04` R_\x90\x81R`@\x90 T\x81V[4\x80\x15a\x04$W__\xFD[Pa\x04Sa\x0436`\x04a\x1B\xDEV[\x80Q` \x81\x83\x01\x81\x01\x80Q`\x05\x82R\x92\x82\x01\x91\x90\x93\x01 \x91RT`\xFF\x16\x81V[`@Q\x90\x15\x15\x81R` \x01a\x01\x88V[4\x80\x15a\x04nW__\xFD[Pa\x02\x13a\x04}6`\x04a\x19\xCCV[a\x12\xD2V[4\x80\x15a\x04\x8DW__\xFD[Pa\x01~\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81V[4\x80\x15a\x04\xC0W__\xFD[Pa\x01~`\x0FT\x81V[`\x03` R_\x90\x81R`@\x90 \x80T`\x01\x82\x01T`\x02\x83\x01\x80T\x92\x93`\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x92a\x04\xFB\x90a\x1C\x91V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05'\x90a\x1C\x91V[\x80\x15a\x05rW\x80`\x1F\x10a\x05IWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05rV[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05UW\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPP`\x03\x83\x01T`\x04\x90\x93\x01T\x91\x92`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x92\x16\x90P\x85V[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x06\x02W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FOnly the owner can call this fun`D\x82\x01Rd1\xBA4\xB7\xB7`\xD9\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x10\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[3_\x90\x81R`\x04` R`@\x90 T\x80\x82\x11\x15a\x06\x99W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FYou are trying to withdraw more `D\x82\x01Rlthan you have`\x98\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[3_\x90\x81R`\x04` R`@\x81 \x80T\x84\x92\x90a\x06\xB7\x90\x84\x90a\x1C\xD7V[\x90\x91UPP`@Q3\x90\x83\x15a\x08\xFC\x02\x90\x84\x90_\x81\x81\x81\x85\x88\x88\xF1\x93PPPP\x15\x80\x15a\x06\xE6W=__>=_\xFD[PPPV[``_`\x0ETg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x07\tWa\x07\ta\x1B\xCAV[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x07aW\x81` \x01[`@\x80Q`\xA0\x81\x01\x82R_\x80\x82R` \x80\x83\x01\x82\x90R``\x93\x83\x01\x84\x90R\x92\x82\x01\x81\x90R`\x80\x82\x01R\x82R_\x19\x90\x92\x01\x91\x01\x81a\x07'W\x90P[P`@\x80Q`\xA0\x81\x01\x82R`\x07\x80T\x82R`\x08T`\x01`\x01`\xA0\x1B\x03\x16` \x83\x01R`\t\x80T\x94\x95P\x91\x93\x90\x92\x84\x01\x91\x90a\x07\x9B\x90a\x1C\x91V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x07\xC7\x90a\x1C\x91V[\x80\x15a\x08\x12W\x80`\x1F\x10a\x07\xE9Wa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x08\x12V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x07\xF5W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x83RPP`\x03\x82\x01T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x04\x90\x92\x01T\x90\x91\x16`@\x90\x91\x01R\x81Q\x82\x90_\x90a\x08PWa\x08Pa\x1C\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01[`\x0ET\x81\x10\x15a\t\xCEW`\x03_\x83a\x08w`\x01\x85a\x1C\xD7V[\x81Q\x81\x10a\x08\x87Wa\x08\x87a\x1C\xF0V[` \x02` \x01\x01Q``\x01Q`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01\x90\x81R` \x01_ `@Q\x80`\xA0\x01`@R\x90\x81_\x82\x01T\x81R` \x01`\x01\x82\x01_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16\x81R` \x01`\x02\x82\x01\x80Ta\t\x04\x90a\x1C\x91V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\t0\x90a\x1C\x91V[\x80\x15a\t{W\x80`\x1F\x10a\tRWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\t{V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\t^W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPP\x91\x83RPP`\x03\x82\x01T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16` \x83\x01R`\x04\x90\x92\x01T\x90\x91\x16`@\x90\x91\x01R\x82Q\x83\x90\x83\x90\x81\x10a\t\xBBWa\t\xBBa\x1C\xF0V[` \x90\x81\x02\x91\x90\x91\x01\x01R`\x01\x01a\x08^V[P\x91\x90PV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\t\xFEW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF9\x90a\x1D\x04V[_\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x01\x80T\x93\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90UV[a\n73a\x13\x1DV[V[_T`@Qc\xE2<'\xE9`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xE2<'\xE9\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\n~W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\n\xA2\x91\x90a\x1D;V[a\x0B\x14W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`=`$\x82\x01R\x7FCertified: You are not authorise`D\x82\x01R\x7Fd to transact using Nightfall\0\0\0`d\x82\x01R`\x84\x01a\x05\xF9V[`\x01T`@Qc\xDFY/}`\xE0\x1B\x81R3`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\xDFY/}\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x0BZW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x0B~\x91\x90a\x1D;V[\x15a\x0B\xE8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`4`$\x82\x01R\x7FCertified: You are on the Chaina`D\x82\x01Rs\x1B\x1E\\\xDA\\\xC8\x1C\xD8[\x98\xDD\x1A[\xDB\x9C\xC8\x1B\x1A\\\xDD`b\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[3_\x90\x81R`\x06` R`@\x90 T\x15a\x0C\x84W3_\x90\x81R`\x06` R`@\x90 Ta\x0C6\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a\x1DZV[C\x11a\x0C\x84W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x17`$\x82\x01R\x7FCooldown period not met\0\0\0\0\0\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x004\x14a\r\x1BW`@\x80QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x81\x01\x91\x90\x91R\x7FYou have not paid the correct st`D\x82\x01R\x7Faking amount during registration`d\x82\x01R`\x84\x01a\x05\xF9V[3_\x90\x81R`\x03` R`@\x90 `\x01\x01T`\x01`\x01`\xA0\x1B\x03\x16\x15a\r\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FYou are already a proposer\0\0\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[`\x05\x82\x82`@Qa\r\x95\x92\x91\x90a\x1DmV[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 T`\xFF\x16\x15a\x0E\x01W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FThis proposer URL is already in `D\x82\x01Rbuse`\xE8\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0F_\x82\x82Ta\x0E2\x91\x90a\x1DZV[\x90\x91UPP`\x08T`\x0BT`\nT`@\x80Q`\xA0\x81\x01\x82R\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x81R3` \x80\x83\x01\x91\x90\x91R\x82Q`\x1F\x88\x01\x82\x90\x04\x82\x02\x81\x01\x82\x01\x84R\x87\x81R`\x01`\x01`\xA0\x1B\x03\x96\x87\x16\x96\x95\x86\x16\x95\x90\x94\x16\x93\x91\x92\x83\x01\x91\x90\x88\x90\x88\x90\x81\x90\x84\x01\x83\x82\x80\x82\x847_\x92\x01\x82\x90RP\x93\x85RPPP`\x01`\x01`\xA0\x1B\x03\x86\x81\x16` \x80\x85\x01\x91\x90\x91R\x86\x82\x16`@\x94\x85\x01R3\x83R`\x03\x81R\x91\x83\x90 \x84Q\x81U\x91\x84\x01Q`\x01\x83\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x92\x16\x17\x90U\x90\x82\x01Q`\x02\x82\x01\x90a\x0F\x1A\x90\x82a\x1D\xC7V[P``\x82\x01Q`\x03\x82\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x90\x91U`\x80\x90\x94\x01Q`\x04\x93\x84\x01\x80T\x86\x16\x91\x84\x16\x91\x90\x91\x17\x90U\x86\x82\x16_\x81\x81R` \x83\x90R`@\x80\x82 \x90\x95\x01\x80T3\x90\x88\x16\x81\x17\x90\x91U\x88\x85\x16\x82R\x94\x90 \x90\x91\x01\x80T\x90\x94\x16\x90\x92\x17\x90\x92U\x90\x82\x16\x03a\x0F\xC3W`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x03` \x81\x90R`@\x90\x91 \x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x163\x17\x90U[`\x01`\x05\x86\x86`@Qa\x0F\xD7\x92\x91\x90a\x1DmV[\x90\x81R`@\x80Q` \x92\x81\x90\x03\x83\x01\x90 \x80T`\xFF\x19\x16\x93\x15\x15\x93\x90\x93\x17\x90\x92U`\x01`\x01`\xA0\x1B\x03\x85\x81\x16_\x90\x81R`\x03\x90\x92R\x91\x90 \x80T`\x07\x90\x81U`\x01\x82\x01T`\x08\x80T\x91\x90\x94\x16`\x01`\x01`\xA0\x1B\x03\x19\x90\x91\x16\x17\x90\x92U\x90`\ta\x10C`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x93\x90\x92\x01\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U`\x0E\x80T\x90_a\x10\x90\x83a\x1FRV[\x91\x90PUPPPPPPV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x10\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF9\x90a\x1D\x04V[`\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[a\x10\xF0a\x18\x8DV[a\x11JW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FIt is not time to rotate the pro`D\x82\x01Rd87\xB9\xB2\xB9`\xD9\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[`\rT`\x10_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16c(\xC3\xD7\xE6`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x11\x9DW=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x11\xC1\x91\x90a\x1FjV[\x03a\x11\xDBW`\x08Ta\x11\xDB\x90`\x01`\x01`\xA0\x1B\x03\x16a\x18\xC4V[`\nT`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x03` R`@\x90 \x80T`\x07\x90\x81U`\x01\x82\x01T`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x94\x16\x17\x90\x92U\x90`\ta\x12(`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x92\x84\x01\x80T\x90\x91\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91UC`\x0CU`\x10T`@\x80Qc\x14a\xEB\xF3`\xE1\x1B\x81R\x90Q\x91\x90\x92\x16\x92c(\xC3\xD7\xE6\x92\x80\x82\x01\x92` \x92\x90\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x12\xA9W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x12\xCD\x91\x90a\x1FjV[`\rUV[`\x02T`\x01`\x01`\xA0\x1B\x03\x163\x14a\x12\xFCW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x05\xF9\x90a\x1D\x04V[_\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x90\x92\x16\x91\x90\x91\x17\x90UV[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16_\x81\x81R`\x03` R`@\x90 `\x01\x01T\x90\x91\x16\x14a\x13\x89W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1C`$\x82\x01R\x7FThis proposer does not exist\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[`\x01`\x01`\xA0\x1B\x03\x81\x16a\x13\xEBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FThe proposer address cannot be z`D\x82\x01Rbero`\xE8\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[`\x08T`\x01`\x01`\xA0\x1B\x03\x163\x03a\x16}W`\x01`\x0ET\x11a\x14bW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FCannot deregister the only activ`D\x82\x01Ri2\x90897\xB87\xB9\xB2\xB9`\xB1\x1B`d\x82\x01R`\x84\x01a\x05\xF9V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` R`@\x90 T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x11\x15a\x14\xE9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1B`$\x82\x01R\x7FInsufficient stake for exit\0\0\0\0\0`D\x82\x01R`d\x01a\x05\xF9V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` R`@\x81 \x80T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x92\x90a\x150\x90\x84\x90a\x1C\xD7V[\x92PP\x81\x90UP\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0F_\x82\x82Ta\x15h\x91\x90a\x1C\xD7V[\x90\x91UPP`\nT`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x90\x81R`\x03` R`@\x90 \x80T`\x07\x90\x81U`\x01\x82\x01T`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x91\x90\x94\x16\x17\x90\x92U\x90`\ta\x15\xBA`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x92\x84\x01\x80T\x90\x91\x16\x92\x82\x16\x92\x90\x92\x17\x90\x91UC`\x0CU`\x10T`@\x80Qc\x14a\xEB\xF3`\xE1\x1B\x81R\x90Q\x91\x90\x92\x16\x92c(\xC3\xD7\xE6\x92\x80\x82\x01\x92` \x92\x90\x91\x82\x90\x03\x01\x81\x86Z\xFA\x15\x80\x15a\x16;W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x16_\x91\x90a\x1FjV[`\rU`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x06` R`@\x90 C\x90U[`\x01`\x01`\xA0\x1B\x03\x80\x82\x16_\x90\x81R`\x03` \x81\x90R`@\x80\x83 \x80\x83\x01\x80T\x86\x16\x85R\x82\x85 `\x04\x80\x84\x01T\x88\x16\x80\x88R\x94\x87 \x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x96\x17\x90U\x91T\x94\x82\x01\x80T\x90\x94\x16\x94\x90\x96\x16\x93\x90\x93\x17\x90\x91U\x80T`\x0F\x80T\x92\x95\x94\x91\x92\x90\x91\x90a\x16\xF6\x90\x84\x90a\x1C\xD7V[\x90\x91UPP\x82T`\x01`\x01`\xA0\x1B\x03\x85\x16_\x90\x81R`\x04` R`@\x81 \x80T\x90\x91\x90a\x17$\x90\x84\x90a\x1DZV[\x90\x91UPP`\x01`\x01`\xA0\x1B\x03\x84\x16_\x90\x81R`\x03` R`@\x81 \x81\x81U`\x01\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16\x90U\x90a\x17c`\x02\x83\x01\x82a\x19_V[P`\x03\x81\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x91U`\x04\x90\x91\x01\x80T\x90\x91\x16\x90U`@Q`\x05\x90a\x17\x99\x90`\x02\x86\x01\x90a\x1F\x81V[\x90\x81R`@Q\x90\x81\x90\x03` \x01\x90 \x80T`\xFF\x19\x16\x90U`\x0E\x80T\x90_a\x17\xBF\x83a\x1F\xF2V[\x91\x90PUP`\x0ET`\x01\x03a\x18\x87W`\x08\x80T`\x01`\x01`\xA0\x1B\x03\x90\x81\x16_\x81\x81R`\x03` \x81\x90R`@\x80\x83 \x90\x91\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16\x90\x94\x17\x90U\x84T\x84\x16\x80\x83R\x81\x83 `\x04\x01\x80T\x85\x16\x90\x91\x17\x90U\x84T\x80\x85\x16\x83R\x91 \x80T`\x07\x90\x81U`\x01\x82\x01T\x90\x94\x16\x91\x90\x92\x16\x17\x90\x92U`\ta\x18H`\x02\x84\x01\x82a\x1E\x85V[P`\x03\x82\x81\x01T\x90\x82\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x90\x81\x16`\x01`\x01`\xA0\x1B\x03\x93\x84\x16\x17\x90\x91U`\x04\x93\x84\x01T\x93\x90\x92\x01\x80T\x90\x92\x16\x92\x16\x91\x90\x91\x17\x90U[PPPPV[_\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0`\x0CTa\x18\xBC\x91\x90a\x1DZV[C\x10\x15\x90P\x90V[`\x01`\x01`\xA0\x1B\x03\x81\x16_\x90\x81R`\x03` R`@\x81 \x80T\x90\x91\x90a\x19\x0B\x90\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x90a \x07V[\x90P_\x81\x12\x15a\x19\x1EWa\x06\xE6\x83a\x13\x1DV[\x80\x82U`\x0F\x80T\x7F\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x91\x90_\x90a\x19U\x90\x84\x90a\x1C\xD7V[\x90\x91UPPPPPV[P\x80Ta\x19k\x90a\x1C\x91V[_\x82U\x80`\x1F\x10a\x19zWPPV[`\x1F\x01` \x90\x04\x90_R` _ \x90\x81\x01\x90a\x19\x96\x91\x90a\x19\x99V[PV[[\x80\x82\x11\x15a\x19\xADW_\x81U`\x01\x01a\x19\x9AV[P\x90V[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\x19\xC7W__\xFD[\x91\x90PV[_` \x82\x84\x03\x12\x15a\x19\xDCW__\xFD[a\x19\xE5\x82a\x19\xB1V[\x93\x92PPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[\x85\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16` \x82\x01R`\xA0`@\x82\x01\x81\x90R_\x90a\x1AC\x90\x83\x01\x86a\x19\xECV[`\x01`\x01`\xA0\x1B\x03\x94\x85\x16``\x84\x01R\x92\x90\x93\x16`\x80\x90\x91\x01R\x94\x93PPPPV[_` \x82\x84\x03\x12\x15a\x1AuW__\xFD[P5\x91\x90PV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\x1B\x1FW`?\x19\x87\x86\x03\x01\x84R\x81Q\x80Q\x86R`\x01\x80`\xA0\x1B\x03` \x82\x01Q\x16` \x87\x01R`@\x81\x01Q`\xA0`@\x88\x01Ra\x1A\xE4`\xA0\x88\x01\x82a\x19\xECV[``\x83\x81\x01Q`\x01`\x01`\xA0\x1B\x03\x90\x81\x16\x91\x8A\x01\x91\x90\x91R`\x80\x93\x84\x01Q\x16\x92\x90\x97\x01\x91\x90\x91RP` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\x1A\xA2V[P\x92\x96\x95PPPPPPV[__`@\x83\x85\x03\x12\x15a\x1B<W__\xFD[a\x1BE\x83a\x19\xB1V[\x91Pa\x1BS` \x84\x01a\x19\xB1V[\x90P\x92P\x92\x90PV[__` \x83\x85\x03\x12\x15a\x1BmW__\xFD[\x825g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\x83W__\xFD[\x83\x01`\x1F\x81\x01\x85\x13a\x1B\x93W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1B\xA9W__\xFD[\x85` \x82\x84\x01\x01\x11\x15a\x1B\xBAW__\xFD[` \x91\x90\x91\x01\x95\x90\x94P\x92PPPV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_` \x82\x84\x03\x12\x15a\x1B\xEEW__\xFD[\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C\x04W__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a\x1C\x14W__\xFD[\x805g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1C.Wa\x1C.a\x1B\xCAV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a\x1C]Wa\x1C]a\x1B\xCAV[`@R\x81\x81R\x82\x82\x01` \x01\x86\x10\x15a\x1CtW__\xFD[\x81` \x84\x01` \x83\x017_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x1C\xA5W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\t\xCEWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x1C\xEAWa\x1C\xEAa\x1C\xC3V[\x92\x91PPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[` \x80\x82R`\x17\x90\x82\x01R\x7FCaller is not the owner\0\0\0\0\0\0\0\0\0`@\x82\x01R``\x01\x90V[_` \x82\x84\x03\x12\x15a\x1DKW__\xFD[\x81Q\x80\x15\x15\x81\x14a\x19\xE5W__\xFD[\x80\x82\x01\x80\x82\x11\x15a\x1C\xEAWa\x1C\xEAa\x1C\xC3V[\x81\x83\x827_\x91\x01\x90\x81R\x91\x90PV[`\x1F\x82\x11\x15a\x06\xE6W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x1D\xA1WP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x1D\xC0W_\x81U`\x01\x01a\x1D\xADV[PPPPPV[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1D\xE1Wa\x1D\xE1a\x1B\xCAV[a\x1D\xF5\x81a\x1D\xEF\x84Ta\x1C\x91V[\x84a\x1D|V[` `\x1F\x82\x11`\x01\x81\x14a\x1E*W_\x83\x15a\x1E\x10WP\x84\x82\x01Q[`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17[\x85UPa\x1D\xC0V[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x1EYW\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x1E9V[P\x84\x82\x10\x15a\x1EvW\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[\x81\x81\x03a\x1E\x90WPPV[a\x1E\x9A\x82Ta\x1C\x91V[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x1E\xB2Wa\x1E\xB2a\x1B\xCAV[a\x1E\xC0\x81a\x1D\xEF\x84Ta\x1C\x91V[_`\x1F\x82\x11`\x01\x81\x14a\x1E\xEFW_\x83\x15a\x1E\x10WP\x81\x85\x01T`\x01\x84\x90\x1B_\x19`\x03\x86\x90\x1B\x1C\x19\x82\x16\x17a\x1E\"V[_\x85\x81R` \x80\x82 \x86\x83R\x90\x82 `\x1F\x19\x86\x16\x92[\x83\x81\x10\x15a\x1F%W\x82\x86\x01T\x82U`\x01\x95\x86\x01\x95\x90\x91\x01\x90` \x01a\x1F\x05V[P\x85\x83\x10\x15a\x1FBW\x81\x85\x01T_\x19`\x03\x88\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPPP`\x01\x90\x81\x1B\x01\x90UPV[_`\x01\x82\x01a\x1FcWa\x1Fca\x1C\xC3V[P`\x01\x01\x90V[_` \x82\x84\x03\x12\x15a\x1FzW__\xFD[PQ\x91\x90PV[__\x83Ta\x1F\x8E\x81a\x1C\x91V[`\x01\x82\x16\x80\x15a\x1F\xA5W`\x01\x81\x14a\x1F\xBAWa\x1F\xE7V[`\xFF\x19\x83\x16\x86R\x81\x15\x15\x82\x02\x86\x01\x93Pa\x1F\xE7V[\x86_R` _ _[\x83\x81\x10\x15a\x1F\xDFW\x81T\x88\x82\x01R`\x01\x90\x91\x01\x90` \x01a\x1F\xC3V[PP\x81\x86\x01\x93P[P\x91\x95\x94PPPPPV[_\x81a \0Wa \0a\x1C\xC3V[P_\x19\x01\x90V[\x81\x81\x03_\x83\x12\x80\x15\x83\x83\x13\x16\x83\x83\x12\x82\x16\x17\x15a &Wa &a\x1C\xC3V[P\x92\x91PPV\xFE\xA2dipfsX\"\x12 \xFFb(y\x9B-,qZk\xCFd=\xDDU\xE6\xE6\xFB^\x8B'\xAD\x82\xDD\xAE\xC2\xDF\xA0\xB3\x87\x1D\\dsolcC\0\x08\x1C\x003",
    );
    /**```solidity
struct Proposer { uint256 stake; address addr; string url; address next_addr; address previous_addr; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Proposer {
        pub stake: alloy::sol_types::private::primitives::aliases::U256,
        pub addr: alloy::sol_types::private::Address,
        pub url: alloy::sol_types::private::String,
        pub next_addr: alloy::sol_types::private::Address,
        pub previous_addr: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::String,
            alloy::sol_types::sol_data::Address,
            alloy::sol_types::sol_data::Address,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::String,
            alloy::sol_types::private::Address,
            alloy::sol_types::private::Address,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Proposer> for UnderlyingRustTuple<'_> {
            fn from(value: Proposer) -> Self {
                (
                    value.stake,
                    value.addr,
                    value.url,
                    value.next_addr,
                    value.previous_addr,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Proposer {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    stake: tuple.0,
                    addr: tuple.1,
                    url: tuple.2,
                    next_addr: tuple.3,
                    previous_addr: tuple.4,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Proposer {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Proposer {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.stake),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.addr,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.url,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.next_addr,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.previous_addr,
                    ),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Proposer {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Proposer {
            const NAME: &'static str = "Proposer";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Proposer(uint256 stake,address addr,string url,address next_addr,address previous_addr)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.stake)
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.addr,
                        )
                        .0,
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::eip712_data_word(
                            &self.url,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.next_addr,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::eip712_data_word(
                            &self.previous_addr,
                        )
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Proposer {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.stake)
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.addr,
                    )
                    + <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.url,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.next_addr,
                    )
                    + <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.previous_addr,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.stake,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.addr,
                    out,
                );
                <alloy::sol_types::sol_data::String as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.url,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.next_addr,
                    out,
                );
                <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.previous_addr,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Event with signature `ProposerRotated((uint256,address,string,address,address))` and selector `0xac3b1c6929a3b1b529eacc46720f90c2d54b834345dca9ba7d7a9483e0de52be`.
```solidity
event ProposerRotated(Proposer proposer);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ProposerRotated {
        #[allow(missing_docs)]
        pub proposer: <Proposer as alloy::sol_types::SolType>::RustType,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ProposerRotated {
            type DataTuple<'a> = (Proposer,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (alloy_sol_types::sol_data::FixedBytes<32>,);
            const SIGNATURE: &'static str = "ProposerRotated((uint256,address,string,address,address))";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                172u8,
                59u8,
                28u8,
                105u8,
                41u8,
                163u8,
                177u8,
                181u8,
                41u8,
                234u8,
                204u8,
                70u8,
                114u8,
                15u8,
                144u8,
                194u8,
                213u8,
                75u8,
                131u8,
                67u8,
                69u8,
                220u8,
                169u8,
                186u8,
                125u8,
                122u8,
                148u8,
                131u8,
                224u8,
                222u8,
                82u8,
                190u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self { proposer: data.0 }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (<Proposer as alloy_sol_types::SolType>::tokenize(&self.proposer),)
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(),)
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ProposerRotated {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ProposerRotated> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ProposerRotated) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(address x509_address, address sanctionsListAddress, address default_proposer_address, string default_proposer_url, uint256 stake, uint256 ding, uint256 exit_penalty, uint256 cooling_blocks, uint256 rotation_blocks) payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub x509_address: alloy::sol_types::private::Address,
        pub sanctionsListAddress: alloy::sol_types::private::Address,
        pub default_proposer_address: alloy::sol_types::private::Address,
        pub default_proposer_url: alloy::sol_types::private::String,
        pub stake: alloy::sol_types::private::primitives::aliases::U256,
        pub ding: alloy::sol_types::private::primitives::aliases::U256,
        pub exit_penalty: alloy::sol_types::private::primitives::aliases::U256,
        pub cooling_blocks: alloy::sol_types::private::primitives::aliases::U256,
        pub rotation_blocks: alloy::sol_types::private::primitives::aliases::U256,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (
                        value.x509_address,
                        value.sanctionsListAddress,
                        value.default_proposer_address,
                        value.default_proposer_url,
                        value.stake,
                        value.ding,
                        value.exit_penalty,
                        value.cooling_blocks,
                        value.rotation_blocks,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        x509_address: tuple.0,
                        sanctionsListAddress: tuple.1,
                        default_proposer_address: tuple.2,
                        default_proposer_url: tuple.3,
                        stake: tuple.4,
                        ding: tuple.5,
                        exit_penalty: tuple.6,
                        cooling_blocks: tuple.7,
                        rotation_blocks: tuple.8,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.x509_address,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sanctionsListAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.default_proposer_address,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.default_proposer_url,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.stake),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.ding),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.exit_penalty),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.cooling_blocks),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.rotation_blocks),
                )
            }
        }
    };
    /**Function with signature `COOLDOWN_BLOCKS()` and selector `0x54831354`.
```solidity
function COOLDOWN_BLOCKS() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct COOLDOWN_BLOCKSCall {}
    ///Container type for the return parameters of the [`COOLDOWN_BLOCKS()`](COOLDOWN_BLOCKSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct COOLDOWN_BLOCKSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<COOLDOWN_BLOCKSCall> for UnderlyingRustTuple<'_> {
                fn from(value: COOLDOWN_BLOCKSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for COOLDOWN_BLOCKSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<COOLDOWN_BLOCKSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: COOLDOWN_BLOCKSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for COOLDOWN_BLOCKSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for COOLDOWN_BLOCKSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = COOLDOWN_BLOCKSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "COOLDOWN_BLOCKS()";
            const SELECTOR: [u8; 4] = [84u8, 131u8, 19u8, 84u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `DING()` and selector `0xd7ae76b6`.
```solidity
function DING() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DINGCall {}
    ///Container type for the return parameters of the [`DING()`](DINGCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DINGReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DINGCall> for UnderlyingRustTuple<'_> {
                fn from(value: DINGCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for DINGCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<DINGReturn> for UnderlyingRustTuple<'_> {
                fn from(value: DINGReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for DINGReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for DINGCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = DINGReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "DING()";
            const SELECTOR: [u8; 4] = [215u8, 174u8, 118u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `EXIT_PENALTY()` and selector `0x0acf4f93`.
```solidity
function EXIT_PENALTY() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EXIT_PENALTYCall {}
    ///Container type for the return parameters of the [`EXIT_PENALTY()`](EXIT_PENALTYCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct EXIT_PENALTYReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EXIT_PENALTYCall> for UnderlyingRustTuple<'_> {
                fn from(value: EXIT_PENALTYCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for EXIT_PENALTYCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<EXIT_PENALTYReturn> for UnderlyingRustTuple<'_> {
                fn from(value: EXIT_PENALTYReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for EXIT_PENALTYReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for EXIT_PENALTYCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = EXIT_PENALTYReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "EXIT_PENALTY()";
            const SELECTOR: [u8; 4] = [10u8, 207u8, 79u8, 147u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ROTATION_BlOCKS()` and selector `0x97c1d047`.
```solidity
function ROTATION_BlOCKS() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROTATION_BlOCKSCall {}
    ///Container type for the return parameters of the [`ROTATION_BlOCKS()`](ROTATION_BlOCKSCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ROTATION_BlOCKSReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROTATION_BlOCKSCall> for UnderlyingRustTuple<'_> {
                fn from(value: ROTATION_BlOCKSCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ROTATION_BlOCKSCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ROTATION_BlOCKSReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: ROTATION_BlOCKSReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for ROTATION_BlOCKSReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ROTATION_BlOCKSCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ROTATION_BlOCKSReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ROTATION_BlOCKS()";
            const SELECTOR: [u8; 4] = [151u8, 193u8, 208u8, 71u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `STAKE()` and selector `0x125fdbbc`.
```solidity
function STAKE() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STAKECall {}
    ///Container type for the return parameters of the [`STAKE()`](STAKECall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct STAKEReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STAKECall> for UnderlyingRustTuple<'_> {
                fn from(value: STAKECall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for STAKECall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<STAKEReturn> for UnderlyingRustTuple<'_> {
                fn from(value: STAKEReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for STAKEReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for STAKECall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = STAKEReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "STAKE()";
            const SELECTOR: [u8; 4] = [18u8, 95u8, 219u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `add_proposer(string)` and selector `0x55c25d17`.
```solidity
function add_proposer(string memory proposer_url) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct add_proposerCall {
        pub proposer_url: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`add_proposer(string)`](add_proposerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct add_proposerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<add_proposerCall> for UnderlyingRustTuple<'_> {
                fn from(value: add_proposerCall) -> Self {
                    (value.proposer_url,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for add_proposerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { proposer_url: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<add_proposerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: add_proposerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for add_proposerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for add_proposerCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = add_proposerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "add_proposer(string)";
            const SELECTOR: [u8; 4] = [85u8, 194u8, 93u8, 23u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.proposer_url,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `escrow()` and selector `0xe2fdcc17`.
```solidity
function escrow() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct escrowCall {}
    ///Container type for the return parameters of the [`escrow()`](escrowCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct escrowReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<escrowCall> for UnderlyingRustTuple<'_> {
                fn from(value: escrowCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for escrowCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<escrowReturn> for UnderlyingRustTuple<'_> {
                fn from(value: escrowReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for escrowReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for escrowCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = escrowReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "escrow()";
            const SELECTOR: [u8; 4] = [226u8, 253u8, 204u8, 23u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `get_current_proposer_address()` and selector `0x750f25f4`.
```solidity
function get_current_proposer_address() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_current_proposer_addressCall {}
    ///Container type for the return parameters of the [`get_current_proposer_address()`](get_current_proposer_addressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_current_proposer_addressReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_current_proposer_addressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: get_current_proposer_addressCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for get_current_proposer_addressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_current_proposer_addressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: get_current_proposer_addressReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for get_current_proposer_addressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for get_current_proposer_addressCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = get_current_proposer_addressReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get_current_proposer_address()";
            const SELECTOR: [u8; 4] = [117u8, 15u8, 37u8, 244u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `get_proposers()` and selector `0x48c0f487`.
```solidity
function get_proposers() external view returns (Proposer[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_proposersCall {}
    ///Container type for the return parameters of the [`get_proposers()`](get_proposersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct get_proposersReturn {
        pub _0: alloy::sol_types::private::Vec<
            <Proposer as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_proposersCall> for UnderlyingRustTuple<'_> {
                fn from(value: get_proposersCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for get_proposersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Array<Proposer>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <Proposer as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<get_proposersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: get_proposersReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for get_proposersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for get_proposersCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = get_proposersReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<Proposer>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "get_proposers()";
            const SELECTOR: [u8; 4] = [72u8, 192u8, 244u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `last_exit_block(address)` and selector `0x22b092af`.
```solidity
function last_exit_block(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct last_exit_blockCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`last_exit_block(address)`](last_exit_blockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct last_exit_blockReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<last_exit_blockCall> for UnderlyingRustTuple<'_> {
                fn from(value: last_exit_blockCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for last_exit_blockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<last_exit_blockReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: last_exit_blockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for last_exit_blockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for last_exit_blockCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = last_exit_blockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "last_exit_block(address)";
            const SELECTOR: [u8; 4] = [34u8, 176u8, 146u8, 175u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `owner()` and selector `0x8da5cb5b`.
```solidity
function owner() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerCall {}
    ///Container type for the return parameters of the [`owner()`](ownerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "owner()";
            const SELECTOR: [u8; 4] = [141u8, 165u8, 203u8, 91u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `pending_withdraws(address)` and selector `0xc739d79c`.
```solidity
function pending_withdraws(address) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pending_withdrawsCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`pending_withdraws(address)`](pending_withdrawsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct pending_withdrawsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pending_withdrawsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: pending_withdrawsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for pending_withdrawsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<pending_withdrawsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: pending_withdrawsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for pending_withdrawsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for pending_withdrawsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = pending_withdrawsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "pending_withdraws(address)";
            const SELECTOR: [u8; 4] = [199u8, 57u8, 215u8, 156u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proposer_count()` and selector `0x1ffff698`.
```solidity
function proposer_count() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposer_countCall {}
    ///Container type for the return parameters of the [`proposer_count()`](proposer_countCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposer_countReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposer_countCall> for UnderlyingRustTuple<'_> {
                fn from(value: proposer_countCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proposer_countCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposer_countReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: proposer_countReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for proposer_countReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proposer_countCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proposer_countReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proposer_count()";
            const SELECTOR: [u8; 4] = [31u8, 255u8, 246u8, 152u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proposer_urls(string)` and selector `0xd1cef1ee`.
```solidity
function proposer_urls(string memory) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposer_urlsCall {
        pub _0: alloy::sol_types::private::String,
    }
    ///Container type for the return parameters of the [`proposer_urls(string)`](proposer_urlsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposer_urlsReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposer_urlsCall> for UnderlyingRustTuple<'_> {
                fn from(value: proposer_urlsCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proposer_urlsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposer_urlsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proposer_urlsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proposer_urlsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proposer_urlsCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::String,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proposer_urlsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proposer_urls(string)";
            const SELECTOR: [u8; 4] = [209u8, 206u8, 241u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `proposers(address)` and selector `0x18177497`.
```solidity
function proposers(address) external view returns (uint256 stake, address addr, string memory url, address next_addr, address previous_addr);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposersCall {
        pub _0: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`proposers(address)`](proposersCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct proposersReturn {
        pub stake: alloy::sol_types::private::primitives::aliases::U256,
        pub addr: alloy::sol_types::private::Address,
        pub url: alloy::sol_types::private::String,
        pub next_addr: alloy::sol_types::private::Address,
        pub previous_addr: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposersCall> for UnderlyingRustTuple<'_> {
                fn from(value: proposersCall) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proposersCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::String,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<proposersReturn> for UnderlyingRustTuple<'_> {
                fn from(value: proposersReturn) -> Self {
                    (
                        value.stake,
                        value.addr,
                        value.url,
                        value.next_addr,
                        value.previous_addr,
                    )
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for proposersReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        stake: tuple.0,
                        addr: tuple.1,
                        url: tuple.2,
                        next_addr: tuple.3,
                        previous_addr: tuple.4,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for proposersCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = proposersReturn;
            type ReturnTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "proposers(address)";
            const SELECTOR: [u8; 4] = [24u8, 23u8, 116u8, 151u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self._0,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `remove_proposer()` and selector `0x4b98b3b6`.
```solidity
function remove_proposer() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct remove_proposerCall {}
    ///Container type for the return parameters of the [`remove_proposer()`](remove_proposerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct remove_proposerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<remove_proposerCall> for UnderlyingRustTuple<'_> {
                fn from(value: remove_proposerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for remove_proposerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<remove_proposerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: remove_proposerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for remove_proposerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for remove_proposerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = remove_proposerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "remove_proposer()";
            const SELECTOR: [u8; 4] = [75u8, 152u8, 179u8, 182u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `rotate_proposer()` and selector `0xc12f666e`.
```solidity
function rotate_proposer() external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rotate_proposerCall {}
    ///Container type for the return parameters of the [`rotate_proposer()`](rotate_proposerCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct rotate_proposerReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rotate_proposerCall> for UnderlyingRustTuple<'_> {
                fn from(value: rotate_proposerCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for rotate_proposerCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<rotate_proposerReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: rotate_proposerReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for rotate_proposerReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for rotate_proposerCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = rotate_proposerReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "rotate_proposer()";
            const SELECTOR: [u8; 4] = [193u8, 47u8, 102u8, 110u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setAuthorities(address,address)` and selector `0x4a8a4073`.
```solidity
function setAuthorities(address sanctionsListAddress, address x509Address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAuthoritiesCall {
        pub sanctionsListAddress: alloy::sol_types::private::Address,
        pub x509Address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`setAuthorities(address,address)`](setAuthoritiesCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setAuthoritiesReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAuthoritiesCall> for UnderlyingRustTuple<'_> {
                fn from(value: setAuthoritiesCall) -> Self {
                    (value.sanctionsListAddress, value.x509Address)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for setAuthoritiesCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sanctionsListAddress: tuple.0,
                        x509Address: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setAuthoritiesReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setAuthoritiesReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setAuthoritiesReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setAuthoritiesCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setAuthoritiesReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setAuthorities(address,address)";
            const SELECTOR: [u8; 4] = [74u8, 138u8, 64u8, 115u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sanctionsListAddress,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.x509Address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set_nightfall(address)` and selector `0x194f6b64`.
```solidity
function set_nightfall(address nightfall_address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_nightfallCall {
        pub nightfall_address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`set_nightfall(address)`](set_nightfallCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_nightfallReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_nightfallCall> for UnderlyingRustTuple<'_> {
                fn from(value: set_nightfallCall) -> Self {
                    (value.nightfall_address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for set_nightfallCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { nightfall_address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_nightfallReturn> for UnderlyingRustTuple<'_> {
                fn from(value: set_nightfallReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for set_nightfallReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for set_nightfallCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = set_nightfallReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set_nightfall(address)";
            const SELECTOR: [u8; 4] = [25u8, 79u8, 107u8, 100u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.nightfall_address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set_sanctions_list(address)` and selector `0x97e20d0e`.
```solidity
function set_sanctions_list(address sanctionsListAddress) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_sanctions_listCall {
        pub sanctionsListAddress: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`set_sanctions_list(address)`](set_sanctions_listCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_sanctions_listReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_sanctions_listCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_sanctions_listCall) -> Self {
                    (value.sanctionsListAddress,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_sanctions_listCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        sanctionsListAddress: tuple.0,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_sanctions_listReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_sanctions_listReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_sanctions_listReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for set_sanctions_listCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = set_sanctions_listReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set_sanctions_list(address)";
            const SELECTOR: [u8; 4] = [151u8, 226u8, 13u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.sanctionsListAddress,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `set_x509_address(address)` and selector `0xd5e6c6f9`.
```solidity
function set_x509_address(address x509_address) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_x509_addressCall {
        pub x509_address: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`set_x509_address(address)`](set_x509_addressCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct set_x509_addressReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_x509_addressCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_x509_addressCall) -> Self {
                    (value.x509_address,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_x509_addressCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { x509_address: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<set_x509_addressReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: set_x509_addressReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for set_x509_addressReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for set_x509_addressCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = set_x509_addressReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "set_x509_address(address)";
            const SELECTOR: [u8; 4] = [213u8, 230u8, 198u8, 249u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.x509_address,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `start_l1_block()` and selector `0xac2beca0`.
```solidity
function start_l1_block() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct start_l1_blockCall {}
    ///Container type for the return parameters of the [`start_l1_block()`](start_l1_blockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct start_l1_blockReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<start_l1_blockCall> for UnderlyingRustTuple<'_> {
                fn from(value: start_l1_blockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for start_l1_blockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<start_l1_blockReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: start_l1_blockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for start_l1_blockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for start_l1_blockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = start_l1_blockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "start_l1_block()";
            const SELECTOR: [u8; 4] = [172u8, 43u8, 236u8, 160u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `start_l2_block()` and selector `0xa8404aee`.
```solidity
function start_l2_block() external view returns (int256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct start_l2_blockCall {}
    ///Container type for the return parameters of the [`start_l2_block()`](start_l2_blockCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct start_l2_blockReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::I256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<start_l2_blockCall> for UnderlyingRustTuple<'_> {
                fn from(value: start_l2_blockCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for start_l2_blockCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::I256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<start_l2_blockReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: start_l2_blockReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for start_l2_blockReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for start_l2_blockCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = start_l2_blockReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Int<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "start_l2_block()";
            const SELECTOR: [u8; 4] = [168u8, 64u8, 74u8, 238u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `withdraw(uint256)` and selector `0x2e1a7d4d`.
```solidity
function withdraw(uint256 amount) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawCall {
        pub amount: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`withdraw(uint256)`](withdrawCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct withdrawReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawCall> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawCall) -> Self {
                    (value.amount,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { amount: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<withdrawReturn> for UnderlyingRustTuple<'_> {
                fn from(value: withdrawReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for withdrawReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for withdrawCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = withdrawReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "withdraw(uint256)";
            const SELECTOR: [u8; 4] = [46u8, 26u8, 125u8, 77u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.amount),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`RoundRobin`](self) function calls.
    pub enum RoundRobinCalls {
        COOLDOWN_BLOCKS(COOLDOWN_BLOCKSCall),
        DING(DINGCall),
        EXIT_PENALTY(EXIT_PENALTYCall),
        ROTATION_BlOCKS(ROTATION_BlOCKSCall),
        STAKE(STAKECall),
        add_proposer(add_proposerCall),
        escrow(escrowCall),
        get_current_proposer_address(get_current_proposer_addressCall),
        get_proposers(get_proposersCall),
        last_exit_block(last_exit_blockCall),
        owner(ownerCall),
        pending_withdraws(pending_withdrawsCall),
        proposer_count(proposer_countCall),
        proposer_urls(proposer_urlsCall),
        proposers(proposersCall),
        remove_proposer(remove_proposerCall),
        rotate_proposer(rotate_proposerCall),
        setAuthorities(setAuthoritiesCall),
        set_nightfall(set_nightfallCall),
        set_sanctions_list(set_sanctions_listCall),
        set_x509_address(set_x509_addressCall),
        start_l1_block(start_l1_blockCall),
        start_l2_block(start_l2_blockCall),
        withdraw(withdrawCall),
    }
    #[automatically_derived]
    impl RoundRobinCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [10u8, 207u8, 79u8, 147u8],
            [18u8, 95u8, 219u8, 188u8],
            [24u8, 23u8, 116u8, 151u8],
            [25u8, 79u8, 107u8, 100u8],
            [31u8, 255u8, 246u8, 152u8],
            [34u8, 176u8, 146u8, 175u8],
            [46u8, 26u8, 125u8, 77u8],
            [72u8, 192u8, 244u8, 135u8],
            [74u8, 138u8, 64u8, 115u8],
            [75u8, 152u8, 179u8, 182u8],
            [84u8, 131u8, 19u8, 84u8],
            [85u8, 194u8, 93u8, 23u8],
            [117u8, 15u8, 37u8, 244u8],
            [141u8, 165u8, 203u8, 91u8],
            [151u8, 193u8, 208u8, 71u8],
            [151u8, 226u8, 13u8, 14u8],
            [168u8, 64u8, 74u8, 238u8],
            [172u8, 43u8, 236u8, 160u8],
            [193u8, 47u8, 102u8, 110u8],
            [199u8, 57u8, 215u8, 156u8],
            [209u8, 206u8, 241u8, 238u8],
            [213u8, 230u8, 198u8, 249u8],
            [215u8, 174u8, 118u8, 182u8],
            [226u8, 253u8, 204u8, 23u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for RoundRobinCalls {
        const NAME: &'static str = "RoundRobinCalls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 24usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::COOLDOWN_BLOCKS(_) => {
                    <COOLDOWN_BLOCKSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::DING(_) => <DINGCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::EXIT_PENALTY(_) => {
                    <EXIT_PENALTYCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::ROTATION_BlOCKS(_) => {
                    <ROTATION_BlOCKSCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::STAKE(_) => <STAKECall as alloy_sol_types::SolCall>::SELECTOR,
                Self::add_proposer(_) => {
                    <add_proposerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::escrow(_) => <escrowCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::get_current_proposer_address(_) => {
                    <get_current_proposer_addressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::get_proposers(_) => {
                    <get_proposersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::last_exit_block(_) => {
                    <last_exit_blockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::owner(_) => <ownerCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::pending_withdraws(_) => {
                    <pending_withdrawsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proposer_count(_) => {
                    <proposer_countCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proposer_urls(_) => {
                    <proposer_urlsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::proposers(_) => {
                    <proposersCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::remove_proposer(_) => {
                    <remove_proposerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::rotate_proposer(_) => {
                    <rotate_proposerCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setAuthorities(_) => {
                    <setAuthoritiesCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::set_nightfall(_) => {
                    <set_nightfallCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::set_sanctions_list(_) => {
                    <set_sanctions_listCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::set_x509_address(_) => {
                    <set_x509_addressCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::start_l1_block(_) => {
                    <start_l1_blockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::start_l2_block(_) => {
                    <start_l2_blockCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::withdraw(_) => <withdrawCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<RoundRobinCalls>] = &[
                {
                    fn EXIT_PENALTY(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <EXIT_PENALTYCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::EXIT_PENALTY)
                    }
                    EXIT_PENALTY
                },
                {
                    fn STAKE(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <STAKECall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::STAKE)
                    }
                    STAKE
                },
                {
                    fn proposers(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <proposersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::proposers)
                    }
                    proposers
                },
                {
                    fn set_nightfall(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <set_nightfallCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::set_nightfall)
                    }
                    set_nightfall
                },
                {
                    fn proposer_count(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <proposer_countCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::proposer_count)
                    }
                    proposer_count
                },
                {
                    fn last_exit_block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <last_exit_blockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::last_exit_block)
                    }
                    last_exit_block
                },
                {
                    fn withdraw(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <withdrawCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::withdraw)
                    }
                    withdraw
                },
                {
                    fn get_proposers(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <get_proposersCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::get_proposers)
                    }
                    get_proposers
                },
                {
                    fn setAuthorities(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <setAuthoritiesCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::setAuthorities)
                    }
                    setAuthorities
                },
                {
                    fn remove_proposer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <remove_proposerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::remove_proposer)
                    }
                    remove_proposer
                },
                {
                    fn COOLDOWN_BLOCKS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <COOLDOWN_BLOCKSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::COOLDOWN_BLOCKS)
                    }
                    COOLDOWN_BLOCKS
                },
                {
                    fn add_proposer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <add_proposerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::add_proposer)
                    }
                    add_proposer
                },
                {
                    fn get_current_proposer_address(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <get_current_proposer_addressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::get_current_proposer_address)
                    }
                    get_current_proposer_address
                },
                {
                    fn owner(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <ownerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::owner)
                    }
                    owner
                },
                {
                    fn ROTATION_BlOCKS(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <ROTATION_BlOCKSCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::ROTATION_BlOCKS)
                    }
                    ROTATION_BlOCKS
                },
                {
                    fn set_sanctions_list(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <set_sanctions_listCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::set_sanctions_list)
                    }
                    set_sanctions_list
                },
                {
                    fn start_l2_block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <start_l2_blockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::start_l2_block)
                    }
                    start_l2_block
                },
                {
                    fn start_l1_block(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <start_l1_blockCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::start_l1_block)
                    }
                    start_l1_block
                },
                {
                    fn rotate_proposer(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <rotate_proposerCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::rotate_proposer)
                    }
                    rotate_proposer
                },
                {
                    fn pending_withdraws(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <pending_withdrawsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::pending_withdraws)
                    }
                    pending_withdraws
                },
                {
                    fn proposer_urls(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <proposer_urlsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::proposer_urls)
                    }
                    proposer_urls
                },
                {
                    fn set_x509_address(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <set_x509_addressCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::set_x509_address)
                    }
                    set_x509_address
                },
                {
                    fn DING(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <DINGCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::DING)
                    }
                    DING
                },
                {
                    fn escrow(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<RoundRobinCalls> {
                        <escrowCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(RoundRobinCalls::escrow)
                    }
                    escrow
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::COOLDOWN_BLOCKS(inner) => {
                    <COOLDOWN_BLOCKSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::DING(inner) => {
                    <DINGCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::EXIT_PENALTY(inner) => {
                    <EXIT_PENALTYCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::ROTATION_BlOCKS(inner) => {
                    <ROTATION_BlOCKSCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::STAKE(inner) => {
                    <STAKECall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::add_proposer(inner) => {
                    <add_proposerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::escrow(inner) => {
                    <escrowCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::get_current_proposer_address(inner) => {
                    <get_current_proposer_addressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::get_proposers(inner) => {
                    <get_proposersCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::last_exit_block(inner) => {
                    <last_exit_blockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::pending_withdraws(inner) => {
                    <pending_withdrawsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proposer_count(inner) => {
                    <proposer_countCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proposer_urls(inner) => {
                    <proposer_urlsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::proposers(inner) => {
                    <proposersCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::remove_proposer(inner) => {
                    <remove_proposerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::rotate_proposer(inner) => {
                    <rotate_proposerCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setAuthorities(inner) => {
                    <setAuthoritiesCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::set_nightfall(inner) => {
                    <set_nightfallCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::set_sanctions_list(inner) => {
                    <set_sanctions_listCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::set_x509_address(inner) => {
                    <set_x509_addressCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::start_l1_block(inner) => {
                    <start_l1_blockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::start_l2_block(inner) => {
                    <start_l2_blockCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::COOLDOWN_BLOCKS(inner) => {
                    <COOLDOWN_BLOCKSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::DING(inner) => {
                    <DINGCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::EXIT_PENALTY(inner) => {
                    <EXIT_PENALTYCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::ROTATION_BlOCKS(inner) => {
                    <ROTATION_BlOCKSCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::STAKE(inner) => {
                    <STAKECall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::add_proposer(inner) => {
                    <add_proposerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::escrow(inner) => {
                    <escrowCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::get_current_proposer_address(inner) => {
                    <get_current_proposer_addressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::get_proposers(inner) => {
                    <get_proposersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::last_exit_block(inner) => {
                    <last_exit_blockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::owner(inner) => {
                    <ownerCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::pending_withdraws(inner) => {
                    <pending_withdrawsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proposer_count(inner) => {
                    <proposer_countCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proposer_urls(inner) => {
                    <proposer_urlsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::proposers(inner) => {
                    <proposersCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::remove_proposer(inner) => {
                    <remove_proposerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::rotate_proposer(inner) => {
                    <rotate_proposerCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setAuthorities(inner) => {
                    <setAuthoritiesCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::set_nightfall(inner) => {
                    <set_nightfallCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::set_sanctions_list(inner) => {
                    <set_sanctions_listCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::set_x509_address(inner) => {
                    <set_x509_addressCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::start_l1_block(inner) => {
                    <start_l1_blockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::start_l2_block(inner) => {
                    <start_l2_blockCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::withdraw(inner) => {
                    <withdrawCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`RoundRobin`](self) events.
    pub enum RoundRobinEvents {
        ProposerRotated(ProposerRotated),
    }
    #[automatically_derived]
    impl RoundRobinEvents {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                172u8,
                59u8,
                28u8,
                105u8,
                41u8,
                163u8,
                177u8,
                181u8,
                41u8,
                234u8,
                204u8,
                70u8,
                114u8,
                15u8,
                144u8,
                194u8,
                213u8,
                75u8,
                131u8,
                67u8,
                69u8,
                220u8,
                169u8,
                186u8,
                125u8,
                122u8,
                148u8,
                131u8,
                224u8,
                222u8,
                82u8,
                190u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for RoundRobinEvents {
        const NAME: &'static str = "RoundRobinEvents";
        const COUNT: usize = 1usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<ProposerRotated as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ProposerRotated as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ProposerRotated)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for RoundRobinEvents {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProposerRotated(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::ProposerRotated(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`RoundRobin`](self) contract instance.

See the [wrapper's documentation](`RoundRobinInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> RoundRobinInstance<T, P, N> {
        RoundRobinInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        x509_address: alloy::sol_types::private::Address,
        sanctionsListAddress: alloy::sol_types::private::Address,
        default_proposer_address: alloy::sol_types::private::Address,
        default_proposer_url: alloy::sol_types::private::String,
        stake: alloy::sol_types::private::primitives::aliases::U256,
        ding: alloy::sol_types::private::primitives::aliases::U256,
        exit_penalty: alloy::sol_types::private::primitives::aliases::U256,
        cooling_blocks: alloy::sol_types::private::primitives::aliases::U256,
        rotation_blocks: alloy::sol_types::private::primitives::aliases::U256,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<RoundRobinInstance<T, P, N>>,
    > {
        RoundRobinInstance::<
            T,
            P,
            N,
        >::deploy(
            provider,
            x509_address,
            sanctionsListAddress,
            default_proposer_address,
            default_proposer_url,
            stake,
            ding,
            exit_penalty,
            cooling_blocks,
            rotation_blocks,
        )
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        x509_address: alloy::sol_types::private::Address,
        sanctionsListAddress: alloy::sol_types::private::Address,
        default_proposer_address: alloy::sol_types::private::Address,
        default_proposer_url: alloy::sol_types::private::String,
        stake: alloy::sol_types::private::primitives::aliases::U256,
        ding: alloy::sol_types::private::primitives::aliases::U256,
        exit_penalty: alloy::sol_types::private::primitives::aliases::U256,
        cooling_blocks: alloy::sol_types::private::primitives::aliases::U256,
        rotation_blocks: alloy::sol_types::private::primitives::aliases::U256,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        RoundRobinInstance::<
            T,
            P,
            N,
        >::deploy_builder(
            provider,
            x509_address,
            sanctionsListAddress,
            default_proposer_address,
            default_proposer_url,
            stake,
            ding,
            exit_penalty,
            cooling_blocks,
            rotation_blocks,
        )
    }
    /**A [`RoundRobin`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`RoundRobin`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct RoundRobinInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for RoundRobinInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("RoundRobinInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoundRobinInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`RoundRobin`](self) contract instance.

See the [wrapper's documentation](`RoundRobinInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            x509_address: alloy::sol_types::private::Address,
            sanctionsListAddress: alloy::sol_types::private::Address,
            default_proposer_address: alloy::sol_types::private::Address,
            default_proposer_url: alloy::sol_types::private::String,
            stake: alloy::sol_types::private::primitives::aliases::U256,
            ding: alloy::sol_types::private::primitives::aliases::U256,
            exit_penalty: alloy::sol_types::private::primitives::aliases::U256,
            cooling_blocks: alloy::sol_types::private::primitives::aliases::U256,
            rotation_blocks: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::Result<RoundRobinInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(
                provider,
                x509_address,
                sanctionsListAddress,
                default_proposer_address,
                default_proposer_url,
                stake,
                ding,
                exit_penalty,
                cooling_blocks,
                rotation_blocks,
            );
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            x509_address: alloy::sol_types::private::Address,
            sanctionsListAddress: alloy::sol_types::private::Address,
            default_proposer_address: alloy::sol_types::private::Address,
            default_proposer_url: alloy::sol_types::private::String,
            stake: alloy::sol_types::private::primitives::aliases::U256,
            ding: alloy::sol_types::private::primitives::aliases::U256,
            exit_penalty: alloy::sol_types::private::primitives::aliases::U256,
            cooling_blocks: alloy::sol_types::private::primitives::aliases::U256,
            rotation_blocks: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            x509_address,
                            sanctionsListAddress,
                            default_proposer_address,
                            default_proposer_url,
                            stake,
                            ding,
                            exit_penalty,
                            cooling_blocks,
                            rotation_blocks,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> RoundRobinInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> RoundRobinInstance<T, P, N> {
            RoundRobinInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoundRobinInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`COOLDOWN_BLOCKS`] function.
        pub fn COOLDOWN_BLOCKS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, COOLDOWN_BLOCKSCall, N> {
            self.call_builder(&COOLDOWN_BLOCKSCall {})
        }
        ///Creates a new call builder for the [`DING`] function.
        pub fn DING(&self) -> alloy_contract::SolCallBuilder<T, &P, DINGCall, N> {
            self.call_builder(&DINGCall {})
        }
        ///Creates a new call builder for the [`EXIT_PENALTY`] function.
        pub fn EXIT_PENALTY(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, EXIT_PENALTYCall, N> {
            self.call_builder(&EXIT_PENALTYCall {})
        }
        ///Creates a new call builder for the [`ROTATION_BlOCKS`] function.
        pub fn ROTATION_BlOCKS(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, ROTATION_BlOCKSCall, N> {
            self.call_builder(&ROTATION_BlOCKSCall {})
        }
        ///Creates a new call builder for the [`STAKE`] function.
        pub fn STAKE(&self) -> alloy_contract::SolCallBuilder<T, &P, STAKECall, N> {
            self.call_builder(&STAKECall {})
        }
        ///Creates a new call builder for the [`add_proposer`] function.
        pub fn add_proposer(
            &self,
            proposer_url: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, add_proposerCall, N> {
            self.call_builder(&add_proposerCall { proposer_url })
        }
        ///Creates a new call builder for the [`escrow`] function.
        pub fn escrow(&self) -> alloy_contract::SolCallBuilder<T, &P, escrowCall, N> {
            self.call_builder(&escrowCall {})
        }
        ///Creates a new call builder for the [`get_current_proposer_address`] function.
        pub fn get_current_proposer_address(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, get_current_proposer_addressCall, N> {
            self.call_builder(
                &get_current_proposer_addressCall {
                },
            )
        }
        ///Creates a new call builder for the [`get_proposers`] function.
        pub fn get_proposers(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, get_proposersCall, N> {
            self.call_builder(&get_proposersCall {})
        }
        ///Creates a new call builder for the [`last_exit_block`] function.
        pub fn last_exit_block(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, last_exit_blockCall, N> {
            self.call_builder(&last_exit_blockCall { _0 })
        }
        ///Creates a new call builder for the [`owner`] function.
        pub fn owner(&self) -> alloy_contract::SolCallBuilder<T, &P, ownerCall, N> {
            self.call_builder(&ownerCall {})
        }
        ///Creates a new call builder for the [`pending_withdraws`] function.
        pub fn pending_withdraws(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, pending_withdrawsCall, N> {
            self.call_builder(&pending_withdrawsCall { _0 })
        }
        ///Creates a new call builder for the [`proposer_count`] function.
        pub fn proposer_count(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, proposer_countCall, N> {
            self.call_builder(&proposer_countCall {})
        }
        ///Creates a new call builder for the [`proposer_urls`] function.
        pub fn proposer_urls(
            &self,
            _0: alloy::sol_types::private::String,
        ) -> alloy_contract::SolCallBuilder<T, &P, proposer_urlsCall, N> {
            self.call_builder(&proposer_urlsCall { _0 })
        }
        ///Creates a new call builder for the [`proposers`] function.
        pub fn proposers(
            &self,
            _0: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, proposersCall, N> {
            self.call_builder(&proposersCall { _0 })
        }
        ///Creates a new call builder for the [`remove_proposer`] function.
        pub fn remove_proposer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, remove_proposerCall, N> {
            self.call_builder(&remove_proposerCall {})
        }
        ///Creates a new call builder for the [`rotate_proposer`] function.
        pub fn rotate_proposer(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, rotate_proposerCall, N> {
            self.call_builder(&rotate_proposerCall {})
        }
        ///Creates a new call builder for the [`setAuthorities`] function.
        pub fn setAuthorities(
            &self,
            sanctionsListAddress: alloy::sol_types::private::Address,
            x509Address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, setAuthoritiesCall, N> {
            self.call_builder(
                &setAuthoritiesCall {
                    sanctionsListAddress,
                    x509Address,
                },
            )
        }
        ///Creates a new call builder for the [`set_nightfall`] function.
        pub fn set_nightfall(
            &self,
            nightfall_address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, set_nightfallCall, N> {
            self.call_builder(
                &set_nightfallCall {
                    nightfall_address,
                },
            )
        }
        ///Creates a new call builder for the [`set_sanctions_list`] function.
        pub fn set_sanctions_list(
            &self,
            sanctionsListAddress: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, set_sanctions_listCall, N> {
            self.call_builder(
                &set_sanctions_listCall {
                    sanctionsListAddress,
                },
            )
        }
        ///Creates a new call builder for the [`set_x509_address`] function.
        pub fn set_x509_address(
            &self,
            x509_address: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, set_x509_addressCall, N> {
            self.call_builder(
                &set_x509_addressCall {
                    x509_address,
                },
            )
        }
        ///Creates a new call builder for the [`start_l1_block`] function.
        pub fn start_l1_block(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, start_l1_blockCall, N> {
            self.call_builder(&start_l1_blockCall {})
        }
        ///Creates a new call builder for the [`start_l2_block`] function.
        pub fn start_l2_block(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, start_l2_blockCall, N> {
            self.call_builder(&start_l2_blockCall {})
        }
        ///Creates a new call builder for the [`withdraw`] function.
        pub fn withdraw(
            &self,
            amount: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, withdrawCall, N> {
            self.call_builder(&withdrawCall { amount })
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > RoundRobinInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`ProposerRotated`] event.
        pub fn ProposerRotated_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ProposerRotated, N> {
            self.event_filter::<ProposerRotated>()
        }
    }
}
