/**

Generated by the following Solidity interface...
```solidity
interface DERParser {
    struct DecodedTlv {
        uint256 start;
        uint256 headerLength;
        Tag tag;
        uint256 length;
        bytes value;
        bytes octets;
        uint256 depth;
    }
    struct Tag {
        bool isConstructed;
        bytes1 tagType;
    }

    function computeNumberOfTlvs(bytes memory derBytes, uint256 pointer) external pure returns (uint256);
    function parseDER(bytes memory derBytes, uint256 pointer, uint256 tlvLength) external pure returns (DecodedTlv[] memory);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "function",
    "name": "computeNumberOfTlvs",
    "inputs": [
      {
        "name": "derBytes",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "pointer",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "pure"
  },
  {
    "type": "function",
    "name": "parseDER",
    "inputs": [
      {
        "name": "derBytes",
        "type": "bytes",
        "internalType": "bytes"
      },
      {
        "name": "pointer",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "tlvLength",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "tuple[]",
        "internalType": "struct DERParser.DecodedTlv[]",
        "components": [
          {
            "name": "start",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "headerLength",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "tag",
            "type": "tuple",
            "internalType": "struct DERParser.Tag",
            "components": [
              {
                "name": "isConstructed",
                "type": "bool",
                "internalType": "bool"
              },
              {
                "name": "tagType",
                "type": "bytes1",
                "internalType": "bytes1"
              }
            ]
          },
          {
            "name": "length",
            "type": "uint256",
            "internalType": "uint256"
          },
          {
            "name": "value",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "octets",
            "type": "bytes",
            "internalType": "bytes"
          },
          {
            "name": "depth",
            "type": "uint256",
            "internalType": "uint256"
          }
        ]
      }
    ],
    "stateMutability": "pure"
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod DERParser {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x6080604052348015600e575f5ffd5b50610b058061001c5f395ff3fe608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80631693280a14610038578063b0c5055514610061575b5f5ffd5b61004b61004636600461088c565b610082565b6040516100589190610907565b60405180910390f35b61007461006f3660046109de565b610099565b604051908152602001610058565b60606100908585858561015b565b95945050505050565b5f6100a26107d9565b5f806100ac610829565b6100b888888886610291565b96509350816100c681610a3a565b92505083604001515f01511561010a5760608401516100e59087610a52565b8184600581106100f7576100f7610a6b565b60200201528261010681610a3a565b9350505b5f5b60058110156101485781816005811061012757610127610a6b565b60200201518703610140578361013c81610a7f565b9450505b60010161010c565b508686106100ac57509695505050505050565b60606101656107d9565b5f8367ffffffffffffffff81111561017f5761017f610a94565b6040519080825280602002602001820160405280156101b857816020015b6101a56107d9565b81526020019060019003908161019d5790505b5090505f806101c5610829565b6101d18a8a8a86610291565b985094508484836101e181610a3a565b9450815181106101f3576101f3610a6b565b60209081029190910101526040850151511561023d5760608501516102189089610a52565b81846005811061022a5761022a610a6b565b60200201528261023981610a3a565b9350505b5f5b600581101561027b5781816005811061025a5761025a610a6b565b60200201518903610273578361026f81610a7f565b9450505b60010161023f565b508888106101c557509198975050505050505050565b6102996107d9565b5f6102b3604080518082019091525f808252602082015290565b5f606081876102dd8b8b838181106102cd576102cd610a6b565b9050013560f81c60f81b8a6103bd565b909a5090955091506102fb6102f48b8b818f610aa8565b8b8561054e565b909a50909450915061031a6103128b8b818f610aa8565b868c8961071f565b995092505f8b828c8761032d8784610a52565b6103379190610a52565b9261034493929190610aa8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250506040805160e08101825295865260208601969096525050928201959095526060810193909352608083019190915260a082015260c08101949094525091959294509192505050565b604080518082019091525f80825260208201525f80600360fe1b8516600160fd1b86161515601f60f81b808816908490821061045c5760405162461bcd60e51b815260206004820152603360248201527f4445525061727365723a20546167206973204c6f6e6720466f726d2c2077686960448201527218da081a5cc81b9bdd081cdd5c1c1bdc9d1959606a1b60648201526084015b60405180910390fd5b6001600160f81b0319841615806104805750600160ff1b6001600160f81b03198516145b6105055760405162461bcd60e51b815260206004820152604a60248201527f4445525061727365723a204f6e6c792074686520556e6976657273616c206f7260448201527f20436f6e7465787453706563696669632074616720636c617373657320617265606482015269081cdd5c1c1bdc9d195960b21b608482015260a401610453565b8061050f81610a3a565b91505060405180604001604052808415158152602001836001600160f81b0319168152508861053d90610a3a565b909a90995090975095505050505050565b5f80808361055b81610a3a565b9450505f87875f81811061057157610571610a6b565b90910135600160ff1b161591505f90508888828161059157610591610a6b565b9091013560f81c607f1691505081156105bf57806105ae88610a3a565b975087879450945094505050610715565b805f036106265760405162461bcd60e51b815260206004820152602f60248201527f4445525061727365723a20496e646566696e697465206c656e6774687320617260448201526e19481b9bdd081cdd5c1c1bdc9d1959608a1b6064820152608401610453565b80607f036106aa5760405162461bcd60e51b815260206004820152604560248201527f4445525061727365723a20412076616c7565206f66203078374620666f72206160448201527f206c6f6e6720666f726d206c656e67746820697320612072657365727665642060648201526476616c756560d81b608482015260a401610453565b5f805b828110156106ea578a8a6106c2836001610a52565b8181106106d1576106d1610a6b565b60089490941b919093013560f81c1791506001016106ad565b50806106f6838a610a52565b610701906001610a52565b61070b848a610a52565b9550955095505050505b9450945094915050565b60605f825f01511561077b57610737855f888a610aa8565b8582828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509297509295506107cf945050505050565b610787855f888a610aa8565b6107918787610a52565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092975092955050505050505b9550959350505050565b6040518060e001604052805f81526020015f8152602001610809604080518082019091525f808252602082015290565b81526020015f815260200160608152602001606081526020015f81525090565b6040518060a001604052806005906020820280368337509192915050565b5f5f83601f840112610857575f5ffd5b50813567ffffffffffffffff81111561086e575f5ffd5b602083019150836020828501011115610885575f5ffd5b9250929050565b5f5f5f5f6060858703121561089f575f5ffd5b843567ffffffffffffffff8111156108b5575f5ffd5b6108c187828801610847565b90989097506020870135966040013595509350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156109d257603f1987860301845281518051865260208101516020870152604081015180511515604088015260ff60f81b60208201511660608801525060608101516080870152608081015161010060a08801526109926101008801826108d9565b905060a082015187820360c08901526109ab82826108d9565b60c0939093015160e09890980197909752509450602093840193919091019060010161092d565b50929695505050505050565b5f5f5f604084860312156109f0575f5ffd5b833567ffffffffffffffff811115610a06575f5ffd5b610a1286828701610847565b909790965060209590950135949350505050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201610a4b57610a4b610a26565b5060010190565b80820180821115610a6557610a65610a26565b92915050565b634e487b7160e01b5f52603260045260245ffd5b5f81610a8d57610a8d610a26565b505f190190565b634e487b7160e01b5f52604160045260245ffd5b5f5f85851115610ab6575f5ffd5b83861115610ac2575f5ffd5b505082019391909203915056fea264697066735822122055d933b22a0f3d08a03c6a5564130ed162d92d5c5106143a517a337b5f8a84cf64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15`\x0EW__\xFD[Pa\x0B\x05\x80a\0\x1C_9_\xF3\xFE`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x16\x93(\n\x14a\08W\x80c\xB0\xC5\x05U\x14a\0aW[__\xFD[a\0Ka\0F6`\x04a\x08\x8CV[a\0\x82V[`@Qa\0X\x91\x90a\t\x07V[`@Q\x80\x91\x03\x90\xF3[a\0ta\0o6`\x04a\t\xDEV[a\0\x99V[`@Q\x90\x81R` \x01a\0XV[``a\0\x90\x85\x85\x85\x85a\x01[V[\x95\x94PPPPPV[_a\0\xA2a\x07\xD9V[_\x80a\0\xACa\x08)V[a\0\xB8\x88\x88\x88\x86a\x02\x91V[\x96P\x93P\x81a\0\xC6\x81a\n:V[\x92PP\x83`@\x01Q_\x01Q\x15a\x01\nW``\x84\x01Qa\0\xE5\x90\x87a\nRV[\x81\x84`\x05\x81\x10a\0\xF7Wa\0\xF7a\nkV[` \x02\x01R\x82a\x01\x06\x81a\n:V[\x93PP[_[`\x05\x81\x10\x15a\x01HW\x81\x81`\x05\x81\x10a\x01'Wa\x01'a\nkV[` \x02\x01Q\x87\x03a\x01@W\x83a\x01<\x81a\n\x7FV[\x94PP[`\x01\x01a\x01\x0CV[P\x86\x86\x10a\0\xACWP\x96\x95PPPPPPV[``a\x01ea\x07\xD9V[_\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\x7FWa\x01\x7Fa\n\x94V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xB8W\x81` \x01[a\x01\xA5a\x07\xD9V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01\x9DW\x90P[P\x90P_\x80a\x01\xC5a\x08)V[a\x01\xD1\x8A\x8A\x8A\x86a\x02\x91V[\x98P\x94P\x84\x84\x83a\x01\xE1\x81a\n:V[\x94P\x81Q\x81\x10a\x01\xF3Wa\x01\xF3a\nkV[` \x90\x81\x02\x91\x90\x91\x01\x01R`@\x85\x01QQ\x15a\x02=W``\x85\x01Qa\x02\x18\x90\x89a\nRV[\x81\x84`\x05\x81\x10a\x02*Wa\x02*a\nkV[` \x02\x01R\x82a\x029\x81a\n:V[\x93PP[_[`\x05\x81\x10\x15a\x02{W\x81\x81`\x05\x81\x10a\x02ZWa\x02Za\nkV[` \x02\x01Q\x89\x03a\x02sW\x83a\x02o\x81a\n\x7FV[\x94PP[`\x01\x01a\x02?V[P\x88\x88\x10a\x01\xC5WP\x91\x98\x97PPPPPPPPV[a\x02\x99a\x07\xD9V[_a\x02\xB3`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[_``\x81\x87a\x02\xDD\x8B\x8B\x83\x81\x81\x10a\x02\xCDWa\x02\xCDa\nkV[\x90P\x015`\xF8\x1C`\xF8\x1B\x8Aa\x03\xBDV[\x90\x9AP\x90\x95P\x91Pa\x02\xFBa\x02\xF4\x8B\x8B\x81\x8Fa\n\xA8V[\x8B\x85a\x05NV[\x90\x9AP\x90\x94P\x91Pa\x03\x1Aa\x03\x12\x8B\x8B\x81\x8Fa\n\xA8V[\x86\x8C\x89a\x07\x1FV[\x99P\x92P_\x8B\x82\x8C\x87a\x03-\x87\x84a\nRV[a\x037\x91\x90a\nRV[\x92a\x03D\x93\x92\x91\x90a\n\xA8V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q`\xE0\x81\x01\x82R\x95\x86R` \x86\x01\x96\x90\x96RPP\x92\x82\x01\x95\x90\x95R``\x81\x01\x93\x90\x93R`\x80\x83\x01\x91\x90\x91R`\xA0\x82\x01R`\xC0\x81\x01\x94\x90\x94RP\x91\x95\x92\x94P\x91\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_\x80`\x03`\xFE\x1B\x85\x16`\x01`\xFD\x1B\x86\x16\x15\x15`\x1F`\xF8\x1B\x80\x88\x16\x90\x84\x90\x82\x10a\x04\\W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FDERParser: Tag is Long Form, whi`D\x82\x01Rr\x18\xDA\x08\x1A\\\xC8\x1B\x9B\xDD\x08\x1C\xDD\\\x1C\x1B\xDC\x9D\x19Y`j\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xF8\x1B\x03\x19\x84\x16\x15\x80a\x04\x80WP`\x01`\xFF\x1B`\x01`\x01`\xF8\x1B\x03\x19\x85\x16\x14[a\x05\x05W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`J`$\x82\x01R\x7FDERParser: Only the Universal or`D\x82\x01R\x7F ContextSpecific tag classes are`d\x82\x01Ri\x08\x1C\xDD\\\x1C\x1B\xDC\x9D\x19Y`\xB2\x1B`\x84\x82\x01R`\xA4\x01a\x04SV[\x80a\x05\x0F\x81a\n:V[\x91PP`@Q\x80`@\x01`@R\x80\x84\x15\x15\x81R` \x01\x83`\x01`\x01`\xF8\x1B\x03\x19\x16\x81RP\x88a\x05=\x90a\n:V[\x90\x9A\x90\x99P\x90\x97P\x95PPPPPPV[_\x80\x80\x83a\x05[\x81a\n:V[\x94PP_\x87\x87_\x81\x81\x10a\x05qWa\x05qa\nkV[\x90\x91\x015`\x01`\xFF\x1B\x16\x15\x91P_\x90P\x88\x88\x82\x81a\x05\x91Wa\x05\x91a\nkV[\x90\x91\x015`\xF8\x1C`\x7F\x16\x91PP\x81\x15a\x05\xBFW\x80a\x05\xAE\x88a\n:V[\x97P\x87\x87\x94P\x94P\x94PPPa\x07\x15V[\x80_\x03a\x06&W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FDERParser: Indefinite lengths ar`D\x82\x01Rn\x19H\x1B\x9B\xDD\x08\x1C\xDD\\\x1C\x1B\xDC\x9D\x19Y`\x8A\x1B`d\x82\x01R`\x84\x01a\x04SV[\x80`\x7F\x03a\x06\xAAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`E`$\x82\x01R\x7FDERParser: A value of 0x7F for a`D\x82\x01R\x7F long form length is a reserved `d\x82\x01Rdvalue`\xD8\x1B`\x84\x82\x01R`\xA4\x01a\x04SV[_\x80[\x82\x81\x10\x15a\x06\xEAW\x8A\x8Aa\x06\xC2\x83`\x01a\nRV[\x81\x81\x10a\x06\xD1Wa\x06\xD1a\nkV[`\x08\x94\x90\x94\x1B\x91\x90\x93\x015`\xF8\x1C\x17\x91P`\x01\x01a\x06\xADV[P\x80a\x06\xF6\x83\x8Aa\nRV[a\x07\x01\x90`\x01a\nRV[a\x07\x0B\x84\x8Aa\nRV[\x95P\x95P\x95PPPP[\x94P\x94P\x94\x91PPV[``_\x82_\x01Q\x15a\x07{Wa\x077\x85_\x88\x8Aa\n\xA8V[\x85\x82\x82\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97P\x92\x95Pa\x07\xCF\x94PPPPPV[a\x07\x87\x85_\x88\x8Aa\n\xA8V[a\x07\x91\x87\x87a\nRV[\x82\x82\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97P\x92\x95PPPPPP[\x95P\x95\x93PPPPV[`@Q\x80`\xE0\x01`@R\x80_\x81R` \x01_\x81R` \x01a\x08\t`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[\x81R` \x01_\x81R` \x01``\x81R` \x01``\x81R` \x01_\x81RP\x90V[`@Q\x80`\xA0\x01`@R\x80`\x05\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[__\x83`\x1F\x84\x01\x12a\x08WW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08nW__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x08\x85W__\xFD[\x92P\x92\x90PV[____``\x85\x87\x03\x12\x15a\x08\x9FW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xB5W__\xFD[a\x08\xC1\x87\x82\x88\x01a\x08GV[\x90\x98\x90\x97P` \x87\x015\x96`@\x015\x95P\x93PPPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\t\xD2W`?\x19\x87\x86\x03\x01\x84R\x81Q\x80Q\x86R` \x81\x01Q` \x87\x01R`@\x81\x01Q\x80Q\x15\x15`@\x88\x01R`\xFF`\xF8\x1B` \x82\x01Q\x16``\x88\x01RP``\x81\x01Q`\x80\x87\x01R`\x80\x81\x01Qa\x01\0`\xA0\x88\x01Ra\t\x92a\x01\0\x88\x01\x82a\x08\xD9V[\x90P`\xA0\x82\x01Q\x87\x82\x03`\xC0\x89\x01Ra\t\xAB\x82\x82a\x08\xD9V[`\xC0\x93\x90\x93\x01Q`\xE0\x98\x90\x98\x01\x97\x90\x97RP\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\t-V[P\x92\x96\x95PPPPPPV[___`@\x84\x86\x03\x12\x15a\t\xF0W__\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\x06W__\xFD[a\n\x12\x86\x82\x87\x01a\x08GV[\x90\x97\x90\x96P` \x95\x90\x95\x015\x94\x93PPPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_`\x01\x82\x01a\nKWa\nKa\n&V[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\neWa\nea\n&V[\x92\x91PPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81a\n\x8DWa\n\x8Da\n&V[P_\x19\x01\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__\x85\x85\x11\x15a\n\xB6W__\xFD[\x83\x86\x11\x15a\n\xC2W__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV\xFE\xA2dipfsX\"\x12 U\xD93\xB2*\x0F=\x08\xA0<jUd\x13\x0E\xD1b\xD9-\\Q\x06\x14:Qz3{_\x8A\x84\xCFdsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b5060043610610034575f3560e01c80631693280a14610038578063b0c5055514610061575b5f5ffd5b61004b61004636600461088c565b610082565b6040516100589190610907565b60405180910390f35b61007461006f3660046109de565b610099565b604051908152602001610058565b60606100908585858561015b565b95945050505050565b5f6100a26107d9565b5f806100ac610829565b6100b888888886610291565b96509350816100c681610a3a565b92505083604001515f01511561010a5760608401516100e59087610a52565b8184600581106100f7576100f7610a6b565b60200201528261010681610a3a565b9350505b5f5b60058110156101485781816005811061012757610127610a6b565b60200201518703610140578361013c81610a7f565b9450505b60010161010c565b508686106100ac57509695505050505050565b60606101656107d9565b5f8367ffffffffffffffff81111561017f5761017f610a94565b6040519080825280602002602001820160405280156101b857816020015b6101a56107d9565b81526020019060019003908161019d5790505b5090505f806101c5610829565b6101d18a8a8a86610291565b985094508484836101e181610a3a565b9450815181106101f3576101f3610a6b565b60209081029190910101526040850151511561023d5760608501516102189089610a52565b81846005811061022a5761022a610a6b565b60200201528261023981610a3a565b9350505b5f5b600581101561027b5781816005811061025a5761025a610a6b565b60200201518903610273578361026f81610a7f565b9450505b60010161023f565b508888106101c557509198975050505050505050565b6102996107d9565b5f6102b3604080518082019091525f808252602082015290565b5f606081876102dd8b8b838181106102cd576102cd610a6b565b9050013560f81c60f81b8a6103bd565b909a5090955091506102fb6102f48b8b818f610aa8565b8b8561054e565b909a50909450915061031a6103128b8b818f610aa8565b868c8961071f565b995092505f8b828c8761032d8784610a52565b6103379190610a52565b9261034493929190610aa8565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250506040805160e08101825295865260208601969096525050928201959095526060810193909352608083019190915260a082015260c08101949094525091959294509192505050565b604080518082019091525f80825260208201525f80600360fe1b8516600160fd1b86161515601f60f81b808816908490821061045c5760405162461bcd60e51b815260206004820152603360248201527f4445525061727365723a20546167206973204c6f6e6720466f726d2c2077686960448201527218da081a5cc81b9bdd081cdd5c1c1bdc9d1959606a1b60648201526084015b60405180910390fd5b6001600160f81b0319841615806104805750600160ff1b6001600160f81b03198516145b6105055760405162461bcd60e51b815260206004820152604a60248201527f4445525061727365723a204f6e6c792074686520556e6976657273616c206f7260448201527f20436f6e7465787453706563696669632074616720636c617373657320617265606482015269081cdd5c1c1bdc9d195960b21b608482015260a401610453565b8061050f81610a3a565b91505060405180604001604052808415158152602001836001600160f81b0319168152508861053d90610a3a565b909a90995090975095505050505050565b5f80808361055b81610a3a565b9450505f87875f81811061057157610571610a6b565b90910135600160ff1b161591505f90508888828161059157610591610a6b565b9091013560f81c607f1691505081156105bf57806105ae88610a3a565b975087879450945094505050610715565b805f036106265760405162461bcd60e51b815260206004820152602f60248201527f4445525061727365723a20496e646566696e697465206c656e6774687320617260448201526e19481b9bdd081cdd5c1c1bdc9d1959608a1b6064820152608401610453565b80607f036106aa5760405162461bcd60e51b815260206004820152604560248201527f4445525061727365723a20412076616c7565206f66203078374620666f72206160448201527f206c6f6e6720666f726d206c656e67746820697320612072657365727665642060648201526476616c756560d81b608482015260a401610453565b5f805b828110156106ea578a8a6106c2836001610a52565b8181106106d1576106d1610a6b565b60089490941b919093013560f81c1791506001016106ad565b50806106f6838a610a52565b610701906001610a52565b61070b848a610a52565b9550955095505050505b9450945094915050565b60605f825f01511561077b57610737855f888a610aa8565b8582828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152509297509295506107cf945050505050565b610787855f888a610aa8565b6107918787610a52565b82828080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525092975092955050505050505b9550959350505050565b6040518060e001604052805f81526020015f8152602001610809604080518082019091525f808252602082015290565b81526020015f815260200160608152602001606081526020015f81525090565b6040518060a001604052806005906020820280368337509192915050565b5f5f83601f840112610857575f5ffd5b50813567ffffffffffffffff81111561086e575f5ffd5b602083019150836020828501011115610885575f5ffd5b9250929050565b5f5f5f5f6060858703121561089f575f5ffd5b843567ffffffffffffffff8111156108b5575f5ffd5b6108c187828801610847565b90989097506020870135966040013595509350505050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b5f602082016020835280845180835260408501915060408160051b8601019250602086015f5b828110156109d257603f1987860301845281518051865260208101516020870152604081015180511515604088015260ff60f81b60208201511660608801525060608101516080870152608081015161010060a08801526109926101008801826108d9565b905060a082015187820360c08901526109ab82826108d9565b60c0939093015160e09890980197909752509450602093840193919091019060010161092d565b50929695505050505050565b5f5f5f604084860312156109f0575f5ffd5b833567ffffffffffffffff811115610a06575f5ffd5b610a1286828701610847565b909790965060209590950135949350505050565b634e487b7160e01b5f52601160045260245ffd5b5f60018201610a4b57610a4b610a26565b5060010190565b80820180821115610a6557610a65610a26565b92915050565b634e487b7160e01b5f52603260045260245ffd5b5f81610a8d57610a8d610a26565b505f190190565b634e487b7160e01b5f52604160045260245ffd5b5f5f85851115610ab6575f5ffd5b83861115610ac2575f5ffd5b505082019391909203915056fea264697066735822122055d933b22a0f3d08a03c6a5564130ed162d92d5c5106143a517a337b5f8a84cf64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`\x046\x10a\x004W_5`\xE0\x1C\x80c\x16\x93(\n\x14a\08W\x80c\xB0\xC5\x05U\x14a\0aW[__\xFD[a\0Ka\0F6`\x04a\x08\x8CV[a\0\x82V[`@Qa\0X\x91\x90a\t\x07V[`@Q\x80\x91\x03\x90\xF3[a\0ta\0o6`\x04a\t\xDEV[a\0\x99V[`@Q\x90\x81R` \x01a\0XV[``a\0\x90\x85\x85\x85\x85a\x01[V[\x95\x94PPPPPV[_a\0\xA2a\x07\xD9V[_\x80a\0\xACa\x08)V[a\0\xB8\x88\x88\x88\x86a\x02\x91V[\x96P\x93P\x81a\0\xC6\x81a\n:V[\x92PP\x83`@\x01Q_\x01Q\x15a\x01\nW``\x84\x01Qa\0\xE5\x90\x87a\nRV[\x81\x84`\x05\x81\x10a\0\xF7Wa\0\xF7a\nkV[` \x02\x01R\x82a\x01\x06\x81a\n:V[\x93PP[_[`\x05\x81\x10\x15a\x01HW\x81\x81`\x05\x81\x10a\x01'Wa\x01'a\nkV[` \x02\x01Q\x87\x03a\x01@W\x83a\x01<\x81a\n\x7FV[\x94PP[`\x01\x01a\x01\x0CV[P\x86\x86\x10a\0\xACWP\x96\x95PPPPPPV[``a\x01ea\x07\xD9V[_\x83g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x01\x7FWa\x01\x7Fa\n\x94V[`@Q\x90\x80\x82R\x80` \x02` \x01\x82\x01`@R\x80\x15a\x01\xB8W\x81` \x01[a\x01\xA5a\x07\xD9V[\x81R` \x01\x90`\x01\x90\x03\x90\x81a\x01\x9DW\x90P[P\x90P_\x80a\x01\xC5a\x08)V[a\x01\xD1\x8A\x8A\x8A\x86a\x02\x91V[\x98P\x94P\x84\x84\x83a\x01\xE1\x81a\n:V[\x94P\x81Q\x81\x10a\x01\xF3Wa\x01\xF3a\nkV[` \x90\x81\x02\x91\x90\x91\x01\x01R`@\x85\x01QQ\x15a\x02=W``\x85\x01Qa\x02\x18\x90\x89a\nRV[\x81\x84`\x05\x81\x10a\x02*Wa\x02*a\nkV[` \x02\x01R\x82a\x029\x81a\n:V[\x93PP[_[`\x05\x81\x10\x15a\x02{W\x81\x81`\x05\x81\x10a\x02ZWa\x02Za\nkV[` \x02\x01Q\x89\x03a\x02sW\x83a\x02o\x81a\n\x7FV[\x94PP[`\x01\x01a\x02?V[P\x88\x88\x10a\x01\xC5WP\x91\x98\x97PPPPPPPPV[a\x02\x99a\x07\xD9V[_a\x02\xB3`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[_``\x81\x87a\x02\xDD\x8B\x8B\x83\x81\x81\x10a\x02\xCDWa\x02\xCDa\nkV[\x90P\x015`\xF8\x1C`\xF8\x1B\x8Aa\x03\xBDV[\x90\x9AP\x90\x95P\x91Pa\x02\xFBa\x02\xF4\x8B\x8B\x81\x8Fa\n\xA8V[\x8B\x85a\x05NV[\x90\x9AP\x90\x94P\x91Pa\x03\x1Aa\x03\x12\x8B\x8B\x81\x8Fa\n\xA8V[\x86\x8C\x89a\x07\x1FV[\x99P\x92P_\x8B\x82\x8C\x87a\x03-\x87\x84a\nRV[a\x037\x91\x90a\nRV[\x92a\x03D\x93\x92\x91\x90a\n\xA8V[\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RPP`@\x80Q`\xE0\x81\x01\x82R\x95\x86R` \x86\x01\x96\x90\x96RPP\x92\x82\x01\x95\x90\x95R``\x81\x01\x93\x90\x93R`\x80\x83\x01\x91\x90\x91R`\xA0\x82\x01R`\xC0\x81\x01\x94\x90\x94RP\x91\x95\x92\x94P\x91\x92PPPV[`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R_\x80`\x03`\xFE\x1B\x85\x16`\x01`\xFD\x1B\x86\x16\x15\x15`\x1F`\xF8\x1B\x80\x88\x16\x90\x84\x90\x82\x10a\x04\\W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`3`$\x82\x01R\x7FDERParser: Tag is Long Form, whi`D\x82\x01Rr\x18\xDA\x08\x1A\\\xC8\x1B\x9B\xDD\x08\x1C\xDD\\\x1C\x1B\xDC\x9D\x19Y`j\x1B`d\x82\x01R`\x84\x01[`@Q\x80\x91\x03\x90\xFD[`\x01`\x01`\xF8\x1B\x03\x19\x84\x16\x15\x80a\x04\x80WP`\x01`\xFF\x1B`\x01`\x01`\xF8\x1B\x03\x19\x85\x16\x14[a\x05\x05W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`J`$\x82\x01R\x7FDERParser: Only the Universal or`D\x82\x01R\x7F ContextSpecific tag classes are`d\x82\x01Ri\x08\x1C\xDD\\\x1C\x1B\xDC\x9D\x19Y`\xB2\x1B`\x84\x82\x01R`\xA4\x01a\x04SV[\x80a\x05\x0F\x81a\n:V[\x91PP`@Q\x80`@\x01`@R\x80\x84\x15\x15\x81R` \x01\x83`\x01`\x01`\xF8\x1B\x03\x19\x16\x81RP\x88a\x05=\x90a\n:V[\x90\x9A\x90\x99P\x90\x97P\x95PPPPPPV[_\x80\x80\x83a\x05[\x81a\n:V[\x94PP_\x87\x87_\x81\x81\x10a\x05qWa\x05qa\nkV[\x90\x91\x015`\x01`\xFF\x1B\x16\x15\x91P_\x90P\x88\x88\x82\x81a\x05\x91Wa\x05\x91a\nkV[\x90\x91\x015`\xF8\x1C`\x7F\x16\x91PP\x81\x15a\x05\xBFW\x80a\x05\xAE\x88a\n:V[\x97P\x87\x87\x94P\x94P\x94PPPa\x07\x15V[\x80_\x03a\x06&W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`/`$\x82\x01R\x7FDERParser: Indefinite lengths ar`D\x82\x01Rn\x19H\x1B\x9B\xDD\x08\x1C\xDD\\\x1C\x1B\xDC\x9D\x19Y`\x8A\x1B`d\x82\x01R`\x84\x01a\x04SV[\x80`\x7F\x03a\x06\xAAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`E`$\x82\x01R\x7FDERParser: A value of 0x7F for a`D\x82\x01R\x7F long form length is a reserved `d\x82\x01Rdvalue`\xD8\x1B`\x84\x82\x01R`\xA4\x01a\x04SV[_\x80[\x82\x81\x10\x15a\x06\xEAW\x8A\x8Aa\x06\xC2\x83`\x01a\nRV[\x81\x81\x10a\x06\xD1Wa\x06\xD1a\nkV[`\x08\x94\x90\x94\x1B\x91\x90\x93\x015`\xF8\x1C\x17\x91P`\x01\x01a\x06\xADV[P\x80a\x06\xF6\x83\x8Aa\nRV[a\x07\x01\x90`\x01a\nRV[a\x07\x0B\x84\x8Aa\nRV[\x95P\x95P\x95PPPP[\x94P\x94P\x94\x91PPV[``_\x82_\x01Q\x15a\x07{Wa\x077\x85_\x88\x8Aa\n\xA8V[\x85\x82\x82\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97P\x92\x95Pa\x07\xCF\x94PPPPPV[a\x07\x87\x85_\x88\x8Aa\n\xA8V[a\x07\x91\x87\x87a\nRV[\x82\x82\x80\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x93\x92\x91\x90\x81\x81R` \x01\x83\x83\x80\x82\x847_\x92\x01\x91\x90\x91RP\x92\x97P\x92\x95PPPPPP[\x95P\x95\x93PPPPV[`@Q\x80`\xE0\x01`@R\x80_\x81R` \x01_\x81R` \x01a\x08\t`@\x80Q\x80\x82\x01\x90\x91R_\x80\x82R` \x82\x01R\x90V[\x81R` \x01_\x81R` \x01``\x81R` \x01``\x81R` \x01_\x81RP\x90V[`@Q\x80`\xA0\x01`@R\x80`\x05\x90` \x82\x02\x806\x837P\x91\x92\x91PPV[__\x83`\x1F\x84\x01\x12a\x08WW__\xFD[P\x815g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08nW__\xFD[` \x83\x01\x91P\x83` \x82\x85\x01\x01\x11\x15a\x08\x85W__\xFD[\x92P\x92\x90PV[____``\x85\x87\x03\x12\x15a\x08\x9FW__\xFD[\x845g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x08\xB5W__\xFD[a\x08\xC1\x87\x82\x88\x01a\x08GV[\x90\x98\x90\x97P` \x87\x015\x96`@\x015\x95P\x93PPPPV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[_` \x82\x01` \x83R\x80\x84Q\x80\x83R`@\x85\x01\x91P`@\x81`\x05\x1B\x86\x01\x01\x92P` \x86\x01_[\x82\x81\x10\x15a\t\xD2W`?\x19\x87\x86\x03\x01\x84R\x81Q\x80Q\x86R` \x81\x01Q` \x87\x01R`@\x81\x01Q\x80Q\x15\x15`@\x88\x01R`\xFF`\xF8\x1B` \x82\x01Q\x16``\x88\x01RP``\x81\x01Q`\x80\x87\x01R`\x80\x81\x01Qa\x01\0`\xA0\x88\x01Ra\t\x92a\x01\0\x88\x01\x82a\x08\xD9V[\x90P`\xA0\x82\x01Q\x87\x82\x03`\xC0\x89\x01Ra\t\xAB\x82\x82a\x08\xD9V[`\xC0\x93\x90\x93\x01Q`\xE0\x98\x90\x98\x01\x97\x90\x97RP\x94P` \x93\x84\x01\x93\x91\x90\x91\x01\x90`\x01\x01a\t-V[P\x92\x96\x95PPPPPPV[___`@\x84\x86\x03\x12\x15a\t\xF0W__\xFD[\x835g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\n\x06W__\xFD[a\n\x12\x86\x82\x87\x01a\x08GV[\x90\x97\x90\x96P` \x95\x90\x95\x015\x94\x93PPPPV[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[_`\x01\x82\x01a\nKWa\nKa\n&V[P`\x01\x01\x90V[\x80\x82\x01\x80\x82\x11\x15a\neWa\nea\n&V[\x92\x91PPV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[_\x81a\n\x8DWa\n\x8Da\n&V[P_\x19\x01\x90V[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[__\x85\x85\x11\x15a\n\xB6W__\xFD[\x83\x86\x11\x15a\n\xC2W__\xFD[PP\x82\x01\x93\x91\x90\x92\x03\x91PV\xFE\xA2dipfsX\"\x12 U\xD93\xB2*\x0F=\x08\xA0<jUd\x13\x0E\xD1b\xD9-\\Q\x06\x14:Qz3{_\x8A\x84\xCFdsolcC\0\x08\x1C\x003",
    );
    /**```solidity
struct DecodedTlv { uint256 start; uint256 headerLength; Tag tag; uint256 length; bytes value; bytes octets; uint256 depth; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct DecodedTlv {
        pub start: alloy::sol_types::private::primitives::aliases::U256,
        pub headerLength: alloy::sol_types::private::primitives::aliases::U256,
        pub tag: <Tag as alloy::sol_types::SolType>::RustType,
        pub length: alloy::sol_types::private::primitives::aliases::U256,
        pub value: alloy::sol_types::private::Bytes,
        pub octets: alloy::sol_types::private::Bytes,
        pub depth: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
            Tag,
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Bytes,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
            <Tag as alloy::sol_types::SolType>::RustType,
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::Bytes,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<DecodedTlv> for UnderlyingRustTuple<'_> {
            fn from(value: DecodedTlv) -> Self {
                (
                    value.start,
                    value.headerLength,
                    value.tag,
                    value.length,
                    value.value,
                    value.octets,
                    value.depth,
                )
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for DecodedTlv {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    start: tuple.0,
                    headerLength: tuple.1,
                    tag: tuple.2,
                    length: tuple.3,
                    value: tuple.4,
                    octets: tuple.5,
                    depth: tuple.6,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for DecodedTlv {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for DecodedTlv {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.start),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.headerLength),
                    <Tag as alloy_sol_types::SolType>::tokenize(&self.tag),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.value,
                    ),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.octets,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.depth),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for DecodedTlv {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for DecodedTlv {
            const NAME: &'static str = "DecodedTlv";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "DecodedTlv(uint256 start,uint256 headerLength,Tag tag,uint256 length,bytes value,bytes octets,uint256 depth)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                let mut components = alloy_sol_types::private::Vec::with_capacity(1);
                components.push(<Tag as alloy_sol_types::SolStruct>::eip712_root_type());
                components
                    .extend(<Tag as alloy_sol_types::SolStruct>::eip712_components());
                components
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.start)
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.headerLength)
                        .0,
                    <Tag as alloy_sol_types::SolType>::eip712_data_word(&self.tag).0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.length)
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.value,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::eip712_data_word(
                            &self.octets,
                        )
                        .0,
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.depth)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for DecodedTlv {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.start)
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.headerLength,
                    )
                    + <Tag as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tag,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.length,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.value,
                    )
                    + <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.octets,
                    )
                    + <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(&rust.depth)
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.start,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.headerLength,
                    out,
                );
                <Tag as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tag,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.length,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.value,
                    out,
                );
                <alloy::sol_types::sol_data::Bytes as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.octets,
                    out,
                );
                <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.depth,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**```solidity
struct Tag { bool isConstructed; bytes1 tagType; }
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct Tag {
        pub isConstructed: bool,
        pub tagType: alloy::sol_types::private::FixedBytes<1>,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Bool,
            alloy::sol_types::sol_data::FixedBytes<1>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (bool, alloy::sol_types::private::FixedBytes<1>);
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<Tag> for UnderlyingRustTuple<'_> {
            fn from(value: Tag) -> Self {
                (value.isConstructed, value.tagType)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>> for Tag {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    isConstructed: tuple.0,
                    tagType: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolValue for Tag {
            type SolType = Self;
        }
        #[automatically_derived]
        impl alloy_sol_types::private::SolTypeValue<Self> for Tag {
            #[inline]
            fn stv_to_tokens(&self) -> <Self as alloy_sol_types::SolType>::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.isConstructed,
                    ),
                    <alloy::sol_types::sol_data::FixedBytes<
                        1,
                    > as alloy_sol_types::SolType>::tokenize(&self.tagType),
                )
            }
            #[inline]
            fn stv_abi_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encoded_size(&tuple)
            }
            #[inline]
            fn stv_eip712_data_word(&self) -> alloy_sol_types::Word {
                <Self as alloy_sol_types::SolStruct>::eip712_hash_struct(self)
            }
            #[inline]
            fn stv_abi_encode_packed_to(
                &self,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_encode_packed_to(&tuple, out)
            }
            #[inline]
            fn stv_abi_packed_encoded_size(&self) -> usize {
                if let Some(size) = <Self as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE {
                    return size;
                }
                let tuple = <UnderlyingRustTuple<
                    '_,
                > as ::core::convert::From<Self>>::from(self.clone());
                <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_packed_encoded_size(&tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolType for Tag {
            type RustType = Self;
            type Token<'a> = <UnderlyingSolTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SOL_NAME: &'static str = <Self as alloy_sol_types::SolStruct>::NAME;
            const ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::ENCODED_SIZE;
            const PACKED_ENCODED_SIZE: Option<usize> = <UnderlyingSolTuple<
                '_,
            > as alloy_sol_types::SolType>::PACKED_ENCODED_SIZE;
            #[inline]
            fn valid_token(token: &Self::Token<'_>) -> bool {
                <UnderlyingSolTuple<'_> as alloy_sol_types::SolType>::valid_token(token)
            }
            #[inline]
            fn detokenize(token: Self::Token<'_>) -> Self::RustType {
                let tuple = <UnderlyingSolTuple<
                    '_,
                > as alloy_sol_types::SolType>::detokenize(token);
                <Self as ::core::convert::From<UnderlyingRustTuple<'_>>>::from(tuple)
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolStruct for Tag {
            const NAME: &'static str = "Tag";
            #[inline]
            fn eip712_root_type() -> alloy_sol_types::private::Cow<'static, str> {
                alloy_sol_types::private::Cow::Borrowed(
                    "Tag(bool isConstructed,bytes1 tagType)",
                )
            }
            #[inline]
            fn eip712_components() -> alloy_sol_types::private::Vec<
                alloy_sol_types::private::Cow<'static, str>,
            > {
                alloy_sol_types::private::Vec::new()
            }
            #[inline]
            fn eip712_encode_type() -> alloy_sol_types::private::Cow<'static, str> {
                <Self as alloy_sol_types::SolStruct>::eip712_root_type()
            }
            #[inline]
            fn eip712_encode_data(&self) -> alloy_sol_types::private::Vec<u8> {
                [
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::eip712_data_word(
                            &self.isConstructed,
                        )
                        .0,
                    <alloy::sol_types::sol_data::FixedBytes<
                        1,
                    > as alloy_sol_types::SolType>::eip712_data_word(&self.tagType)
                        .0,
                ]
                    .concat()
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::EventTopic for Tag {
            #[inline]
            fn topic_preimage_length(rust: &Self::RustType) -> usize {
                0usize
                    + <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.isConstructed,
                    )
                    + <alloy::sol_types::sol_data::FixedBytes<
                        1,
                    > as alloy_sol_types::EventTopic>::topic_preimage_length(
                        &rust.tagType,
                    )
            }
            #[inline]
            fn encode_topic_preimage(
                rust: &Self::RustType,
                out: &mut alloy_sol_types::private::Vec<u8>,
            ) {
                out.reserve(
                    <Self as alloy_sol_types::EventTopic>::topic_preimage_length(rust),
                );
                <alloy::sol_types::sol_data::Bool as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.isConstructed,
                    out,
                );
                <alloy::sol_types::sol_data::FixedBytes<
                    1,
                > as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    &rust.tagType,
                    out,
                );
            }
            #[inline]
            fn encode_topic(
                rust: &Self::RustType,
            ) -> alloy_sol_types::abi::token::WordToken {
                let mut out = alloy_sol_types::private::Vec::new();
                <Self as alloy_sol_types::EventTopic>::encode_topic_preimage(
                    rust,
                    &mut out,
                );
                alloy_sol_types::abi::token::WordToken(
                    alloy_sol_types::private::keccak256(out),
                )
            }
        }
    };
    /**Function with signature `computeNumberOfTlvs(bytes,uint256)` and selector `0xb0c50555`.
```solidity
function computeNumberOfTlvs(bytes memory derBytes, uint256 pointer) external pure returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeNumberOfTlvsCall {
        pub derBytes: alloy::sol_types::private::Bytes,
        pub pointer: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`computeNumberOfTlvs(bytes,uint256)`](computeNumberOfTlvsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct computeNumberOfTlvsReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeNumberOfTlvsCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeNumberOfTlvsCall) -> Self {
                    (value.derBytes, value.pointer)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeNumberOfTlvsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        derBytes: tuple.0,
                        pointer: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<computeNumberOfTlvsReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: computeNumberOfTlvsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for computeNumberOfTlvsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for computeNumberOfTlvsCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = computeNumberOfTlvsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "computeNumberOfTlvs(bytes,uint256)";
            const SELECTOR: [u8; 4] = [176u8, 197u8, 5u8, 85u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.derBytes,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.pointer),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `parseDER(bytes,uint256,uint256)` and selector `0x1693280a`.
```solidity
function parseDER(bytes memory derBytes, uint256 pointer, uint256 tlvLength) external pure returns (DecodedTlv[] memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct parseDERCall {
        pub derBytes: alloy::sol_types::private::Bytes,
        pub pointer: alloy::sol_types::private::primitives::aliases::U256,
        pub tlvLength: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`parseDER(bytes,uint256,uint256)`](parseDERCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct parseDERReturn {
        pub _0: alloy::sol_types::private::Vec<
            <DecodedTlv as alloy::sol_types::SolType>::RustType,
        >,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Bytes,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<parseDERCall> for UnderlyingRustTuple<'_> {
                fn from(value: parseDERCall) -> Self {
                    (value.derBytes, value.pointer, value.tlvLength)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for parseDERCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        derBytes: tuple.0,
                        pointer: tuple.1,
                        tlvLength: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Array<DecodedTlv>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Vec<
                    <DecodedTlv as alloy::sol_types::SolType>::RustType,
                >,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<parseDERReturn> for UnderlyingRustTuple<'_> {
                fn from(value: parseDERReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for parseDERReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for parseDERCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Bytes,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = parseDERReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Array<DecodedTlv>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "parseDER(bytes,uint256,uint256)";
            const SELECTOR: [u8; 4] = [22u8, 147u8, 40u8, 10u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.derBytes,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.pointer),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tlvLength),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`DERParser`](self) function calls.
    pub enum DERParserCalls {
        computeNumberOfTlvs(computeNumberOfTlvsCall),
        parseDER(parseDERCall),
    }
    #[automatically_derived]
    impl DERParserCalls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [22u8, 147u8, 40u8, 10u8],
            [176u8, 197u8, 5u8, 85u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for DERParserCalls {
        const NAME: &'static str = "DERParserCalls";
        const MIN_DATA_LENGTH: usize = 96usize;
        const COUNT: usize = 2usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::computeNumberOfTlvs(_) => {
                    <computeNumberOfTlvsCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::parseDER(_) => <parseDERCall as alloy_sol_types::SolCall>::SELECTOR,
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<DERParserCalls>] = &[
                {
                    fn parseDER(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DERParserCalls> {
                        <parseDERCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DERParserCalls::parseDER)
                    }
                    parseDER
                },
                {
                    fn computeNumberOfTlvs(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<DERParserCalls> {
                        <computeNumberOfTlvsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(DERParserCalls::computeNumberOfTlvs)
                    }
                    computeNumberOfTlvs
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::computeNumberOfTlvs(inner) => {
                    <computeNumberOfTlvsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::parseDER(inner) => {
                    <parseDERCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::computeNumberOfTlvs(inner) => {
                    <computeNumberOfTlvsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::parseDER(inner) => {
                    <parseDERCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`DERParser`](self) contract instance.

See the [wrapper's documentation](`DERParserInstance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> DERParserInstance<T, P, N> {
        DERParserInstance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<DERParserInstance<T, P, N>>,
    > {
        DERParserInstance::<T, P, N>::deploy(provider)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
        DERParserInstance::<T, P, N>::deploy_builder(provider)
    }
    /**A [`DERParser`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`DERParser`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct DERParserInstance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for DERParserInstance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("DERParserInstance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DERParserInstance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`DERParser`](self) contract instance.

See the [wrapper's documentation](`DERParserInstance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
        ) -> alloy_contract::Result<DERParserInstance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(provider: P) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                ::core::clone::Clone::clone(&BYTECODE),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> DERParserInstance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> DERParserInstance<T, P, N> {
            DERParserInstance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DERParserInstance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`computeNumberOfTlvs`] function.
        pub fn computeNumberOfTlvs(
            &self,
            derBytes: alloy::sol_types::private::Bytes,
            pointer: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, computeNumberOfTlvsCall, N> {
            self.call_builder(
                &computeNumberOfTlvsCall {
                    derBytes,
                    pointer,
                },
            )
        }
        ///Creates a new call builder for the [`parseDER`] function.
        pub fn parseDER(
            &self,
            derBytes: alloy::sol_types::private::Bytes,
            pointer: alloy::sol_types::private::primitives::aliases::U256,
            tlvLength: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, parseDERCall, N> {
            self.call_builder(
                &parseDERCall {
                    derBytes,
                    pointer,
                    tlvLength,
                },
            )
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > DERParserInstance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
    }
}
