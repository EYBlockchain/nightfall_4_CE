/**

Generated by the following Solidity interface...
```solidity
interface ERC3525 {
    error StringsInsufficientHexLength(uint256 value, uint256 length);

    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
    event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);
    event SetMetadataDescriptor(address indexed metadataDescriptor);
    event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);
    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
    event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);

    constructor(string name_, string symbol_, uint8 decimals_);

    function allowance(uint256 tokenId_, address operator_) external view returns (uint256);
    function approve(address to_, uint256 tokenId_) external payable;
    function approve(uint256 tokenId_, address to_, uint256 value_) external payable;
    function balanceOf(address owner_) external view returns (uint256 balance);
    function balanceOf(uint256 tokenId_) external view returns (uint256);
    function contractURI() external view returns (string memory);
    function getApproved(uint256 tokenId_) external view returns (address);
    function isApprovedForAll(address owner_, address operator_) external view returns (bool);
    function metadataDescriptor() external view returns (address);
    function name() external view returns (string memory);
    function ownerOf(uint256 tokenId_) external view returns (address owner_);
    function safeTransferFrom(address from_, address to_, uint256 tokenId_) external payable;
    function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_) external payable;
    function setApprovalForAll(address operator_, bool approved_) external;
    function slotOf(uint256 tokenId_) external view returns (uint256);
    function slotURI(uint256 slot_) external view returns (string memory);
    function supportsInterface(bytes4 interfaceId) external view returns (bool);
    function symbol() external view returns (string memory);
    function tokenByIndex(uint256 index_) external view returns (uint256);
    function tokenOfOwnerByIndex(address owner_, uint256 index_) external view returns (uint256);
    function tokenURI(uint256 tokenId_) external view returns (string memory);
    function totalSupply() external view returns (uint256);
    function transferFrom(uint256 fromTokenId_, address to_, uint256 value_) external payable returns (uint256 newTokenId);
    function transferFrom(address from_, address to_, uint256 tokenId_) external payable;
    function transferFrom(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) external payable;
    function valueDecimals() external view returns (uint8);
}
```

...which was generated by the following JSON ABI:
```json
[
  {
    "type": "constructor",
    "inputs": [
      {
        "name": "name_",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "symbol_",
        "type": "string",
        "internalType": "string"
      },
      {
        "name": "decimals_",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "allowance",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "operator_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "to_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "approve",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "to_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "owner_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "balance",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "balanceOf",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "contractURI",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "getApproved",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "isApprovedForAll",
    "inputs": [
      {
        "name": "owner_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "operator_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "metadataDescriptor",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "address",
        "internalType": "contract IERC3525MetadataDescriptor"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "name",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "ownerOf",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "owner_",
        "type": "address",
        "internalType": "address"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "safeTransferFrom",
    "inputs": [
      {
        "name": "from_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "data_",
        "type": "bytes",
        "internalType": "bytes"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "setApprovalForAll",
    "inputs": [
      {
        "name": "operator_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "approved_",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "outputs": [],
    "stateMutability": "nonpayable"
  },
  {
    "type": "function",
    "name": "slotOf",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "slotURI",
    "inputs": [
      {
        "name": "slot_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "supportsInterface",
    "inputs": [
      {
        "name": "interfaceId",
        "type": "bytes4",
        "internalType": "bytes4"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "bool",
        "internalType": "bool"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "symbol",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenByIndex",
    "inputs": [
      {
        "name": "index_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenOfOwnerByIndex",
    "inputs": [
      {
        "name": "owner_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "index_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "tokenURI",
    "inputs": [
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "",
        "type": "string",
        "internalType": "string"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "totalSupply",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "fromTokenId_",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "to_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "value_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [
      {
        "name": "newTokenId",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "from_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "to_",
        "type": "address",
        "internalType": "address"
      },
      {
        "name": "tokenId_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "transferFrom",
    "inputs": [
      {
        "name": "fromTokenId_",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "toTokenId_",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "value_",
        "type": "uint256",
        "internalType": "uint256"
      }
    ],
    "outputs": [],
    "stateMutability": "payable"
  },
  {
    "type": "function",
    "name": "valueDecimals",
    "inputs": [],
    "outputs": [
      {
        "name": "",
        "type": "uint8",
        "internalType": "uint8"
      }
    ],
    "stateMutability": "view"
  },
  {
    "type": "event",
    "name": "Approval",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_approved",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApprovalForAll",
    "inputs": [
      {
        "name": "_owner",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_approved",
        "type": "bool",
        "indexed": false,
        "internalType": "bool"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "ApprovalValue",
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "_operator",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SetMetadataDescriptor",
    "inputs": [
      {
        "name": "metadataDescriptor",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "SlotChanged",
    "inputs": [
      {
        "name": "_tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "_oldSlot",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "_newSlot",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "Transfer",
    "inputs": [
      {
        "name": "_from",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_to",
        "type": "address",
        "indexed": true,
        "internalType": "address"
      },
      {
        "name": "_tokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "event",
    "name": "TransferValue",
    "inputs": [
      {
        "name": "_fromTokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "_toTokenId",
        "type": "uint256",
        "indexed": true,
        "internalType": "uint256"
      },
      {
        "name": "_value",
        "type": "uint256",
        "indexed": false,
        "internalType": "uint256"
      }
    ],
    "anonymous": false
  },
  {
    "type": "error",
    "name": "StringsInsufficientHexLength",
    "inputs": [
      {
        "name": "value",
        "type": "uint256",
        "internalType": "uint256"
      },
      {
        "name": "length",
        "type": "uint256",
        "internalType": "uint256"
      }
    ]
  }
]
```*/
#[allow(
    non_camel_case_types,
    non_snake_case,
    clippy::pub_underscore_fields,
    clippy::style
)]
pub mod ERC3525 {
    use super::*;
    use alloy::sol_types as alloy_sol_types;
    /// The creation / init bytecode of the contract.
    ///
    /// ```text
    ///0x608060405234801561000f575f5ffd5b50604051612d3a380380612d3a83398101604081905261002e91610105565b60016003555f61003e8482610206565b50600161004b8382610206565b506002805460ff191660ff92909216919091179055506102c09050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f83011261008b575f5ffd5b81516001600160401b038111156100a4576100a4610068565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100d2576100d2610068565b6040528181528382016020018510156100e9575f5ffd5b8160208501602083015e5f918101602001919091529392505050565b5f5f5f60608486031215610117575f5ffd5b83516001600160401b0381111561012c575f5ffd5b6101388682870161007c565b602086015190945090506001600160401b03811115610155575f5ffd5b6101618682870161007c565b925050604084015160ff81168114610177575f5ffd5b809150509250925092565b600181811c9082168061019657607f821691505b6020821081036101b457634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561020157805f5260205f20601f840160051c810160208510156101df5750805b601f840160051c820191505b818110156101fe575f81556001016101eb565b50505b505050565b81516001600160401b0381111561021f5761021f610068565b6102338161022d8454610182565b846101ba565b6020601f821160018114610265575f831561024e5750848201515b5f19600385901b1c1916600184901b1784556101fe565b5f84815260208120601f198516915b828110156102945787850151825560209485019460019092019101610274565b50848210156102b157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b612a6d806102cd5f395ff3fe60806040526004361061017b575f3560e01c80634f6ccce7116100cd5780639cc7f70811610087578063c87b56dd11610062578063c87b56dd14610400578063e345e0bc1461041f578063e8a3d4851461043e578063e985e9c514610452575f5ffd5b80639cc7f708146103af578063a22cb465146103ce578063b88d4fde146103ed575f5ffd5b80634f6ccce71461030c5780636352211e1461032b57806370a082311461034a578063840f7113146103695780638cb0a5111461038857806395d89b411461039b575f5ffd5b806318160ddd116101385780632f745c59116101135780632f745c59146102a6578063310ed7f0146102c55780633e7e8669146102d857806342842e0e146102f9575f5ffd5b806318160ddd1461026057806323b872dd14610274578063263f3e7e14610287575f5ffd5b806301ffc9a71461017f57806306fdde03146101b3578063081812fc146101d4578063095ea7b31461020b57806309c3dd87146102205780630f485c021461023f575b5f5ffd5b34801561018a575f5ffd5b5061019e610199366004612431565b61049d565b60405190151581526020015b60405180910390f35b3480156101be575f5ffd5b506101c761053f565b6040516101aa919061247a565b3480156101df575f5ffd5b506101f36101ee36600461248c565b6105ce565b6040516001600160a01b0390911681526020016101aa565b61021e6102193660046124b9565b61061d565b005b34801561022b575f5ffd5b506101c761023a36600461248c565b610700565b61025261024d3660046124e1565b6107ea565b6040519081526020016101aa565b34801561026b575f5ffd5b50600554610252565b61021e610282366004612514565b610820565b348015610292575f5ffd5b506102526102a136600461248c565b610851565b3480156102b1575f5ffd5b506102526102c03660046124b9565b610895565b61021e6102d336600461253d565b610932565b3480156102e3575f5ffd5b5060025460405160ff90911681526020016101aa565b61021e610307366004612514565b610948565b348015610317575f5ffd5b5061025261032636600461248c565b610962565b348015610336575f5ffd5b506101f361034536600461248c565b6109ef565b348015610355575f5ffd5b50610252610364366004612566565b610a88565b348015610374575f5ffd5b506008546101f3906001600160a01b031681565b61021e6103963660046124e1565b610b0e565b3480156103a6575f5ffd5b506101c7610bcc565b3480156103ba575f5ffd5b506102526103c936600461248c565b610bdb565b3480156103d9575f5ffd5b5061021e6103e836600461258c565b610c1f565b61021e6103fb36600461262d565b610c2e565b34801561040b575f5ffd5b506101c761041a36600461248c565b610c60565b34801561042a575f5ffd5b506102526104393660046126d1565b610cfb565b348015610449575f5ffd5b506101c7610d2d565b34801561045d575f5ffd5b5061019e61046c3660046126fb565b6001600160a01b039182165f9081526007602090815260408083209390941682526002909201909152205460ff1690565b5f6001600160e01b031982166301ffc9a760e01b14806104cd57506001600160e01b03198216630354d60560e61b145b806104e857506001600160e01b031982166380ac58cd60e01b145b8061050357506001600160e01b031982166370b0048160e11b145b8061051e57506001600160e01b0319821663780e9d6360e01b145b8061053957506001600160e01b03198216635b5e139f60e01b145b92915050565b60605f805461054d90612723565b80601f016020809104026020016040519081016040528092919081815260200182805461057990612723565b80156105c45780601f1061059b576101008083540402835291602001916105c4565b820191905f5260205f20905b8154815290600101906020018083116105a757829003601f168201915b5050505050905090565b5f6105d882610e1e565b5f828152600660205260409020546005805490919081106105fb576105fb61275b565b5f9182526020909120600460069092020101546001600160a01b031692915050565b5f610627826109ef565b9050806001600160a01b0316836001600160a01b0316036106635760405162461bcd60e51b815260040161065a9061276f565b60405180910390fd5b336001600160a01b038216148061067f575061067f813361046c565b6106f15760405162461bcd60e51b815260206004820152603960248201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606482015260840161065a565b6106fb8383610e72565b505050565b60605f61071760408051602081019091525f815290565b6008549091506001600160a01b0316610775575f8151116107465760405180602001604052805f8152506107e3565b8061075084610f07565b6040516020016107619291906127c8565b6040516020818303038152906040526107e3565b600854604051633601bfc560e11b8152600481018590526001600160a01b0390911690636c037f8a906024015b5f60405180830381865afa1580156107bc573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107e391908101906127f4565b9392505050565b5f6107f6338584610f97565b6107ff84611025565b9050610815838261080f87610851565b5f61102e565b6107e3848284611157565b61082a3382611444565b6108465760405162461bcd60e51b815260040161065a90612869565b6106fb8383836114c5565b5f61085b82610e1e565b5f8281526006602052604090205460058054909190811061087e5761087e61275b565b905f5260205f209060060201600101549050919050565b5f61089f83610a88565b82106108f85760405162461bcd60e51b815260206004820152602260248201527f455243333532353a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161065a565b6001600160a01b0383165f9081526007602052604090208054839081106109215761092161275b565b905f5260205f200154905092915050565b61093d338483610f97565b6106fb838383611157565b6106fb83838360405180602001604052805f815250610c2e565b5f61096c60055490565b82106109c65760405162461bcd60e51b815260206004820152602360248201527f455243333532353a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b606482015260840161065a565b600582815481106109d9576109d961275b565b905f5260205f2090600602015f01549050919050565b5f6109f982610e1e565b5f82815260066020526040902054600580549091908110610a1c57610a1c61275b565b5f9182526020909120600360069092020101546001600160a01b0316905080610a835760405162461bcd60e51b8152602060048201526019602482015278115490cccd4c8d4e881a5b9d985b1a59081d1bdad95b881251603a1b604482015260640161065a565b919050565b5f6001600160a01b038216610af35760405162461bcd60e51b815260206004820152602b60248201527f455243333532353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161065a565b506001600160a01b03165f9081526007602052604090205490565b5f610b18846109ef565b9050806001600160a01b0316836001600160a01b031603610b4b5760405162461bcd60e51b815260040161065a9061276f565b610b553385611444565b610bbb5760405162461bcd60e51b815260206004820152603160248201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606482015260840161065a565b610bc6848484611623565b50505050565b60606001805461054d90612723565b5f610be582610e1e565b5f82815260066020526040902054600580549091908110610c0857610c0861275b565b905f5260205f209060060201600201549050919050565b610c2a338383611758565b5050565b610c383383611444565b610c545760405162461bcd60e51b815260040161065a90612869565b610bc684848484611821565b6060610c6b82610e1e565b5f610c8060408051602081019091525f815290565b6008549091506001600160a01b0316610cca575f815111610caf5760405180602001604052805f8152506107e3565b80610cb984610f07565b6040516020016107619291906128bb565b6008546040516344a5a61760e11b8152600481018590526001600160a01b039091169063894b4c2e906024016107a2565b5f610d0583610e1e565b505f9182526004602090815260408084206001600160a01b0393909316845291905290205490565b60605f610d4460408051602081019091525f815290565b6008549091506001600160a01b0316610da2575f815111610d735760405180602001604052805f815250610e18565b80610d7d30611894565b604051602001610d8e9291906128cf565b604051602081830303815290604052610e18565b60085f9054906101000a90046001600160a01b03166001600160a01b031663725fa09c6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610df1573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e1891908101906127f4565b91505090565b610e27816118aa565b610e6f5760405162461bcd60e51b8152602060048201526019602482015278115490cccd4c8d4e881a5b9d985b1a59081d1bdad95b881251603a1b604482015260640161065a565b50565b5f81815260066020526040902054600580548492908110610e9557610e9561275b565b5f918252602090912060069091020160040180546001600160a01b0319166001600160a01b0392831617905581908316610ece826109ef565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60605f610f13836118f1565b60010190505f8167ffffffffffffffff811115610f3257610f326125c1565b6040519080825280601f01601f191660200182016040528015610f5c576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610f6657509392505050565b5f610fa28385610cfb565b9050610fae8484611444565b158015610fbc57505f198114155b15610bc657818110156110115760405162461bcd60e51b815260206004820152601f60248201527f455243333532353a20696e73756666696369656e7420616c6c6f77616e636500604482015260640161065a565b610bc68385611020858561290a565b611623565b5f6105396119c8565b6001600160a01b03841661108e5760405162461bcd60e51b815260206004820152602160248201527f455243333532353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161065a565b825f036110e75760405162461bcd60e51b815260206004820152602160248201527f455243333532353a2063616e6e6f74206d696e74207a65726f20746f6b656e496044820152601960fa1b606482015260840161065a565b6110f0836118aa565b1561113d5760405162461bcd60e51b815260206004820152601d60248201527f455243333532353a20746f6b656e20616c7265616479206d696e746564000000604482015260640161065a565b6111488484846119e1565b6111528382611aa4565b610bc6565b611160836118aa565b6111bc5760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e736665722066726f6d20696e76616c696420746044820152661bdad95b88125160ca1b606482015260840161065a565b6111c5826118aa565b61121f5760405162461bcd60e51b815260206004820152602560248201527f455243333532353a207472616e7366657220746f20696e76616c696420746f6b604482015264195b88125160da1b606482015260840161065a565b5f838152600660205260408120546005805490919081106112425761124261275b565b905f5260205f20906006020190505f600560065f8681526020019081526020015f2054815481106112755761127561275b565b905f5260205f209060060201905082826002015410156112ea5760405162461bcd60e51b815260206004820152602a60248201527f455243333532353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161065a565b80600101548260010154146113585760405162461bcd60e51b815260206004820152602e60248201527f455243333532353a207472616e7366657220746f20746f6b656e20776974682060448201526d191a5999995c995b9d081cdb1bdd60921b606482015260840161065a565b82826002015f82825461136b919061290a565b9250508190555082816002015f828254611385919061291d565b9091555050604051838152849086907f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc69060200160405180910390a36113db85858560405180602001604052805f815250611b24565b61143d5760405162461bcd60e51b815260206004820152602d60248201527f455243333532353a207472616e736665722072656a656374656420627920455260448201526c21999a991aa932b1b2b4bb32b960991b606482015260840161065a565b5050505050565b5f5f61144f836109ef565b9050806001600160a01b0316846001600160a01b0316148061149957506001600160a01b038082165f908152600760209081526040808320938816835260029093019052205460ff165b806114bd5750836001600160a01b03166114b2846105ce565b6001600160a01b0316145b949350505050565b826001600160a01b03166114d8826109ef565b6001600160a01b03161461153a5760405162461bcd60e51b8152602060048201526024808201527f455243333532353a207472616e736665722066726f6d20696e76616c6964206f6044820152633bb732b960e11b606482015260840161065a565b6001600160a01b03821661159e5760405162461bcd60e51b815260206004820152602560248201527f455243333532353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161065a565b5f6115a882610851565b90505f6115b483610bdb565b90506115c05f84610e72565b6115c983611c90565b6115d38584611d2c565b6115dd8484611e3f565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461143d565b6001600160a01b03821661168c5760405162461bcd60e51b815260206004820152602a60248201527f455243333532353a20617070726f76652076616c756520746f20746865207a65604482015269726f206164647265737360b01b606482015260840161065a565b6116968284611ec6565b6116fa575f838152600660205260409020546005805490919081106116bd576116bd61275b565b5f9182526020808320600692909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b5f8381526004602090815260408083206001600160a01b038616808552908352928190208490555183815285917f621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b91015b60405180910390a3505050565b816001600160a01b0316836001600160a01b0316036117b95760405162461bcd60e51b815260206004820152601a60248201527f455243333532353a20617070726f766520746f2063616c6c6572000000000000604482015260640161065a565b6001600160a01b038381165f8181526007602090815260408083209487168084526002909501825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910161174b565b61182c8484846114c5565b61183884848484611f88565b610bc65760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e7366657220746f206e6f6e204552433732315260448201526632b1b2b4bb32b960c91b606482015260840161065a565b60606105396001600160a01b03831660146120ca565b6005545f901580159061053957505f828152600660205260409020546005805484929081106118db576118db61275b565b905f5260205f2090600602015f01541492915050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061192f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061195b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061197957662386f26fc10000830492506010015b6305f5e1008310611991576305f5e100830492506008015b61271083106119a557612710830492506004015b606483106119b7576064830492506002015b600a83106105395760010192915050565b600380545f91826119d883612930565b91905055905090565b6040805160c08101825283815260208082018490525f8284018190526001600160a01b038716606084015260808301819052835181815291820190935260a08201529050611a2e8161223c565b611a388484611e3f565b60405183906001600160a01b038616905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4815f847fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a450505050565b5f82815260066020526040902054600580548392908110611ac757611ac761275b565b905f5260205f2090600602016002015f828254611ae4919061291d565b909155505060405181815282905f907f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc69060200160405180910390a35050565b5f5f611b2f856109ef565b9050803b63ffffffff1615611c84576040516301ffc9a760e01b8152629ce20b60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa925050508015611ba4575060408051601f3d908101601f19168201909252611ba191810190612948565b60015b611be2573d808015611bd1576040519150601f19603f3d011682016040523d82523d5f602084013e611bd6565b606091505b506001925050506114bd565b8015611c7957604051629ce20b60e01b81525f906001600160a01b03841690629ce20b90611c1c9033908c908c908c908c90600401612963565b6020604051808303815f875af1158015611c38573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c5c91906129a0565b6001600160e01b031916629ce20b60e01b1493506114bd92505050565b6001925050506114bd565b50600195945050505050565b5f81815260066020526040812054600580549091908110611cb357611cb361275b565b5f91825260208220600560069092020190810154909250905b81811015611d1e575f836005018281548110611cea57611cea61275b565b5f9182526020808320909101548783526004825260408084206001600160a01b039092168452915281205550600101611ccc565b506106fb600583015f61238a565b5f81815260066020526040812054600580549091908110611d4f57611d4f61275b565b5f918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b0394851617905591841681526007909152604081208054909190611d9d9060019061290a565b90505f825f018281548110611db457611db461275b565b905f5260205f20015490505f836001015f8681526020019081526020015f2054905081845f018281548110611deb57611deb61275b565b5f9182526020808320909101929092558381526001860190915260408082208390558682528120558354849080611e2457611e246129bb565b600190038181905f5260205f20015f90559055505050505050565b5f81815260066020526040902054600580548492908110611e6257611e6261275b565b5f918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b03948516179055939091168152600780845260408083208054858552600182810188529285208190559286529082018155825292902090910155565b5f81815260066020526040812054600580548392908110611ee957611ee961275b565b5f918252602082206005600690920201015491505b81811015611f7e575f84815260066020526040902054600580546001600160a01b03881692908110611f3257611f3261275b565b905f5260205f2090600602016005018281548110611f5257611f5261275b565b5f918252602090912001546001600160a01b031603611f7657600192505050610539565b600101611efe565b505f949350505050565b5f833b63ffffffff16156120c257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fc89033908990889088906004016129cf565b6020604051808303815f875af1925050508015612002575060408051601f3d908101601f19168201909252611fff918101906129a0565b60015b6120a8573d80801561202f576040519150601f19603f3d011682016040523d82523d5f602084013e612034565b606091505b5080515f036120a05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161065a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114bd565b5060016114bd565b6060825f6120d9846002612a0b565b6120e490600261291d565b67ffffffffffffffff8111156120fc576120fc6125c1565b6040519080825280601f01601f191660200182016040528015612126576020820181803683370190505b509050600360fc1b815f815181106121405761214061275b565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061216e5761216e61275b565b60200101906001600160f81b03191690815f1a9053505f612190856002612a0b565b61219b90600161291d565b90505b6001811115612212576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106121cf576121cf61275b565b1a60f81b8282815181106121e5576121e561275b565b60200101906001600160f81b03191690815f1a90535060049290921c9161220b81612a22565b905061219e565b5081156114bd5760405163e22e27eb60e01b8152600481018690526024810185905260440161065a565b6005805482515f90815260066020818152604080842085905560018501865594909252845192027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101928355818501517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1820155928401517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db284015560608401517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3840180546001600160a01b039283166001600160a01b03199182161790915560808601517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db48601805491909316911617905560a084015180518594610bc6937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db59091019201906123a5565b5080545f8255905f5260205f2090810190610e6f9190612408565b828054828255905f5260205f209081019282156123f8579160200282015b828111156123f857825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906123c3565b50612404929150612408565b5090565b5b80821115612404575f8155600101612409565b6001600160e01b031981168114610e6f575f5ffd5b5f60208284031215612441575f5ffd5b81356107e38161241c565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6107e3602083018461244c565b5f6020828403121561249c575f5ffd5b5035919050565b80356001600160a01b0381168114610a83575f5ffd5b5f5f604083850312156124ca575f5ffd5b6124d3836124a3565b946020939093013593505050565b5f5f5f606084860312156124f3575f5ffd5b83359250612503602085016124a3565b929592945050506040919091013590565b5f5f5f60608486031215612526575f5ffd5b61252f846124a3565b9250612503602085016124a3565b5f5f5f6060848603121561254f575f5ffd5b505081359360208301359350604090920135919050565b5f60208284031215612576575f5ffd5b6107e3826124a3565b8015158114610e6f575f5ffd5b5f5f6040838503121561259d575f5ffd5b6125a6836124a3565b915060208301356125b68161257f565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125fe576125fe6125c1565b604052919050565b5f67ffffffffffffffff82111561261f5761261f6125c1565b50601f01601f191660200190565b5f5f5f5f60808587031215612640575f5ffd5b612649856124a3565b9350612657602086016124a3565b925060408501359150606085013567ffffffffffffffff811115612679575f5ffd5b8501601f81018713612689575f5ffd5b803561269c61269782612606565b6125d5565b8181528860208385010111156126b0575f5ffd5b816020840160208301375f6020838301015280935050505092959194509250565b5f5f604083850312156126e2575f5ffd5b823591506126f2602084016124a3565b90509250929050565b5f5f6040838503121561270c575f5ffd5b612715836124a3565b91506126f2602084016124a3565b600181811c9082168061273757607f821691505b60208210810361275557634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b60208082526022908201527f455243333532353a20617070726f76616c20746f2063757272656e74206f776e60408201526132b960f11b606082015260800190565b5f81518060208401855e5f93019283525090919050565b5f6127d382856127b1565b64736c6f742f60d81b81526127eb60058201856127b1565b95945050505050565b5f60208284031215612804575f5ffd5b815167ffffffffffffffff81111561281a575f5ffd5b8201601f8101841361282a575f5ffd5b805161283861269782612606565b81815285602083850101111561284c575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b60208082526032908201527f455243333532353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b5f6114bd6128c983866127b1565b846127b1565b5f6128da82856127b1565b68636f6e74726163742f60b81b81526127eb60098201856127b1565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610539576105396128f6565b80820180821115610539576105396128f6565b5f60018201612941576129416128f6565b5060010190565b5f60208284031215612958575f5ffd5b81516107e38161257f565b60018060a01b038616815284602082015283604082015282606082015260a060808201525f61299560a083018461244c565b979650505050505050565b5f602082840312156129b0575f5ffd5b81516107e38161241c565b634e487b7160e01b5f52603160045260245ffd5b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612a019083018461244c565b9695505050505050565b8082028115828204841417610539576105396128f6565b5f81612a3057612a306128f6565b505f19019056fea26469706673582212204fe6f875df22237eb2223f880a25f4754c397b7786690d8d90e3e3628ef1662d64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R4\x80\x15a\0\x0FW__\xFD[P`@Qa-:8\x03\x80a-:\x839\x81\x01`@\x81\x90Ra\0.\x91a\x01\x05V[`\x01`\x03U_a\0>\x84\x82a\x02\x06V[P`\x01a\0K\x83\x82a\x02\x06V[P`\x02\x80T`\xFF\x19\x16`\xFF\x92\x90\x92\x16\x91\x90\x91\x17\x90UPa\x02\xC0\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[_\x82`\x1F\x83\x01\x12a\0\x8BW__\xFD[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\0\xA4Wa\0\xA4a\0hV[`@Q`\x1F\x82\x01`\x1F\x19\x90\x81\x16`?\x01\x16\x81\x01`\x01`\x01`@\x1B\x03\x81\x11\x82\x82\x10\x17\x15a\0\xD2Wa\0\xD2a\0hV[`@R\x81\x81R\x83\x82\x01` \x01\x85\x10\x15a\0\xE9W__\xFD[\x81` \x85\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x93\x92PPPV[___``\x84\x86\x03\x12\x15a\x01\x17W__\xFD[\x83Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x01,W__\xFD[a\x018\x86\x82\x87\x01a\0|V[` \x86\x01Q\x90\x94P\x90P`\x01`\x01`@\x1B\x03\x81\x11\x15a\x01UW__\xFD[a\x01a\x86\x82\x87\x01a\0|V[\x92PP`@\x84\x01Q`\xFF\x81\x16\x81\x14a\x01wW__\xFD[\x80\x91PP\x92P\x92P\x92V[`\x01\x81\x81\x1C\x90\x82\x16\x80a\x01\x96W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a\x01\xB4WcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[`\x1F\x82\x11\x15a\x02\x01W\x80_R` _ `\x1F\x84\x01`\x05\x1C\x81\x01` \x85\x10\x15a\x01\xDFWP\x80[`\x1F\x84\x01`\x05\x1C\x82\x01\x91P[\x81\x81\x10\x15a\x01\xFEW_\x81U`\x01\x01a\x01\xEBV[PP[PPPV[\x81Q`\x01`\x01`@\x1B\x03\x81\x11\x15a\x02\x1FWa\x02\x1Fa\0hV[a\x023\x81a\x02-\x84Ta\x01\x82V[\x84a\x01\xBAV[` `\x1F\x82\x11`\x01\x81\x14a\x02eW_\x83\x15a\x02NWP\x84\x82\x01Q[_\x19`\x03\x85\x90\x1B\x1C\x19\x16`\x01\x84\x90\x1B\x17\x84Ua\x01\xFEV[_\x84\x81R` \x81 `\x1F\x19\x85\x16\x91[\x82\x81\x10\x15a\x02\x94W\x87\x85\x01Q\x82U` \x94\x85\x01\x94`\x01\x90\x92\x01\x91\x01a\x02tV[P\x84\x82\x10\x15a\x02\xB1W\x86\x84\x01Q_\x19`\x03\x87\x90\x1B`\xF8\x16\x1C\x19\x16\x81U[PPPP`\x01\x90\x81\x1B\x01\x90UPV[a*m\x80a\x02\xCD_9_\xF3\xFE`\x80`@R`\x046\x10a\x01{W_5`\xE0\x1C\x80cOl\xCC\xE7\x11a\0\xCDW\x80c\x9C\xC7\xF7\x08\x11a\0\x87W\x80c\xC8{V\xDD\x11a\0bW\x80c\xC8{V\xDD\x14a\x04\0W\x80c\xE3E\xE0\xBC\x14a\x04\x1FW\x80c\xE8\xA3\xD4\x85\x14a\x04>W\x80c\xE9\x85\xE9\xC5\x14a\x04RW__\xFD[\x80c\x9C\xC7\xF7\x08\x14a\x03\xAFW\x80c\xA2,\xB4e\x14a\x03\xCEW\x80c\xB8\x8DO\xDE\x14a\x03\xEDW__\xFD[\x80cOl\xCC\xE7\x14a\x03\x0CW\x80ccR!\x1E\x14a\x03+W\x80cp\xA0\x821\x14a\x03JW\x80c\x84\x0Fq\x13\x14a\x03iW\x80c\x8C\xB0\xA5\x11\x14a\x03\x88W\x80c\x95\xD8\x9BA\x14a\x03\x9BW__\xFD[\x80c\x18\x16\r\xDD\x11a\x018W\x80c/t\\Y\x11a\x01\x13W\x80c/t\\Y\x14a\x02\xA6W\x80c1\x0E\xD7\xF0\x14a\x02\xC5W\x80c>~\x86i\x14a\x02\xD8W\x80cB\x84.\x0E\x14a\x02\xF9W__\xFD[\x80c\x18\x16\r\xDD\x14a\x02`W\x80c#\xB8r\xDD\x14a\x02tW\x80c&?>~\x14a\x02\x87W__\xFD[\x80c\x01\xFF\xC9\xA7\x14a\x01\x7FW\x80c\x06\xFD\xDE\x03\x14a\x01\xB3W\x80c\x08\x18\x12\xFC\x14a\x01\xD4W\x80c\t^\xA7\xB3\x14a\x02\x0BW\x80c\t\xC3\xDD\x87\x14a\x02 W\x80c\x0FH\\\x02\x14a\x02?W[__\xFD[4\x80\x15a\x01\x8AW__\xFD[Pa\x01\x9Ea\x01\x996`\x04a$1V[a\x04\x9DV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBEW__\xFD[Pa\x01\xC7a\x05?V[`@Qa\x01\xAA\x91\x90a$zV[4\x80\x15a\x01\xDFW__\xFD[Pa\x01\xF3a\x01\xEE6`\x04a$\x8CV[a\x05\xCEV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\xAAV[a\x02\x1Ea\x02\x196`\x04a$\xB9V[a\x06\x1DV[\0[4\x80\x15a\x02+W__\xFD[Pa\x01\xC7a\x02:6`\x04a$\x8CV[a\x07\0V[a\x02Ra\x02M6`\x04a$\xE1V[a\x07\xEAV[`@Q\x90\x81R` \x01a\x01\xAAV[4\x80\x15a\x02kW__\xFD[P`\x05Ta\x02RV[a\x02\x1Ea\x02\x826`\x04a%\x14V[a\x08 V[4\x80\x15a\x02\x92W__\xFD[Pa\x02Ra\x02\xA16`\x04a$\x8CV[a\x08QV[4\x80\x15a\x02\xB1W__\xFD[Pa\x02Ra\x02\xC06`\x04a$\xB9V[a\x08\x95V[a\x02\x1Ea\x02\xD36`\x04a%=V[a\t2V[4\x80\x15a\x02\xE3W__\xFD[P`\x02T`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01\xAAV[a\x02\x1Ea\x03\x076`\x04a%\x14V[a\tHV[4\x80\x15a\x03\x17W__\xFD[Pa\x02Ra\x03&6`\x04a$\x8CV[a\tbV[4\x80\x15a\x036W__\xFD[Pa\x01\xF3a\x03E6`\x04a$\x8CV[a\t\xEFV[4\x80\x15a\x03UW__\xFD[Pa\x02Ra\x03d6`\x04a%fV[a\n\x88V[4\x80\x15a\x03tW__\xFD[P`\x08Ta\x01\xF3\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\x1Ea\x03\x966`\x04a$\xE1V[a\x0B\x0EV[4\x80\x15a\x03\xA6W__\xFD[Pa\x01\xC7a\x0B\xCCV[4\x80\x15a\x03\xBAW__\xFD[Pa\x02Ra\x03\xC96`\x04a$\x8CV[a\x0B\xDBV[4\x80\x15a\x03\xD9W__\xFD[Pa\x02\x1Ea\x03\xE86`\x04a%\x8CV[a\x0C\x1FV[a\x02\x1Ea\x03\xFB6`\x04a&-V[a\x0C.V[4\x80\x15a\x04\x0BW__\xFD[Pa\x01\xC7a\x04\x1A6`\x04a$\x8CV[a\x0C`V[4\x80\x15a\x04*W__\xFD[Pa\x02Ra\x0496`\x04a&\xD1V[a\x0C\xFBV[4\x80\x15a\x04IW__\xFD[Pa\x01\xC7a\r-V[4\x80\x15a\x04]W__\xFD[Pa\x01\x9Ea\x04l6`\x04a&\xFBV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16_\x90\x81R`\x07` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R`\x02\x90\x92\x01\x90\x91R T`\xFF\x16\x90V[_`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x01\xFF\xC9\xA7`\xE0\x1B\x14\x80a\x04\xCDWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x03T\xD6\x05`\xE6\x1B\x14[\x80a\x04\xE8WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x80\xACX\xCD`\xE0\x1B\x14[\x80a\x05\x03WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cp\xB0\x04\x81`\xE1\x1B\x14[\x80a\x05\x1EWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cx\x0E\x9Dc`\xE0\x1B\x14[\x80a\x059WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c[^\x13\x9F`\xE0\x1B\x14[\x92\x91PPV[``_\x80Ta\x05M\x90a'#V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05y\x90a'#V[\x80\x15a\x05\xC4W\x80`\x1F\x10a\x05\x9BWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\xC4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xA7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[_a\x05\xD8\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x05\xFBWa\x05\xFBa'[V[_\x91\x82R` \x90\x91 `\x04`\x06\x90\x92\x02\x01\x01T`\x01`\x01`\xA0\x1B\x03\x16\x92\x91PPV[_a\x06'\x82a\t\xEFV[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x03a\x06cW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a'oV[`@Q\x80\x91\x03\x90\xFD[3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14\x80a\x06\x7FWPa\x06\x7F\x813a\x04lV[a\x06\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`9`$\x82\x01R\x7FERC3525: approve caller is not o`D\x82\x01R\x7Fwner nor approved for all\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06ZV[a\x06\xFB\x83\x83a\x0ErV[PPPV[``_a\x07\x17`@\x80Q` \x81\x01\x90\x91R_\x81R\x90V[`\x08T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x16a\x07uW_\x81Q\x11a\x07FW`@Q\x80` \x01`@R\x80_\x81RPa\x07\xE3V[\x80a\x07P\x84a\x0F\x07V[`@Q` \x01a\x07a\x92\x91\x90a'\xC8V[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x07\xE3V[`\x08T`@Qc6\x01\xBF\xC5`\xE1\x1B\x81R`\x04\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cl\x03\x7F\x8A\x90`$\x01[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\xBCW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\xE3\x91\x90\x81\x01\x90a'\xF4V[\x93\x92PPPV[_a\x07\xF63\x85\x84a\x0F\x97V[a\x07\xFF\x84a\x10%V[\x90Pa\x08\x15\x83\x82a\x08\x0F\x87a\x08QV[_a\x10.V[a\x07\xE3\x84\x82\x84a\x11WV[a\x08*3\x82a\x14DV[a\x08FW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a(iV[a\x06\xFB\x83\x83\x83a\x14\xC5V[_a\x08[\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x08~Wa\x08~a'[V[\x90_R` _ \x90`\x06\x02\x01`\x01\x01T\x90P\x91\x90PV[_a\x08\x9F\x83a\n\x88V[\x82\x10a\x08\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC3525: owner index out of boun`D\x82\x01Rads`\xF0\x1B`d\x82\x01R`\x84\x01a\x06ZV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x07` R`@\x90 \x80T\x83\x90\x81\x10a\t!Wa\t!a'[V[\x90_R` _ \x01T\x90P\x92\x91PPV[a\t=3\x84\x83a\x0F\x97V[a\x06\xFB\x83\x83\x83a\x11WV[a\x06\xFB\x83\x83\x83`@Q\x80` \x01`@R\x80_\x81RPa\x0C.V[_a\tl`\x05T\x90V[\x82\x10a\t\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC3525: global index out of bou`D\x82\x01Rbnds`\xE8\x1B`d\x82\x01R`\x84\x01a\x06ZV[`\x05\x82\x81T\x81\x10a\t\xD9Wa\t\xD9a'[V[\x90_R` _ \x90`\x06\x02\x01_\x01T\x90P\x91\x90PV[_a\t\xF9\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\n\x1CWa\n\x1Ca'[V[_\x91\x82R` \x90\x91 `\x03`\x06\x90\x92\x02\x01\x01T`\x01`\x01`\xA0\x1B\x03\x16\x90P\x80a\n\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x11T\x90\xCC\xCDL\x8DN\x88\x1A[\x9D\x98[\x1AY\x08\x1D\x1B\xDA\xD9[\x88\x12Q`:\x1B`D\x82\x01R`d\x01a\x06ZV[\x91\x90PV[_`\x01`\x01`\xA0\x1B\x03\x82\x16a\n\xF3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FERC3525: balance query for the z`D\x82\x01Rjero address`\xA8\x1B`d\x82\x01R`\x84\x01a\x06ZV[P`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x07` R`@\x90 T\x90V[_a\x0B\x18\x84a\t\xEFV[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x03a\x0BKW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a'oV[a\x0BU3\x85a\x14DV[a\x0B\xBBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`1`$\x82\x01R\x7FERC3525: approve caller is not o`D\x82\x01Rp\x1D\xDB\x99\\\x88\x1B\x9B\xDC\x88\x18\\\x1C\x1C\x9B\xDD\x99Y`z\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x0B\xC6\x84\x84\x84a\x16#V[PPPPV[```\x01\x80Ta\x05M\x90a'#V[_a\x0B\xE5\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x0C\x08Wa\x0C\x08a'[V[\x90_R` _ \x90`\x06\x02\x01`\x02\x01T\x90P\x91\x90PV[a\x0C*3\x83\x83a\x17XV[PPV[a\x0C83\x83a\x14DV[a\x0CTW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a(iV[a\x0B\xC6\x84\x84\x84\x84a\x18!V[``a\x0Ck\x82a\x0E\x1EV[_a\x0C\x80`@\x80Q` \x81\x01\x90\x91R_\x81R\x90V[`\x08T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x16a\x0C\xCAW_\x81Q\x11a\x0C\xAFW`@Q\x80` \x01`@R\x80_\x81RPa\x07\xE3V[\x80a\x0C\xB9\x84a\x0F\x07V[`@Q` \x01a\x07a\x92\x91\x90a(\xBBV[`\x08T`@QcD\xA5\xA6\x17`\xE1\x1B\x81R`\x04\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x89KL.\x90`$\x01a\x07\xA2V[_a\r\x05\x83a\x0E\x1EV[P_\x91\x82R`\x04` \x90\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x84R\x91\x90R\x90 T\x90V[``_a\rD`@\x80Q` \x81\x01\x90\x91R_\x81R\x90V[`\x08T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x16a\r\xA2W_\x81Q\x11a\rsW`@Q\x80` \x01`@R\x80_\x81RPa\x0E\x18V[\x80a\r}0a\x18\x94V[`@Q` \x01a\r\x8E\x92\x91\x90a(\xCFV[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x0E\x18V[`\x08_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16cr_\xA0\x9C`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xF1W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\x18\x91\x90\x81\x01\x90a'\xF4V[\x91PP\x90V[a\x0E'\x81a\x18\xAAV[a\x0EoW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x11T\x90\xCC\xCDL\x8DN\x88\x1A[\x9D\x98[\x1AY\x08\x1D\x1B\xDA\xD9[\x88\x12Q`:\x1B`D\x82\x01R`d\x01a\x06ZV[PV[_\x81\x81R`\x06` R`@\x90 T`\x05\x80T\x84\x92\x90\x81\x10a\x0E\x95Wa\x0E\x95a'[V[_\x91\x82R` \x90\x91 `\x06\x90\x91\x02\x01`\x04\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U\x81\x90\x83\x16a\x0E\xCE\x82a\t\xEFV[`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%`@Q`@Q\x80\x91\x03\x90\xA4PPV[``_a\x0F\x13\x83a\x18\xF1V[`\x01\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F2Wa\x0F2a%\xC1V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x0F\\W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x81\x81\x01` \x01[_\x19\x01o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x86\x06\x1A\x81S`\n\x85\x04\x94P\x84a\x0FfWP\x93\x92PPPV[_a\x0F\xA2\x83\x85a\x0C\xFBV[\x90Pa\x0F\xAE\x84\x84a\x14DV[\x15\x80\x15a\x0F\xBCWP_\x19\x81\x14\x15[\x15a\x0B\xC6W\x81\x81\x10\x15a\x10\x11W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC3525: insufficient allowance\0`D\x82\x01R`d\x01a\x06ZV[a\x0B\xC6\x83\x85a\x10 \x85\x85a)\nV[a\x16#V[_a\x059a\x19\xC8V[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x10\x8EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC3525: mint to the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x82_\x03a\x10\xE7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC3525: cannot mint zero tokenI`D\x82\x01R`\x19`\xFA\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x10\xF0\x83a\x18\xAAV[\x15a\x11=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC3525: token already minted\0\0\0`D\x82\x01R`d\x01a\x06ZV[a\x11H\x84\x84\x84a\x19\xE1V[a\x11R\x83\x82a\x1A\xA4V[a\x0B\xC6V[a\x11`\x83a\x18\xAAV[a\x11\xBCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FERC3525: transfer from invalid t`D\x82\x01Rf\x1B\xDA\xD9[\x88\x12Q`\xCA\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x11\xC5\x82a\x18\xAAV[a\x12\x1FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC3525: transfer to invalid tok`D\x82\x01Rd\x19[\x88\x12Q`\xDA\x1B`d\x82\x01R`\x84\x01a\x06ZV[_\x83\x81R`\x06` R`@\x81 T`\x05\x80T\x90\x91\x90\x81\x10a\x12BWa\x12Ba'[V[\x90_R` _ \x90`\x06\x02\x01\x90P_`\x05`\x06_\x86\x81R` \x01\x90\x81R` \x01_ T\x81T\x81\x10a\x12uWa\x12ua'[V[\x90_R` _ \x90`\x06\x02\x01\x90P\x82\x82`\x02\x01T\x10\x15a\x12\xEAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FERC3525: insufficient balance fo`D\x82\x01Ri9\x10:90\xB79\xB32\xB9`\xB1\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x80`\x01\x01T\x82`\x01\x01T\x14a\x13XW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FERC3525: transfer to token with `D\x82\x01Rm\x19\x1AY\x99\x99\\\x99[\x9D\x08\x1C\xDB\x1B\xDD`\x92\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x82\x82`\x02\x01_\x82\x82Ta\x13k\x91\x90a)\nV[\x92PP\x81\x90UP\x82\x81`\x02\x01_\x82\x82Ta\x13\x85\x91\x90a)\x1DV[\x90\x91UPP`@Q\x83\x81R\x84\x90\x86\x90\x7F\x0B*\xAC\x84\xF3\xEC\x95i\x11\xFDx\xEA\xE51\x10b\x97/\xF9I\xF3\x84\x12\xE8\xDA9\x06\x9D\x9F\x06\x8C\xC6\x90` \x01`@Q\x80\x91\x03\x90\xA3a\x13\xDB\x85\x85\x85`@Q\x80` \x01`@R\x80_\x81RPa\x1B$V[a\x14=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC3525: transfer rejected by ER`D\x82\x01Rl!\x99\x9A\x99\x1A\xA92\xB1\xB2\xB4\xBB2\xB9`\x99\x1B`d\x82\x01R`\x84\x01a\x06ZV[PPPPPV[__a\x14O\x83a\t\xEFV[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x14\x80a\x14\x99WP`\x01`\x01`\xA0\x1B\x03\x80\x82\x16_\x90\x81R`\x07` \x90\x81R`@\x80\x83 \x93\x88\x16\x83R`\x02\x90\x93\x01\x90R T`\xFF\x16[\x80a\x14\xBDWP\x83`\x01`\x01`\xA0\x1B\x03\x16a\x14\xB2\x84a\x05\xCEV[`\x01`\x01`\xA0\x1B\x03\x16\x14[\x94\x93PPPPV[\x82`\x01`\x01`\xA0\x1B\x03\x16a\x14\xD8\x82a\t\xEFV[`\x01`\x01`\xA0\x1B\x03\x16\x14a\x15:W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC3525: transfer from invalid o`D\x82\x01Rc;\xB72\xB9`\xE1\x1B`d\x82\x01R`\x84\x01a\x06ZV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x15\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC3525: transfer to the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x06ZV[_a\x15\xA8\x82a\x08QV[\x90P_a\x15\xB4\x83a\x0B\xDBV[\x90Pa\x15\xC0_\x84a\x0ErV[a\x15\xC9\x83a\x1C\x90V[a\x15\xD3\x85\x84a\x1D,V[a\x15\xDD\x84\x84a\x1E?V[\x82\x84`\x01`\x01`\xA0\x1B\x03\x16\x86`\x01`\x01`\xA0\x1B\x03\x16\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF`@Q`@Q\x80\x91\x03\x90\xA4a\x14=V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x16\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FERC3525: approve value to the ze`D\x82\x01Riro address`\xB0\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x16\x96\x82\x84a\x1E\xC6V[a\x16\xFAW_\x83\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x16\xBDWa\x16\xBDa'[V[_\x91\x82R` \x80\x83 `\x06\x92\x90\x92\x02\x90\x91\x01`\x05\x01\x80T`\x01\x81\x01\x82U\x90\x83R\x91 \x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90U[_\x83\x81R`\x04` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x86\x16\x80\x85R\x90\x83R\x92\x81\x90 \x84\x90UQ\x83\x81R\x85\x91\x7Fb\x1B\x05\r\xE0\xAD\x08\xB5\x1D\x19\xB4\x8B>m\xF7SH\xC4\xDEk\xDD\x93\xE8\x1B%,\xA6.(&[\x1B\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x03a\x17\xB9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FERC3525: approve to caller\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06ZV[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16_\x81\x81R`\x07` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R`\x02\x90\x95\x01\x82R\x91\x82\x90 \x80T`\xFF\x19\x16\x86\x15\x15\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x91\x01a\x17KV[a\x18,\x84\x84\x84a\x14\xC5V[a\x188\x84\x84\x84\x84a\x1F\x88V[a\x0B\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FERC3525: transfer to non ERC721R`D\x82\x01Rf2\xB1\xB2\xB4\xBB2\xB9`\xC9\x1B`d\x82\x01R`\x84\x01a\x06ZV[``a\x059`\x01`\x01`\xA0\x1B\x03\x83\x16`\x14a \xCAV[`\x05T_\x90\x15\x80\x15\x90a\x059WP_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x84\x92\x90\x81\x10a\x18\xDBWa\x18\xDBa'[V[\x90_R` _ \x90`\x06\x02\x01_\x01T\x14\x92\x91PPV[_\x80r\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x10a\x19/Wr\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x04\x92P`@\x01[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a\x19[Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x04\x92P` \x01[f#\x86\xF2o\xC1\0\0\x83\x10a\x19yWf#\x86\xF2o\xC1\0\0\x83\x04\x92P`\x10\x01[c\x05\xF5\xE1\0\x83\x10a\x19\x91Wc\x05\xF5\xE1\0\x83\x04\x92P`\x08\x01[a'\x10\x83\x10a\x19\xA5Wa'\x10\x83\x04\x92P`\x04\x01[`d\x83\x10a\x19\xB7W`d\x83\x04\x92P`\x02\x01[`\n\x83\x10a\x059W`\x01\x01\x92\x91PPV[`\x03\x80T_\x91\x82a\x19\xD8\x83a)0V[\x91\x90PU\x90P\x90V[`@\x80Q`\xC0\x81\x01\x82R\x83\x81R` \x80\x82\x01\x84\x90R_\x82\x84\x01\x81\x90R`\x01`\x01`\xA0\x1B\x03\x87\x16``\x84\x01R`\x80\x83\x01\x81\x90R\x83Q\x81\x81R\x91\x82\x01\x90\x93R`\xA0\x82\x01R\x90Pa\x1A.\x81a\"<V[a\x1A8\x84\x84a\x1E?V[`@Q\x83\x90`\x01`\x01`\xA0\x1B\x03\x86\x16\x90_\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90\x82\x90\xA4\x81_\x84\x7F\xE4\xF4\x8C$\r;\x99IH\xAAT\xF3\xE2\xF5\xFC\xA5\x92c\xDF\xE1\xD5+nL\xF3\x9A]$\x9B\\\xCBe`@Q`@Q\x80\x91\x03\x90\xA4PPPPV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x83\x92\x90\x81\x10a\x1A\xC7Wa\x1A\xC7a'[V[\x90_R` _ \x90`\x06\x02\x01`\x02\x01_\x82\x82Ta\x1A\xE4\x91\x90a)\x1DV[\x90\x91UPP`@Q\x81\x81R\x82\x90_\x90\x7F\x0B*\xAC\x84\xF3\xEC\x95i\x11\xFDx\xEA\xE51\x10b\x97/\xF9I\xF3\x84\x12\xE8\xDA9\x06\x9D\x9F\x06\x8C\xC6\x90` \x01`@Q\x80\x91\x03\x90\xA3PPV[__a\x1B/\x85a\t\xEFV[\x90P\x80;c\xFF\xFF\xFF\xFF\x16\x15a\x1C\x84W`@Qc\x01\xFF\xC9\xA7`\xE0\x1B\x81Rb\x9C\xE2\x0B`\xE0\x1B`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c\x01\xFF\xC9\xA7\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x1B\xA4WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x1B\xA1\x91\x81\x01\x90a)HV[`\x01[a\x1B\xE2W=\x80\x80\x15a\x1B\xD1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x1B\xD6V[``\x91P[P`\x01\x92PPPa\x14\xBDV[\x80\x15a\x1CyW`@Qb\x9C\xE2\x0B`\xE0\x1B\x81R_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90b\x9C\xE2\x0B\x90a\x1C\x1C\x903\x90\x8C\x90\x8C\x90\x8C\x90\x8C\x90`\x04\x01a)cV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x1C8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1C\\\x91\x90a)\xA0V[`\x01`\x01`\xE0\x1B\x03\x19\x16b\x9C\xE2\x0B`\xE0\x1B\x14\x93Pa\x14\xBD\x92PPPV[`\x01\x92PPPa\x14\xBDV[P`\x01\x95\x94PPPPPV[_\x81\x81R`\x06` R`@\x81 T`\x05\x80T\x90\x91\x90\x81\x10a\x1C\xB3Wa\x1C\xB3a'[V[_\x91\x82R` \x82 `\x05`\x06\x90\x92\x02\x01\x90\x81\x01T\x90\x92P\x90[\x81\x81\x10\x15a\x1D\x1EW_\x83`\x05\x01\x82\x81T\x81\x10a\x1C\xEAWa\x1C\xEAa'[V[_\x91\x82R` \x80\x83 \x90\x91\x01T\x87\x83R`\x04\x82R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x84R\x91R\x81 UP`\x01\x01a\x1C\xCCV[Pa\x06\xFB`\x05\x83\x01_a#\x8AV[_\x81\x81R`\x06` R`@\x81 T`\x05\x80T\x90\x91\x90\x81\x10a\x1DOWa\x1DOa'[V[_\x91\x82R` \x80\x83 `\x06\x92\x90\x92\x02\x90\x91\x01`\x03\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x90U\x91\x84\x16\x81R`\x07\x90\x91R`@\x81 \x80T\x90\x91\x90a\x1D\x9D\x90`\x01\x90a)\nV[\x90P_\x82_\x01\x82\x81T\x81\x10a\x1D\xB4Wa\x1D\xB4a'[V[\x90_R` _ \x01T\x90P_\x83`\x01\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x90P\x81\x84_\x01\x82\x81T\x81\x10a\x1D\xEBWa\x1D\xEBa'[V[_\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x83\x81R`\x01\x86\x01\x90\x91R`@\x80\x82 \x83\x90U\x86\x82R\x81 U\x83T\x84\x90\x80a\x1E$Wa\x1E$a)\xBBV[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90UPPPPPPV[_\x81\x81R`\x06` R`@\x90 T`\x05\x80T\x84\x92\x90\x81\x10a\x1EbWa\x1Eba'[V[_\x91\x82R` \x80\x83 `\x06\x92\x90\x92\x02\x90\x91\x01`\x03\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x90U\x93\x90\x91\x16\x81R`\x07\x80\x84R`@\x80\x83 \x80T\x85\x85R`\x01\x82\x81\x01\x88R\x92\x85 \x81\x90U\x92\x86R\x90\x82\x01\x81U\x82R\x92\x90 \x90\x91\x01UV[_\x81\x81R`\x06` R`@\x81 T`\x05\x80T\x83\x92\x90\x81\x10a\x1E\xE9Wa\x1E\xE9a'[V[_\x91\x82R` \x82 `\x05`\x06\x90\x92\x02\x01\x01T\x91P[\x81\x81\x10\x15a\x1F~W_\x84\x81R`\x06` R`@\x90 T`\x05\x80T`\x01`\x01`\xA0\x1B\x03\x88\x16\x92\x90\x81\x10a\x1F2Wa\x1F2a'[V[\x90_R` _ \x90`\x06\x02\x01`\x05\x01\x82\x81T\x81\x10a\x1FRWa\x1FRa'[V[_\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x03a\x1FvW`\x01\x92PPPa\x059V[`\x01\x01a\x1E\xFEV[P_\x94\x93PPPPV[_\x83;c\xFF\xFF\xFF\xFF\x16\x15a \xC2W`@Qc\n\x85\xBD\x01`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\x15\x0Bz\x02\x90a\x1F\xC8\x903\x90\x89\x90\x88\x90\x88\x90`\x04\x01a)\xCFV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a \x02WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x1F\xFF\x91\x81\x01\x90a)\xA0V[`\x01[a \xA8W=\x80\x80\x15a /W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a 4V[``\x91P[P\x80Q_\x03a \xA0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`2`$\x82\x01R\x7FERC721: transfer to non ERC721Re`D\x82\x01Rq1\xB2\xB4\xBB2\xB9\x104\xB6\xB862\xB6\xB2\xB7:2\xB9`q\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x80Q\x81` \x01\xFD[`\x01`\x01`\xE0\x1B\x03\x19\x16c\n\x85\xBD\x01`\xE1\x1B\x14\x90Pa\x14\xBDV[P`\x01a\x14\xBDV[``\x82_a \xD9\x84`\x02a*\x0BV[a \xE4\x90`\x02a)\x1DV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a \xFCWa \xFCa%\xC1V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a!&W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x03`\xFC\x1B\x81_\x81Q\x81\x10a!@Wa!@a'[V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x0F`\xFB\x1B\x81`\x01\x81Q\x81\x10a!nWa!na'[V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP_a!\x90\x85`\x02a*\x0BV[a!\x9B\x90`\x01a)\x1DV[\x90P[`\x01\x81\x11\x15a\"\x12Wo\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B\x83`\x0F\x16`\x10\x81\x10a!\xCFWa!\xCFa'[V[\x1A`\xF8\x1B\x82\x82\x81Q\x81\x10a!\xE5Wa!\xE5a'[V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x04\x92\x90\x92\x1C\x91a\"\x0B\x81a*\"V[\x90Pa!\x9EV[P\x81\x15a\x14\xBDW`@Qc\xE2.'\xEB`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x85\x90R`D\x01a\x06ZV[`\x05\x80T\x82Q_\x90\x81R`\x06` \x81\x81R`@\x80\x84 \x85\x90U`\x01\x85\x01\x86U\x94\x90\x92R\x84Q\x92\x02\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x81\x01\x92\x83U\x81\x85\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB1\x82\x01U\x92\x84\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB2\x84\x01U``\x84\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB3\x84\x01\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x80\x86\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB4\x86\x01\x80T\x91\x90\x93\x16\x91\x16\x17\x90U`\xA0\x84\x01Q\x80Q\x85\x94a\x0B\xC6\x93\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB5\x90\x91\x01\x92\x01\x90a#\xA5V[P\x80T_\x82U\x90_R` _ \x90\x81\x01\x90a\x0Eo\x91\x90a$\x08V[\x82\x80T\x82\x82U\x90_R` _ \x90\x81\x01\x92\x82\x15a#\xF8W\x91` \x02\x82\x01[\x82\x81\x11\x15a#\xF8W\x82Q\x82T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x82U` \x90\x92\x01\x91`\x01\x90\x91\x01\x90a#\xC3V[Pa$\x04\x92\x91Pa$\x08V[P\x90V[[\x80\x82\x11\x15a$\x04W_\x81U`\x01\x01a$\tV[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x0EoW__\xFD[_` \x82\x84\x03\x12\x15a$AW__\xFD[\x815a\x07\xE3\x81a$\x1CV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x07\xE3` \x83\x01\x84a$LV[_` \x82\x84\x03\x12\x15a$\x9CW__\xFD[P5\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x83W__\xFD[__`@\x83\x85\x03\x12\x15a$\xCAW__\xFD[a$\xD3\x83a$\xA3V[\x94` \x93\x90\x93\x015\x93PPPV[___``\x84\x86\x03\x12\x15a$\xF3W__\xFD[\x835\x92Pa%\x03` \x85\x01a$\xA3V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[___``\x84\x86\x03\x12\x15a%&W__\xFD[a%/\x84a$\xA3V[\x92Pa%\x03` \x85\x01a$\xA3V[___``\x84\x86\x03\x12\x15a%OW__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[_` \x82\x84\x03\x12\x15a%vW__\xFD[a\x07\xE3\x82a$\xA3V[\x80\x15\x15\x81\x14a\x0EoW__\xFD[__`@\x83\x85\x03\x12\x15a%\x9DW__\xFD[a%\xA6\x83a$\xA3V[\x91P` \x83\x015a%\xB6\x81a%\x7FV[\x80\x91PP\x92P\x92\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a%\xFEWa%\xFEa%\xC1V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a&\x1FWa&\x1Fa%\xC1V[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[____`\x80\x85\x87\x03\x12\x15a&@W__\xFD[a&I\x85a$\xA3V[\x93Pa&W` \x86\x01a$\xA3V[\x92P`@\x85\x015\x91P``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a&yW__\xFD[\x85\x01`\x1F\x81\x01\x87\x13a&\x89W__\xFD[\x805a&\x9Ca&\x97\x82a&\x06V[a%\xD5V[\x81\x81R\x88` \x83\x85\x01\x01\x11\x15a&\xB0W__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x93PPPP\x92\x95\x91\x94P\x92PV[__`@\x83\x85\x03\x12\x15a&\xE2W__\xFD[\x825\x91Pa&\xF2` \x84\x01a$\xA3V[\x90P\x92P\x92\x90PV[__`@\x83\x85\x03\x12\x15a'\x0CW__\xFD[a'\x15\x83a$\xA3V[\x91Pa&\xF2` \x84\x01a$\xA3V[`\x01\x81\x81\x1C\x90\x82\x16\x80a'7W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a'UWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[` \x80\x82R`\"\x90\x82\x01R\x7FERC3525: approval to current own`@\x82\x01Ra2\xB9`\xF1\x1B``\x82\x01R`\x80\x01\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a'\xD3\x82\x85a'\xB1V[dslot/`\xD8\x1B\x81Ra'\xEB`\x05\x82\x01\x85a'\xB1V[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a(\x04W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a(\x1AW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a(*W__\xFD[\x80Qa(8a&\x97\x82a&\x06V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a(LW__\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[` \x80\x82R`2\x90\x82\x01R\x7FERC3525: transfer caller is not `@\x82\x01Rq\x1B\xDD\xDB\x99\\\x88\x1B\x9B\xDC\x88\x18\\\x1C\x1C\x9B\xDD\x99Y`r\x1B``\x82\x01R`\x80\x01\x90V[_a\x14\xBDa(\xC9\x83\x86a'\xB1V[\x84a'\xB1V[_a(\xDA\x82\x85a'\xB1V[hcontract/`\xB8\x1B\x81Ra'\xEB`\t\x82\x01\x85a'\xB1V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x059Wa\x059a(\xF6V[\x80\x82\x01\x80\x82\x11\x15a\x059Wa\x059a(\xF6V[_`\x01\x82\x01a)AWa)Aa(\xF6V[P`\x01\x01\x90V[_` \x82\x84\x03\x12\x15a)XW__\xFD[\x81Qa\x07\xE3\x81a%\x7FV[`\x01\x80`\xA0\x1B\x03\x86\x16\x81R\x84` \x82\x01R\x83`@\x82\x01R\x82``\x82\x01R`\xA0`\x80\x82\x01R_a)\x95`\xA0\x83\x01\x84a$LV[\x97\x96PPPPPPPV[_` \x82\x84\x03\x12\x15a)\xB0W__\xFD[\x81Qa\x07\xE3\x81a$\x1CV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x82R\x84\x16` \x82\x01R`@\x81\x01\x83\x90R`\x80``\x82\x01\x81\x90R_\x90a*\x01\x90\x83\x01\x84a$LV[\x96\x95PPPPPPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x059Wa\x059a(\xF6V[_\x81a*0Wa*0a(\xF6V[P_\x19\x01\x90V\xFE\xA2dipfsX\"\x12 O\xE6\xF8u\xDF\"#~\xB2\"?\x88\n%\xF4uL9{w\x86i\r\x8D\x90\xE3\xE3b\x8E\xF1f-dsolcC\0\x08\x1C\x003",
    );
    /// The runtime bytecode of the contract, as deployed on the network.
    ///
    /// ```text
    ///0x60806040526004361061017b575f3560e01c80634f6ccce7116100cd5780639cc7f70811610087578063c87b56dd11610062578063c87b56dd14610400578063e345e0bc1461041f578063e8a3d4851461043e578063e985e9c514610452575f5ffd5b80639cc7f708146103af578063a22cb465146103ce578063b88d4fde146103ed575f5ffd5b80634f6ccce71461030c5780636352211e1461032b57806370a082311461034a578063840f7113146103695780638cb0a5111461038857806395d89b411461039b575f5ffd5b806318160ddd116101385780632f745c59116101135780632f745c59146102a6578063310ed7f0146102c55780633e7e8669146102d857806342842e0e146102f9575f5ffd5b806318160ddd1461026057806323b872dd14610274578063263f3e7e14610287575f5ffd5b806301ffc9a71461017f57806306fdde03146101b3578063081812fc146101d4578063095ea7b31461020b57806309c3dd87146102205780630f485c021461023f575b5f5ffd5b34801561018a575f5ffd5b5061019e610199366004612431565b61049d565b60405190151581526020015b60405180910390f35b3480156101be575f5ffd5b506101c761053f565b6040516101aa919061247a565b3480156101df575f5ffd5b506101f36101ee36600461248c565b6105ce565b6040516001600160a01b0390911681526020016101aa565b61021e6102193660046124b9565b61061d565b005b34801561022b575f5ffd5b506101c761023a36600461248c565b610700565b61025261024d3660046124e1565b6107ea565b6040519081526020016101aa565b34801561026b575f5ffd5b50600554610252565b61021e610282366004612514565b610820565b348015610292575f5ffd5b506102526102a136600461248c565b610851565b3480156102b1575f5ffd5b506102526102c03660046124b9565b610895565b61021e6102d336600461253d565b610932565b3480156102e3575f5ffd5b5060025460405160ff90911681526020016101aa565b61021e610307366004612514565b610948565b348015610317575f5ffd5b5061025261032636600461248c565b610962565b348015610336575f5ffd5b506101f361034536600461248c565b6109ef565b348015610355575f5ffd5b50610252610364366004612566565b610a88565b348015610374575f5ffd5b506008546101f3906001600160a01b031681565b61021e6103963660046124e1565b610b0e565b3480156103a6575f5ffd5b506101c7610bcc565b3480156103ba575f5ffd5b506102526103c936600461248c565b610bdb565b3480156103d9575f5ffd5b5061021e6103e836600461258c565b610c1f565b61021e6103fb36600461262d565b610c2e565b34801561040b575f5ffd5b506101c761041a36600461248c565b610c60565b34801561042a575f5ffd5b506102526104393660046126d1565b610cfb565b348015610449575f5ffd5b506101c7610d2d565b34801561045d575f5ffd5b5061019e61046c3660046126fb565b6001600160a01b039182165f9081526007602090815260408083209390941682526002909201909152205460ff1690565b5f6001600160e01b031982166301ffc9a760e01b14806104cd57506001600160e01b03198216630354d60560e61b145b806104e857506001600160e01b031982166380ac58cd60e01b145b8061050357506001600160e01b031982166370b0048160e11b145b8061051e57506001600160e01b0319821663780e9d6360e01b145b8061053957506001600160e01b03198216635b5e139f60e01b145b92915050565b60605f805461054d90612723565b80601f016020809104026020016040519081016040528092919081815260200182805461057990612723565b80156105c45780601f1061059b576101008083540402835291602001916105c4565b820191905f5260205f20905b8154815290600101906020018083116105a757829003601f168201915b5050505050905090565b5f6105d882610e1e565b5f828152600660205260409020546005805490919081106105fb576105fb61275b565b5f9182526020909120600460069092020101546001600160a01b031692915050565b5f610627826109ef565b9050806001600160a01b0316836001600160a01b0316036106635760405162461bcd60e51b815260040161065a9061276f565b60405180910390fd5b336001600160a01b038216148061067f575061067f813361046c565b6106f15760405162461bcd60e51b815260206004820152603960248201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c00000000000000606482015260840161065a565b6106fb8383610e72565b505050565b60605f61071760408051602081019091525f815290565b6008549091506001600160a01b0316610775575f8151116107465760405180602001604052805f8152506107e3565b8061075084610f07565b6040516020016107619291906127c8565b6040516020818303038152906040526107e3565b600854604051633601bfc560e11b8152600481018590526001600160a01b0390911690636c037f8a906024015b5f60405180830381865afa1580156107bc573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526107e391908101906127f4565b9392505050565b5f6107f6338584610f97565b6107ff84611025565b9050610815838261080f87610851565b5f61102e565b6107e3848284611157565b61082a3382611444565b6108465760405162461bcd60e51b815260040161065a90612869565b6106fb8383836114c5565b5f61085b82610e1e565b5f8281526006602052604090205460058054909190811061087e5761087e61275b565b905f5260205f209060060201600101549050919050565b5f61089f83610a88565b82106108f85760405162461bcd60e51b815260206004820152602260248201527f455243333532353a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b606482015260840161065a565b6001600160a01b0383165f9081526007602052604090208054839081106109215761092161275b565b905f5260205f200154905092915050565b61093d338483610f97565b6106fb838383611157565b6106fb83838360405180602001604052805f815250610c2e565b5f61096c60055490565b82106109c65760405162461bcd60e51b815260206004820152602360248201527f455243333532353a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b606482015260840161065a565b600582815481106109d9576109d961275b565b905f5260205f2090600602015f01549050919050565b5f6109f982610e1e565b5f82815260066020526040902054600580549091908110610a1c57610a1c61275b565b5f9182526020909120600360069092020101546001600160a01b0316905080610a835760405162461bcd60e51b8152602060048201526019602482015278115490cccd4c8d4e881a5b9d985b1a59081d1bdad95b881251603a1b604482015260640161065a565b919050565b5f6001600160a01b038216610af35760405162461bcd60e51b815260206004820152602b60248201527f455243333532353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b606482015260840161065a565b506001600160a01b03165f9081526007602052604090205490565b5f610b18846109ef565b9050806001600160a01b0316836001600160a01b031603610b4b5760405162461bcd60e51b815260040161065a9061276f565b610b553385611444565b610bbb5760405162461bcd60e51b815260206004820152603160248201527f455243333532353a20617070726f76652063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606482015260840161065a565b610bc6848484611623565b50505050565b60606001805461054d90612723565b5f610be582610e1e565b5f82815260066020526040902054600580549091908110610c0857610c0861275b565b905f5260205f209060060201600201549050919050565b610c2a338383611758565b5050565b610c383383611444565b610c545760405162461bcd60e51b815260040161065a90612869565b610bc684848484611821565b6060610c6b82610e1e565b5f610c8060408051602081019091525f815290565b6008549091506001600160a01b0316610cca575f815111610caf5760405180602001604052805f8152506107e3565b80610cb984610f07565b6040516020016107619291906128bb565b6008546040516344a5a61760e11b8152600481018590526001600160a01b039091169063894b4c2e906024016107a2565b5f610d0583610e1e565b505f9182526004602090815260408084206001600160a01b0393909316845291905290205490565b60605f610d4460408051602081019091525f815290565b6008549091506001600160a01b0316610da2575f815111610d735760405180602001604052805f815250610e18565b80610d7d30611894565b604051602001610d8e9291906128cf565b604051602081830303815290604052610e18565b60085f9054906101000a90046001600160a01b03166001600160a01b031663725fa09c6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610df1573d5f5f3e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610e1891908101906127f4565b91505090565b610e27816118aa565b610e6f5760405162461bcd60e51b8152602060048201526019602482015278115490cccd4c8d4e881a5b9d985b1a59081d1bdad95b881251603a1b604482015260640161065a565b50565b5f81815260066020526040902054600580548492908110610e9557610e9561275b565b5f918252602090912060069091020160040180546001600160a01b0319166001600160a01b0392831617905581908316610ece826109ef565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60605f610f13836118f1565b60010190505f8167ffffffffffffffff811115610f3257610f326125c1565b6040519080825280601f01601f191660200182016040528015610f5c576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610f6657509392505050565b5f610fa28385610cfb565b9050610fae8484611444565b158015610fbc57505f198114155b15610bc657818110156110115760405162461bcd60e51b815260206004820152601f60248201527f455243333532353a20696e73756666696369656e7420616c6c6f77616e636500604482015260640161065a565b610bc68385611020858561290a565b611623565b5f6105396119c8565b6001600160a01b03841661108e5760405162461bcd60e51b815260206004820152602160248201527f455243333532353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b606482015260840161065a565b825f036110e75760405162461bcd60e51b815260206004820152602160248201527f455243333532353a2063616e6e6f74206d696e74207a65726f20746f6b656e496044820152601960fa1b606482015260840161065a565b6110f0836118aa565b1561113d5760405162461bcd60e51b815260206004820152601d60248201527f455243333532353a20746f6b656e20616c7265616479206d696e746564000000604482015260640161065a565b6111488484846119e1565b6111528382611aa4565b610bc6565b611160836118aa565b6111bc5760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e736665722066726f6d20696e76616c696420746044820152661bdad95b88125160ca1b606482015260840161065a565b6111c5826118aa565b61121f5760405162461bcd60e51b815260206004820152602560248201527f455243333532353a207472616e7366657220746f20696e76616c696420746f6b604482015264195b88125160da1b606482015260840161065a565b5f838152600660205260408120546005805490919081106112425761124261275b565b905f5260205f20906006020190505f600560065f8681526020019081526020015f2054815481106112755761127561275b565b905f5260205f209060060201905082826002015410156112ea5760405162461bcd60e51b815260206004820152602a60248201527f455243333532353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b606482015260840161065a565b80600101548260010154146113585760405162461bcd60e51b815260206004820152602e60248201527f455243333532353a207472616e7366657220746f20746f6b656e20776974682060448201526d191a5999995c995b9d081cdb1bdd60921b606482015260840161065a565b82826002015f82825461136b919061290a565b9250508190555082816002015f828254611385919061291d565b9091555050604051838152849086907f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc69060200160405180910390a36113db85858560405180602001604052805f815250611b24565b61143d5760405162461bcd60e51b815260206004820152602d60248201527f455243333532353a207472616e736665722072656a656374656420627920455260448201526c21999a991aa932b1b2b4bb32b960991b606482015260840161065a565b5050505050565b5f5f61144f836109ef565b9050806001600160a01b0316846001600160a01b0316148061149957506001600160a01b038082165f908152600760209081526040808320938816835260029093019052205460ff165b806114bd5750836001600160a01b03166114b2846105ce565b6001600160a01b0316145b949350505050565b826001600160a01b03166114d8826109ef565b6001600160a01b03161461153a5760405162461bcd60e51b8152602060048201526024808201527f455243333532353a207472616e736665722066726f6d20696e76616c6964206f6044820152633bb732b960e11b606482015260840161065a565b6001600160a01b03821661159e5760405162461bcd60e51b815260206004820152602560248201527f455243333532353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b606482015260840161065a565b5f6115a882610851565b90505f6115b483610bdb565b90506115c05f84610e72565b6115c983611c90565b6115d38584611d2c565b6115dd8484611e3f565b82846001600160a01b0316866001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461143d565b6001600160a01b03821661168c5760405162461bcd60e51b815260206004820152602a60248201527f455243333532353a20617070726f76652076616c756520746f20746865207a65604482015269726f206164647265737360b01b606482015260840161065a565b6116968284611ec6565b6116fa575f838152600660205260409020546005805490919081106116bd576116bd61275b565b5f9182526020808320600692909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b5f8381526004602090815260408083206001600160a01b038616808552908352928190208490555183815285917f621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b91015b60405180910390a3505050565b816001600160a01b0316836001600160a01b0316036117b95760405162461bcd60e51b815260206004820152601a60248201527f455243333532353a20617070726f766520746f2063616c6c6572000000000000604482015260640161065a565b6001600160a01b038381165f8181526007602090815260408083209487168084526002909501825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910161174b565b61182c8484846114c5565b61183884848484611f88565b610bc65760405162461bcd60e51b815260206004820152602760248201527f455243333532353a207472616e7366657220746f206e6f6e204552433732315260448201526632b1b2b4bb32b960c91b606482015260840161065a565b60606105396001600160a01b03831660146120ca565b6005545f901580159061053957505f828152600660205260409020546005805484929081106118db576118db61275b565b905f5260205f2090600602015f01541492915050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b831061192f5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef8100000000831061195b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061197957662386f26fc10000830492506010015b6305f5e1008310611991576305f5e100830492506008015b61271083106119a557612710830492506004015b606483106119b7576064830492506002015b600a83106105395760010192915050565b600380545f91826119d883612930565b91905055905090565b6040805160c08101825283815260208082018490525f8284018190526001600160a01b038716606084015260808301819052835181815291820190935260a08201529050611a2e8161223c565b611a388484611e3f565b60405183906001600160a01b038616905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4815f847fe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb6560405160405180910390a450505050565b5f82815260066020526040902054600580548392908110611ac757611ac761275b565b905f5260205f2090600602016002015f828254611ae4919061291d565b909155505060405181815282905f907f0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc69060200160405180910390a35050565b5f5f611b2f856109ef565b9050803b63ffffffff1615611c84576040516301ffc9a760e01b8152629ce20b60e01b60048201526001600160a01b038216906301ffc9a790602401602060405180830381865afa925050508015611ba4575060408051601f3d908101601f19168201909252611ba191810190612948565b60015b611be2573d808015611bd1576040519150601f19603f3d011682016040523d82523d5f602084013e611bd6565b606091505b506001925050506114bd565b8015611c7957604051629ce20b60e01b81525f906001600160a01b03841690629ce20b90611c1c9033908c908c908c908c90600401612963565b6020604051808303815f875af1158015611c38573d5f5f3e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c5c91906129a0565b6001600160e01b031916629ce20b60e01b1493506114bd92505050565b6001925050506114bd565b50600195945050505050565b5f81815260066020526040812054600580549091908110611cb357611cb361275b565b5f91825260208220600560069092020190810154909250905b81811015611d1e575f836005018281548110611cea57611cea61275b565b5f9182526020808320909101548783526004825260408084206001600160a01b039092168452915281205550600101611ccc565b506106fb600583015f61238a565b5f81815260066020526040812054600580549091908110611d4f57611d4f61275b565b5f918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b0394851617905591841681526007909152604081208054909190611d9d9060019061290a565b90505f825f018281548110611db457611db461275b565b905f5260205f20015490505f836001015f8681526020019081526020015f2054905081845f018281548110611deb57611deb61275b565b5f9182526020808320909101929092558381526001860190915260408082208390558682528120558354849080611e2457611e246129bb565b600190038181905f5260205f20015f90559055505050505050565b5f81815260066020526040902054600580548492908110611e6257611e6261275b565b5f918252602080832060069290920290910160030180546001600160a01b0319166001600160a01b03948516179055939091168152600780845260408083208054858552600182810188529285208190559286529082018155825292902090910155565b5f81815260066020526040812054600580548392908110611ee957611ee961275b565b5f918252602082206005600690920201015491505b81811015611f7e575f84815260066020526040902054600580546001600160a01b03881692908110611f3257611f3261275b565b905f5260205f2090600602016005018281548110611f5257611f5261275b565b5f918252602090912001546001600160a01b031603611f7657600192505050610539565b600101611efe565b505f949350505050565b5f833b63ffffffff16156120c257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611fc89033908990889088906004016129cf565b6020604051808303815f875af1925050508015612002575060408051601f3d908101601f19168201909252611fff918101906129a0565b60015b6120a8573d80801561202f576040519150601f19603f3d011682016040523d82523d5f602084013e612034565b606091505b5080515f036120a05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840161065a565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506114bd565b5060016114bd565b6060825f6120d9846002612a0b565b6120e490600261291d565b67ffffffffffffffff8111156120fc576120fc6125c1565b6040519080825280601f01601f191660200182016040528015612126576020820181803683370190505b509050600360fc1b815f815181106121405761214061275b565b60200101906001600160f81b03191690815f1a905350600f60fb1b8160018151811061216e5761216e61275b565b60200101906001600160f81b03191690815f1a9053505f612190856002612a0b565b61219b90600161291d565b90505b6001811115612212576f181899199a1a9b1b9c1cb0b131b232b360811b83600f16601081106121cf576121cf61275b565b1a60f81b8282815181106121e5576121e561275b565b60200101906001600160f81b03191690815f1a90535060049290921c9161220b81612a22565b905061219e565b5081156114bd5760405163e22e27eb60e01b8152600481018690526024810185905260440161065a565b6005805482515f90815260066020818152604080842085905560018501865594909252845192027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101928355818501517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1820155928401517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db284015560608401517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db3840180546001600160a01b039283166001600160a01b03199182161790915560808601517f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db48601805491909316911617905560a084015180518594610bc6937f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db59091019201906123a5565b5080545f8255905f5260205f2090810190610e6f9190612408565b828054828255905f5260205f209081019282156123f8579160200282015b828111156123f857825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906123c3565b50612404929150612408565b5090565b5b80821115612404575f8155600101612409565b6001600160e01b031981168114610e6f575f5ffd5b5f60208284031215612441575f5ffd5b81356107e38161241c565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6107e3602083018461244c565b5f6020828403121561249c575f5ffd5b5035919050565b80356001600160a01b0381168114610a83575f5ffd5b5f5f604083850312156124ca575f5ffd5b6124d3836124a3565b946020939093013593505050565b5f5f5f606084860312156124f3575f5ffd5b83359250612503602085016124a3565b929592945050506040919091013590565b5f5f5f60608486031215612526575f5ffd5b61252f846124a3565b9250612503602085016124a3565b5f5f5f6060848603121561254f575f5ffd5b505081359360208301359350604090920135919050565b5f60208284031215612576575f5ffd5b6107e3826124a3565b8015158114610e6f575f5ffd5b5f5f6040838503121561259d575f5ffd5b6125a6836124a3565b915060208301356125b68161257f565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156125fe576125fe6125c1565b604052919050565b5f67ffffffffffffffff82111561261f5761261f6125c1565b50601f01601f191660200190565b5f5f5f5f60808587031215612640575f5ffd5b612649856124a3565b9350612657602086016124a3565b925060408501359150606085013567ffffffffffffffff811115612679575f5ffd5b8501601f81018713612689575f5ffd5b803561269c61269782612606565b6125d5565b8181528860208385010111156126b0575f5ffd5b816020840160208301375f6020838301015280935050505092959194509250565b5f5f604083850312156126e2575f5ffd5b823591506126f2602084016124a3565b90509250929050565b5f5f6040838503121561270c575f5ffd5b612715836124a3565b91506126f2602084016124a3565b600181811c9082168061273757607f821691505b60208210810361275557634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b60208082526022908201527f455243333532353a20617070726f76616c20746f2063757272656e74206f776e60408201526132b960f11b606082015260800190565b5f81518060208401855e5f93019283525090919050565b5f6127d382856127b1565b64736c6f742f60d81b81526127eb60058201856127b1565b95945050505050565b5f60208284031215612804575f5ffd5b815167ffffffffffffffff81111561281a575f5ffd5b8201601f8101841361282a575f5ffd5b805161283861269782612606565b81815285602083850101111561284c575f5ffd5b8160208401602083015e5f91810160200191909152949350505050565b60208082526032908201527f455243333532353a207472616e736665722063616c6c6572206973206e6f74206040820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b606082015260800190565b5f6114bd6128c983866127b1565b846127b1565b5f6128da82856127b1565b68636f6e74726163742f60b81b81526127eb60098201856127b1565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610539576105396128f6565b80820180821115610539576105396128f6565b5f60018201612941576129416128f6565b5060010190565b5f60208284031215612958575f5ffd5b81516107e38161257f565b60018060a01b038616815284602082015283604082015282606082015260a060808201525f61299560a083018461244c565b979650505050505050565b5f602082840312156129b0575f5ffd5b81516107e38161241c565b634e487b7160e01b5f52603160045260245ffd5b6001600160a01b03858116825284166020820152604081018390526080606082018190525f90612a019083018461244c565b9695505050505050565b8082028115828204841417610539576105396128f6565b5f81612a3057612a306128f6565b505f19019056fea26469706673582212204fe6f875df22237eb2223f880a25f4754c397b7786690d8d90e3e3628ef1662d64736f6c634300081c0033
    /// ```
    #[rustfmt::skip]
    #[allow(clippy::all)]
    pub static DEPLOYED_BYTECODE: alloy_sol_types::private::Bytes = alloy_sol_types::private::Bytes::from_static(
        b"`\x80`@R`\x046\x10a\x01{W_5`\xE0\x1C\x80cOl\xCC\xE7\x11a\0\xCDW\x80c\x9C\xC7\xF7\x08\x11a\0\x87W\x80c\xC8{V\xDD\x11a\0bW\x80c\xC8{V\xDD\x14a\x04\0W\x80c\xE3E\xE0\xBC\x14a\x04\x1FW\x80c\xE8\xA3\xD4\x85\x14a\x04>W\x80c\xE9\x85\xE9\xC5\x14a\x04RW__\xFD[\x80c\x9C\xC7\xF7\x08\x14a\x03\xAFW\x80c\xA2,\xB4e\x14a\x03\xCEW\x80c\xB8\x8DO\xDE\x14a\x03\xEDW__\xFD[\x80cOl\xCC\xE7\x14a\x03\x0CW\x80ccR!\x1E\x14a\x03+W\x80cp\xA0\x821\x14a\x03JW\x80c\x84\x0Fq\x13\x14a\x03iW\x80c\x8C\xB0\xA5\x11\x14a\x03\x88W\x80c\x95\xD8\x9BA\x14a\x03\x9BW__\xFD[\x80c\x18\x16\r\xDD\x11a\x018W\x80c/t\\Y\x11a\x01\x13W\x80c/t\\Y\x14a\x02\xA6W\x80c1\x0E\xD7\xF0\x14a\x02\xC5W\x80c>~\x86i\x14a\x02\xD8W\x80cB\x84.\x0E\x14a\x02\xF9W__\xFD[\x80c\x18\x16\r\xDD\x14a\x02`W\x80c#\xB8r\xDD\x14a\x02tW\x80c&?>~\x14a\x02\x87W__\xFD[\x80c\x01\xFF\xC9\xA7\x14a\x01\x7FW\x80c\x06\xFD\xDE\x03\x14a\x01\xB3W\x80c\x08\x18\x12\xFC\x14a\x01\xD4W\x80c\t^\xA7\xB3\x14a\x02\x0BW\x80c\t\xC3\xDD\x87\x14a\x02 W\x80c\x0FH\\\x02\x14a\x02?W[__\xFD[4\x80\x15a\x01\x8AW__\xFD[Pa\x01\x9Ea\x01\x996`\x04a$1V[a\x04\x9DV[`@Q\x90\x15\x15\x81R` \x01[`@Q\x80\x91\x03\x90\xF3[4\x80\x15a\x01\xBEW__\xFD[Pa\x01\xC7a\x05?V[`@Qa\x01\xAA\x91\x90a$zV[4\x80\x15a\x01\xDFW__\xFD[Pa\x01\xF3a\x01\xEE6`\x04a$\x8CV[a\x05\xCEV[`@Q`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x81R` \x01a\x01\xAAV[a\x02\x1Ea\x02\x196`\x04a$\xB9V[a\x06\x1DV[\0[4\x80\x15a\x02+W__\xFD[Pa\x01\xC7a\x02:6`\x04a$\x8CV[a\x07\0V[a\x02Ra\x02M6`\x04a$\xE1V[a\x07\xEAV[`@Q\x90\x81R` \x01a\x01\xAAV[4\x80\x15a\x02kW__\xFD[P`\x05Ta\x02RV[a\x02\x1Ea\x02\x826`\x04a%\x14V[a\x08 V[4\x80\x15a\x02\x92W__\xFD[Pa\x02Ra\x02\xA16`\x04a$\x8CV[a\x08QV[4\x80\x15a\x02\xB1W__\xFD[Pa\x02Ra\x02\xC06`\x04a$\xB9V[a\x08\x95V[a\x02\x1Ea\x02\xD36`\x04a%=V[a\t2V[4\x80\x15a\x02\xE3W__\xFD[P`\x02T`@Q`\xFF\x90\x91\x16\x81R` \x01a\x01\xAAV[a\x02\x1Ea\x03\x076`\x04a%\x14V[a\tHV[4\x80\x15a\x03\x17W__\xFD[Pa\x02Ra\x03&6`\x04a$\x8CV[a\tbV[4\x80\x15a\x036W__\xFD[Pa\x01\xF3a\x03E6`\x04a$\x8CV[a\t\xEFV[4\x80\x15a\x03UW__\xFD[Pa\x02Ra\x03d6`\x04a%fV[a\n\x88V[4\x80\x15a\x03tW__\xFD[P`\x08Ta\x01\xF3\x90`\x01`\x01`\xA0\x1B\x03\x16\x81V[a\x02\x1Ea\x03\x966`\x04a$\xE1V[a\x0B\x0EV[4\x80\x15a\x03\xA6W__\xFD[Pa\x01\xC7a\x0B\xCCV[4\x80\x15a\x03\xBAW__\xFD[Pa\x02Ra\x03\xC96`\x04a$\x8CV[a\x0B\xDBV[4\x80\x15a\x03\xD9W__\xFD[Pa\x02\x1Ea\x03\xE86`\x04a%\x8CV[a\x0C\x1FV[a\x02\x1Ea\x03\xFB6`\x04a&-V[a\x0C.V[4\x80\x15a\x04\x0BW__\xFD[Pa\x01\xC7a\x04\x1A6`\x04a$\x8CV[a\x0C`V[4\x80\x15a\x04*W__\xFD[Pa\x02Ra\x0496`\x04a&\xD1V[a\x0C\xFBV[4\x80\x15a\x04IW__\xFD[Pa\x01\xC7a\r-V[4\x80\x15a\x04]W__\xFD[Pa\x01\x9Ea\x04l6`\x04a&\xFBV[`\x01`\x01`\xA0\x1B\x03\x91\x82\x16_\x90\x81R`\x07` \x90\x81R`@\x80\x83 \x93\x90\x94\x16\x82R`\x02\x90\x92\x01\x90\x91R T`\xFF\x16\x90V[_`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x01\xFF\xC9\xA7`\xE0\x1B\x14\x80a\x04\xCDWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x03T\xD6\x05`\xE6\x1B\x14[\x80a\x04\xE8WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c\x80\xACX\xCD`\xE0\x1B\x14[\x80a\x05\x03WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cp\xB0\x04\x81`\xE1\x1B\x14[\x80a\x05\x1EWP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16cx\x0E\x9Dc`\xE0\x1B\x14[\x80a\x059WP`\x01`\x01`\xE0\x1B\x03\x19\x82\x16c[^\x13\x9F`\xE0\x1B\x14[\x92\x91PPV[``_\x80Ta\x05M\x90a'#V[\x80`\x1F\x01` \x80\x91\x04\x02` \x01`@Q\x90\x81\x01`@R\x80\x92\x91\x90\x81\x81R` \x01\x82\x80Ta\x05y\x90a'#V[\x80\x15a\x05\xC4W\x80`\x1F\x10a\x05\x9BWa\x01\0\x80\x83T\x04\x02\x83R\x91` \x01\x91a\x05\xC4V[\x82\x01\x91\x90_R` _ \x90[\x81T\x81R\x90`\x01\x01\x90` \x01\x80\x83\x11a\x05\xA7W\x82\x90\x03`\x1F\x16\x82\x01\x91[PPPPP\x90P\x90V[_a\x05\xD8\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x05\xFBWa\x05\xFBa'[V[_\x91\x82R` \x90\x91 `\x04`\x06\x90\x92\x02\x01\x01T`\x01`\x01`\xA0\x1B\x03\x16\x92\x91PPV[_a\x06'\x82a\t\xEFV[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x03a\x06cW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a'oV[`@Q\x80\x91\x03\x90\xFD[3`\x01`\x01`\xA0\x1B\x03\x82\x16\x14\x80a\x06\x7FWPa\x06\x7F\x813a\x04lV[a\x06\xF1W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`9`$\x82\x01R\x7FERC3525: approve caller is not o`D\x82\x01R\x7Fwner nor approved for all\0\0\0\0\0\0\0`d\x82\x01R`\x84\x01a\x06ZV[a\x06\xFB\x83\x83a\x0ErV[PPPV[``_a\x07\x17`@\x80Q` \x81\x01\x90\x91R_\x81R\x90V[`\x08T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x16a\x07uW_\x81Q\x11a\x07FW`@Q\x80` \x01`@R\x80_\x81RPa\x07\xE3V[\x80a\x07P\x84a\x0F\x07V[`@Q` \x01a\x07a\x92\x91\x90a'\xC8V[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x07\xE3V[`\x08T`@Qc6\x01\xBF\xC5`\xE1\x1B\x81R`\x04\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90cl\x03\x7F\x8A\x90`$\x01[_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\x07\xBCW=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x07\xE3\x91\x90\x81\x01\x90a'\xF4V[\x93\x92PPPV[_a\x07\xF63\x85\x84a\x0F\x97V[a\x07\xFF\x84a\x10%V[\x90Pa\x08\x15\x83\x82a\x08\x0F\x87a\x08QV[_a\x10.V[a\x07\xE3\x84\x82\x84a\x11WV[a\x08*3\x82a\x14DV[a\x08FW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a(iV[a\x06\xFB\x83\x83\x83a\x14\xC5V[_a\x08[\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x08~Wa\x08~a'[V[\x90_R` _ \x90`\x06\x02\x01`\x01\x01T\x90P\x91\x90PV[_a\x08\x9F\x83a\n\x88V[\x82\x10a\x08\xF8W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\"`$\x82\x01R\x7FERC3525: owner index out of boun`D\x82\x01Rads`\xF0\x1B`d\x82\x01R`\x84\x01a\x06ZV[`\x01`\x01`\xA0\x1B\x03\x83\x16_\x90\x81R`\x07` R`@\x90 \x80T\x83\x90\x81\x10a\t!Wa\t!a'[V[\x90_R` _ \x01T\x90P\x92\x91PPV[a\t=3\x84\x83a\x0F\x97V[a\x06\xFB\x83\x83\x83a\x11WV[a\x06\xFB\x83\x83\x83`@Q\x80` \x01`@R\x80_\x81RPa\x0C.V[_a\tl`\x05T\x90V[\x82\x10a\t\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`#`$\x82\x01R\x7FERC3525: global index out of bou`D\x82\x01Rbnds`\xE8\x1B`d\x82\x01R`\x84\x01a\x06ZV[`\x05\x82\x81T\x81\x10a\t\xD9Wa\t\xD9a'[V[\x90_R` _ \x90`\x06\x02\x01_\x01T\x90P\x91\x90PV[_a\t\xF9\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\n\x1CWa\n\x1Ca'[V[_\x91\x82R` \x90\x91 `\x03`\x06\x90\x92\x02\x01\x01T`\x01`\x01`\xA0\x1B\x03\x16\x90P\x80a\n\x83W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x11T\x90\xCC\xCDL\x8DN\x88\x1A[\x9D\x98[\x1AY\x08\x1D\x1B\xDA\xD9[\x88\x12Q`:\x1B`D\x82\x01R`d\x01a\x06ZV[\x91\x90PV[_`\x01`\x01`\xA0\x1B\x03\x82\x16a\n\xF3W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`+`$\x82\x01R\x7FERC3525: balance query for the z`D\x82\x01Rjero address`\xA8\x1B`d\x82\x01R`\x84\x01a\x06ZV[P`\x01`\x01`\xA0\x1B\x03\x16_\x90\x81R`\x07` R`@\x90 T\x90V[_a\x0B\x18\x84a\t\xEFV[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x03a\x0BKW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a'oV[a\x0BU3\x85a\x14DV[a\x0B\xBBW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`1`$\x82\x01R\x7FERC3525: approve caller is not o`D\x82\x01Rp\x1D\xDB\x99\\\x88\x1B\x9B\xDC\x88\x18\\\x1C\x1C\x9B\xDD\x99Y`z\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x0B\xC6\x84\x84\x84a\x16#V[PPPPV[```\x01\x80Ta\x05M\x90a'#V[_a\x0B\xE5\x82a\x0E\x1EV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x0C\x08Wa\x0C\x08a'[V[\x90_R` _ \x90`\x06\x02\x01`\x02\x01T\x90P\x91\x90PV[a\x0C*3\x83\x83a\x17XV[PPV[a\x0C83\x83a\x14DV[a\x0CTW`@QbF\x1B\xCD`\xE5\x1B\x81R`\x04\x01a\x06Z\x90a(iV[a\x0B\xC6\x84\x84\x84\x84a\x18!V[``a\x0Ck\x82a\x0E\x1EV[_a\x0C\x80`@\x80Q` \x81\x01\x90\x91R_\x81R\x90V[`\x08T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x16a\x0C\xCAW_\x81Q\x11a\x0C\xAFW`@Q\x80` \x01`@R\x80_\x81RPa\x07\xE3V[\x80a\x0C\xB9\x84a\x0F\x07V[`@Q` \x01a\x07a\x92\x91\x90a(\xBBV[`\x08T`@QcD\xA5\xA6\x17`\xE1\x1B\x81R`\x04\x81\x01\x85\x90R`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x90c\x89KL.\x90`$\x01a\x07\xA2V[_a\r\x05\x83a\x0E\x1EV[P_\x91\x82R`\x04` \x90\x81R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x93\x90\x93\x16\x84R\x91\x90R\x90 T\x90V[``_a\rD`@\x80Q` \x81\x01\x90\x91R_\x81R\x90V[`\x08T\x90\x91P`\x01`\x01`\xA0\x1B\x03\x16a\r\xA2W_\x81Q\x11a\rsW`@Q\x80` \x01`@R\x80_\x81RPa\x0E\x18V[\x80a\r}0a\x18\x94V[`@Q` \x01a\r\x8E\x92\x91\x90a(\xCFV[`@Q` \x81\x83\x03\x03\x81R\x90`@Ra\x0E\x18V[`\x08_\x90T\x90a\x01\0\n\x90\x04`\x01`\x01`\xA0\x1B\x03\x16`\x01`\x01`\xA0\x1B\x03\x16cr_\xA0\x9C`@Q\x81c\xFF\xFF\xFF\xFF\x16`\xE0\x1B\x81R`\x04\x01_`@Q\x80\x83\x03\x81\x86Z\xFA\x15\x80\x15a\r\xF1W=__>=_\xFD[PPPP`@Q=_\x82>`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01`@Ra\x0E\x18\x91\x90\x81\x01\x90a'\xF4V[\x91PP\x90V[a\x0E'\x81a\x18\xAAV[a\x0EoW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x19`$\x82\x01Rx\x11T\x90\xCC\xCDL\x8DN\x88\x1A[\x9D\x98[\x1AY\x08\x1D\x1B\xDA\xD9[\x88\x12Q`:\x1B`D\x82\x01R`d\x01a\x06ZV[PV[_\x81\x81R`\x06` R`@\x90 T`\x05\x80T\x84\x92\x90\x81\x10a\x0E\x95Wa\x0E\x95a'[V[_\x91\x82R` \x90\x91 `\x06\x90\x91\x02\x01`\x04\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x92\x83\x16\x17\x90U\x81\x90\x83\x16a\x0E\xCE\x82a\t\xEFV[`\x01`\x01`\xA0\x1B\x03\x16\x7F\x8C[\xE1\xE5\xEB\xEC}[\xD1OqB}\x1E\x84\xF3\xDD\x03\x14\xC0\xF7\xB2)\x1E[ \n\xC8\xC7\xC3\xB9%`@Q`@Q\x80\x91\x03\x90\xA4PPV[``_a\x0F\x13\x83a\x18\xF1V[`\x01\x01\x90P_\x81g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a\x0F2Wa\x0F2a%\xC1V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a\x0F\\W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P\x81\x81\x01` \x01[_\x19\x01o\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B`\n\x86\x06\x1A\x81S`\n\x85\x04\x94P\x84a\x0FfWP\x93\x92PPPV[_a\x0F\xA2\x83\x85a\x0C\xFBV[\x90Pa\x0F\xAE\x84\x84a\x14DV[\x15\x80\x15a\x0F\xBCWP_\x19\x81\x14\x15[\x15a\x0B\xC6W\x81\x81\x10\x15a\x10\x11W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1F`$\x82\x01R\x7FERC3525: insufficient allowance\0`D\x82\x01R`d\x01a\x06ZV[a\x0B\xC6\x83\x85a\x10 \x85\x85a)\nV[a\x16#V[_a\x059a\x19\xC8V[`\x01`\x01`\xA0\x1B\x03\x84\x16a\x10\x8EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC3525: mint to the zero addres`D\x82\x01R`s`\xF8\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x82_\x03a\x10\xE7W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`!`$\x82\x01R\x7FERC3525: cannot mint zero tokenI`D\x82\x01R`\x19`\xFA\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x10\xF0\x83a\x18\xAAV[\x15a\x11=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1D`$\x82\x01R\x7FERC3525: token already minted\0\0\0`D\x82\x01R`d\x01a\x06ZV[a\x11H\x84\x84\x84a\x19\xE1V[a\x11R\x83\x82a\x1A\xA4V[a\x0B\xC6V[a\x11`\x83a\x18\xAAV[a\x11\xBCW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FERC3525: transfer from invalid t`D\x82\x01Rf\x1B\xDA\xD9[\x88\x12Q`\xCA\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x11\xC5\x82a\x18\xAAV[a\x12\x1FW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC3525: transfer to invalid tok`D\x82\x01Rd\x19[\x88\x12Q`\xDA\x1B`d\x82\x01R`\x84\x01a\x06ZV[_\x83\x81R`\x06` R`@\x81 T`\x05\x80T\x90\x91\x90\x81\x10a\x12BWa\x12Ba'[V[\x90_R` _ \x90`\x06\x02\x01\x90P_`\x05`\x06_\x86\x81R` \x01\x90\x81R` \x01_ T\x81T\x81\x10a\x12uWa\x12ua'[V[\x90_R` _ \x90`\x06\x02\x01\x90P\x82\x82`\x02\x01T\x10\x15a\x12\xEAW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FERC3525: insufficient balance fo`D\x82\x01Ri9\x10:90\xB79\xB32\xB9`\xB1\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x80`\x01\x01T\x82`\x01\x01T\x14a\x13XW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`.`$\x82\x01R\x7FERC3525: transfer to token with `D\x82\x01Rm\x19\x1AY\x99\x99\\\x99[\x9D\x08\x1C\xDB\x1B\xDD`\x92\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x82\x82`\x02\x01_\x82\x82Ta\x13k\x91\x90a)\nV[\x92PP\x81\x90UP\x82\x81`\x02\x01_\x82\x82Ta\x13\x85\x91\x90a)\x1DV[\x90\x91UPP`@Q\x83\x81R\x84\x90\x86\x90\x7F\x0B*\xAC\x84\xF3\xEC\x95i\x11\xFDx\xEA\xE51\x10b\x97/\xF9I\xF3\x84\x12\xE8\xDA9\x06\x9D\x9F\x06\x8C\xC6\x90` \x01`@Q\x80\x91\x03\x90\xA3a\x13\xDB\x85\x85\x85`@Q\x80` \x01`@R\x80_\x81RPa\x1B$V[a\x14=W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`-`$\x82\x01R\x7FERC3525: transfer rejected by ER`D\x82\x01Rl!\x99\x9A\x99\x1A\xA92\xB1\xB2\xB4\xBB2\xB9`\x99\x1B`d\x82\x01R`\x84\x01a\x06ZV[PPPPPV[__a\x14O\x83a\t\xEFV[\x90P\x80`\x01`\x01`\xA0\x1B\x03\x16\x84`\x01`\x01`\xA0\x1B\x03\x16\x14\x80a\x14\x99WP`\x01`\x01`\xA0\x1B\x03\x80\x82\x16_\x90\x81R`\x07` \x90\x81R`@\x80\x83 \x93\x88\x16\x83R`\x02\x90\x93\x01\x90R T`\xFF\x16[\x80a\x14\xBDWP\x83`\x01`\x01`\xA0\x1B\x03\x16a\x14\xB2\x84a\x05\xCEV[`\x01`\x01`\xA0\x1B\x03\x16\x14[\x94\x93PPPPV[\x82`\x01`\x01`\xA0\x1B\x03\x16a\x14\xD8\x82a\t\xEFV[`\x01`\x01`\xA0\x1B\x03\x16\x14a\x15:W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`$\x80\x82\x01R\x7FERC3525: transfer from invalid o`D\x82\x01Rc;\xB72\xB9`\xE1\x1B`d\x82\x01R`\x84\x01a\x06ZV[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x15\x9EW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`%`$\x82\x01R\x7FERC3525: transfer to the zero ad`D\x82\x01Rddress`\xD8\x1B`d\x82\x01R`\x84\x01a\x06ZV[_a\x15\xA8\x82a\x08QV[\x90P_a\x15\xB4\x83a\x0B\xDBV[\x90Pa\x15\xC0_\x84a\x0ErV[a\x15\xC9\x83a\x1C\x90V[a\x15\xD3\x85\x84a\x1D,V[a\x15\xDD\x84\x84a\x1E?V[\x82\x84`\x01`\x01`\xA0\x1B\x03\x16\x86`\x01`\x01`\xA0\x1B\x03\x16\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF`@Q`@Q\x80\x91\x03\x90\xA4a\x14=V[`\x01`\x01`\xA0\x1B\x03\x82\x16a\x16\x8CW`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`*`$\x82\x01R\x7FERC3525: approve value to the ze`D\x82\x01Riro address`\xB0\x1B`d\x82\x01R`\x84\x01a\x06ZV[a\x16\x96\x82\x84a\x1E\xC6V[a\x16\xFAW_\x83\x81R`\x06` R`@\x90 T`\x05\x80T\x90\x91\x90\x81\x10a\x16\xBDWa\x16\xBDa'[V[_\x91\x82R` \x80\x83 `\x06\x92\x90\x92\x02\x90\x91\x01`\x05\x01\x80T`\x01\x81\x01\x82U\x90\x83R\x91 \x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x84\x16\x17\x90U[_\x83\x81R`\x04` \x90\x81R`@\x80\x83 `\x01`\x01`\xA0\x1B\x03\x86\x16\x80\x85R\x90\x83R\x92\x81\x90 \x84\x90UQ\x83\x81R\x85\x91\x7Fb\x1B\x05\r\xE0\xAD\x08\xB5\x1D\x19\xB4\x8B>m\xF7SH\xC4\xDEk\xDD\x93\xE8\x1B%,\xA6.(&[\x1B\x91\x01[`@Q\x80\x91\x03\x90\xA3PPPV[\x81`\x01`\x01`\xA0\x1B\x03\x16\x83`\x01`\x01`\xA0\x1B\x03\x16\x03a\x17\xB9W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`\x1A`$\x82\x01R\x7FERC3525: approve to caller\0\0\0\0\0\0`D\x82\x01R`d\x01a\x06ZV[`\x01`\x01`\xA0\x1B\x03\x83\x81\x16_\x81\x81R`\x07` \x90\x81R`@\x80\x83 \x94\x87\x16\x80\x84R`\x02\x90\x95\x01\x82R\x91\x82\x90 \x80T`\xFF\x19\x16\x86\x15\x15\x90\x81\x17\x90\x91U\x91Q\x91\x82R\x7F\x170~\xAB9\xABa\x07\xE8\x89\x98E\xAD=Y\xBD\x96S\xF2\0\xF2 \x92\x04\x89\xCA+Y7il1\x91\x01a\x17KV[a\x18,\x84\x84\x84a\x14\xC5V[a\x188\x84\x84\x84\x84a\x1F\x88V[a\x0B\xC6W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`'`$\x82\x01R\x7FERC3525: transfer to non ERC721R`D\x82\x01Rf2\xB1\xB2\xB4\xBB2\xB9`\xC9\x1B`d\x82\x01R`\x84\x01a\x06ZV[``a\x059`\x01`\x01`\xA0\x1B\x03\x83\x16`\x14a \xCAV[`\x05T_\x90\x15\x80\x15\x90a\x059WP_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x84\x92\x90\x81\x10a\x18\xDBWa\x18\xDBa'[V[\x90_R` _ \x90`\x06\x02\x01_\x01T\x14\x92\x91PPV[_\x80r\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x10a\x19/Wr\x18O\x03\xE9?\xF9\xF4\xDA\xA7\x97\xEDn8\xEDd\xBFj\x1F\x01`@\x1B\x83\x04\x92P`@\x01[m\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x10a\x19[Wm\x04\xEE-mA[\x85\xAC\xEF\x81\0\0\0\0\x83\x04\x92P` \x01[f#\x86\xF2o\xC1\0\0\x83\x10a\x19yWf#\x86\xF2o\xC1\0\0\x83\x04\x92P`\x10\x01[c\x05\xF5\xE1\0\x83\x10a\x19\x91Wc\x05\xF5\xE1\0\x83\x04\x92P`\x08\x01[a'\x10\x83\x10a\x19\xA5Wa'\x10\x83\x04\x92P`\x04\x01[`d\x83\x10a\x19\xB7W`d\x83\x04\x92P`\x02\x01[`\n\x83\x10a\x059W`\x01\x01\x92\x91PPV[`\x03\x80T_\x91\x82a\x19\xD8\x83a)0V[\x91\x90PU\x90P\x90V[`@\x80Q`\xC0\x81\x01\x82R\x83\x81R` \x80\x82\x01\x84\x90R_\x82\x84\x01\x81\x90R`\x01`\x01`\xA0\x1B\x03\x87\x16``\x84\x01R`\x80\x83\x01\x81\x90R\x83Q\x81\x81R\x91\x82\x01\x90\x93R`\xA0\x82\x01R\x90Pa\x1A.\x81a\"<V[a\x1A8\x84\x84a\x1E?V[`@Q\x83\x90`\x01`\x01`\xA0\x1B\x03\x86\x16\x90_\x90\x7F\xDD\xF2R\xAD\x1B\xE2\xC8\x9Bi\xC2\xB0h\xFC7\x8D\xAA\x95+\xA7\xF1c\xC4\xA1\x16(\xF5ZM\xF5#\xB3\xEF\x90\x82\x90\xA4\x81_\x84\x7F\xE4\xF4\x8C$\r;\x99IH\xAAT\xF3\xE2\xF5\xFC\xA5\x92c\xDF\xE1\xD5+nL\xF3\x9A]$\x9B\\\xCBe`@Q`@Q\x80\x91\x03\x90\xA4PPPPV[_\x82\x81R`\x06` R`@\x90 T`\x05\x80T\x83\x92\x90\x81\x10a\x1A\xC7Wa\x1A\xC7a'[V[\x90_R` _ \x90`\x06\x02\x01`\x02\x01_\x82\x82Ta\x1A\xE4\x91\x90a)\x1DV[\x90\x91UPP`@Q\x81\x81R\x82\x90_\x90\x7F\x0B*\xAC\x84\xF3\xEC\x95i\x11\xFDx\xEA\xE51\x10b\x97/\xF9I\xF3\x84\x12\xE8\xDA9\x06\x9D\x9F\x06\x8C\xC6\x90` \x01`@Q\x80\x91\x03\x90\xA3PPV[__a\x1B/\x85a\t\xEFV[\x90P\x80;c\xFF\xFF\xFF\xFF\x16\x15a\x1C\x84W`@Qc\x01\xFF\xC9\xA7`\xE0\x1B\x81Rb\x9C\xE2\x0B`\xE0\x1B`\x04\x82\x01R`\x01`\x01`\xA0\x1B\x03\x82\x16\x90c\x01\xFF\xC9\xA7\x90`$\x01` `@Q\x80\x83\x03\x81\x86Z\xFA\x92PPP\x80\x15a\x1B\xA4WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x1B\xA1\x91\x81\x01\x90a)HV[`\x01[a\x1B\xE2W=\x80\x80\x15a\x1B\xD1W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a\x1B\xD6V[``\x91P[P`\x01\x92PPPa\x14\xBDV[\x80\x15a\x1CyW`@Qb\x9C\xE2\x0B`\xE0\x1B\x81R_\x90`\x01`\x01`\xA0\x1B\x03\x84\x16\x90b\x9C\xE2\x0B\x90a\x1C\x1C\x903\x90\x8C\x90\x8C\x90\x8C\x90\x8C\x90`\x04\x01a)cV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x15\x80\x15a\x1C8W=__>=_\xFD[PPPP`@Q=`\x1F\x19`\x1F\x82\x01\x16\x82\x01\x80`@RP\x81\x01\x90a\x1C\\\x91\x90a)\xA0V[`\x01`\x01`\xE0\x1B\x03\x19\x16b\x9C\xE2\x0B`\xE0\x1B\x14\x93Pa\x14\xBD\x92PPPV[`\x01\x92PPPa\x14\xBDV[P`\x01\x95\x94PPPPPV[_\x81\x81R`\x06` R`@\x81 T`\x05\x80T\x90\x91\x90\x81\x10a\x1C\xB3Wa\x1C\xB3a'[V[_\x91\x82R` \x82 `\x05`\x06\x90\x92\x02\x01\x90\x81\x01T\x90\x92P\x90[\x81\x81\x10\x15a\x1D\x1EW_\x83`\x05\x01\x82\x81T\x81\x10a\x1C\xEAWa\x1C\xEAa'[V[_\x91\x82R` \x80\x83 \x90\x91\x01T\x87\x83R`\x04\x82R`@\x80\x84 `\x01`\x01`\xA0\x1B\x03\x90\x92\x16\x84R\x91R\x81 UP`\x01\x01a\x1C\xCCV[Pa\x06\xFB`\x05\x83\x01_a#\x8AV[_\x81\x81R`\x06` R`@\x81 T`\x05\x80T\x90\x91\x90\x81\x10a\x1DOWa\x1DOa'[V[_\x91\x82R` \x80\x83 `\x06\x92\x90\x92\x02\x90\x91\x01`\x03\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x90U\x91\x84\x16\x81R`\x07\x90\x91R`@\x81 \x80T\x90\x91\x90a\x1D\x9D\x90`\x01\x90a)\nV[\x90P_\x82_\x01\x82\x81T\x81\x10a\x1D\xB4Wa\x1D\xB4a'[V[\x90_R` _ \x01T\x90P_\x83`\x01\x01_\x86\x81R` \x01\x90\x81R` \x01_ T\x90P\x81\x84_\x01\x82\x81T\x81\x10a\x1D\xEBWa\x1D\xEBa'[V[_\x91\x82R` \x80\x83 \x90\x91\x01\x92\x90\x92U\x83\x81R`\x01\x86\x01\x90\x91R`@\x80\x82 \x83\x90U\x86\x82R\x81 U\x83T\x84\x90\x80a\x1E$Wa\x1E$a)\xBBV[`\x01\x90\x03\x81\x81\x90_R` _ \x01_\x90U\x90UPPPPPPV[_\x81\x81R`\x06` R`@\x90 T`\x05\x80T\x84\x92\x90\x81\x10a\x1EbWa\x1Eba'[V[_\x91\x82R` \x80\x83 `\x06\x92\x90\x92\x02\x90\x91\x01`\x03\x01\x80T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x94\x85\x16\x17\x90U\x93\x90\x91\x16\x81R`\x07\x80\x84R`@\x80\x83 \x80T\x85\x85R`\x01\x82\x81\x01\x88R\x92\x85 \x81\x90U\x92\x86R\x90\x82\x01\x81U\x82R\x92\x90 \x90\x91\x01UV[_\x81\x81R`\x06` R`@\x81 T`\x05\x80T\x83\x92\x90\x81\x10a\x1E\xE9Wa\x1E\xE9a'[V[_\x91\x82R` \x82 `\x05`\x06\x90\x92\x02\x01\x01T\x91P[\x81\x81\x10\x15a\x1F~W_\x84\x81R`\x06` R`@\x90 T`\x05\x80T`\x01`\x01`\xA0\x1B\x03\x88\x16\x92\x90\x81\x10a\x1F2Wa\x1F2a'[V[\x90_R` _ \x90`\x06\x02\x01`\x05\x01\x82\x81T\x81\x10a\x1FRWa\x1FRa'[V[_\x91\x82R` \x90\x91 \x01T`\x01`\x01`\xA0\x1B\x03\x16\x03a\x1FvW`\x01\x92PPPa\x059V[`\x01\x01a\x1E\xFEV[P_\x94\x93PPPPV[_\x83;c\xFF\xFF\xFF\xFF\x16\x15a \xC2W`@Qc\n\x85\xBD\x01`\xE1\x1B\x81R`\x01`\x01`\xA0\x1B\x03\x85\x16\x90c\x15\x0Bz\x02\x90a\x1F\xC8\x903\x90\x89\x90\x88\x90\x88\x90`\x04\x01a)\xCFV[` `@Q\x80\x83\x03\x81_\x87Z\xF1\x92PPP\x80\x15a \x02WP`@\x80Q`\x1F=\x90\x81\x01`\x1F\x19\x16\x82\x01\x90\x92Ra\x1F\xFF\x91\x81\x01\x90a)\xA0V[`\x01[a \xA8W=\x80\x80\x15a /W`@Q\x91P`\x1F\x19`?=\x01\x16\x82\x01`@R=\x82R=_` \x84\x01>a 4V[``\x91P[P\x80Q_\x03a \xA0W`@QbF\x1B\xCD`\xE5\x1B\x81R` `\x04\x82\x01R`2`$\x82\x01R\x7FERC721: transfer to non ERC721Re`D\x82\x01Rq1\xB2\xB4\xBB2\xB9\x104\xB6\xB862\xB6\xB2\xB7:2\xB9`q\x1B`d\x82\x01R`\x84\x01a\x06ZV[\x80Q\x81` \x01\xFD[`\x01`\x01`\xE0\x1B\x03\x19\x16c\n\x85\xBD\x01`\xE1\x1B\x14\x90Pa\x14\xBDV[P`\x01a\x14\xBDV[``\x82_a \xD9\x84`\x02a*\x0BV[a \xE4\x90`\x02a)\x1DV[g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a \xFCWa \xFCa%\xC1V[`@Q\x90\x80\x82R\x80`\x1F\x01`\x1F\x19\x16` \x01\x82\x01`@R\x80\x15a!&W` \x82\x01\x81\x806\x837\x01\x90P[P\x90P`\x03`\xFC\x1B\x81_\x81Q\x81\x10a!@Wa!@a'[V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x0F`\xFB\x1B\x81`\x01\x81Q\x81\x10a!nWa!na'[V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP_a!\x90\x85`\x02a*\x0BV[a!\x9B\x90`\x01a)\x1DV[\x90P[`\x01\x81\x11\x15a\"\x12Wo\x18\x18\x99\x19\x9A\x1A\x9B\x1B\x9C\x1C\xB0\xB11\xB22\xB3`\x81\x1B\x83`\x0F\x16`\x10\x81\x10a!\xCFWa!\xCFa'[V[\x1A`\xF8\x1B\x82\x82\x81Q\x81\x10a!\xE5Wa!\xE5a'[V[` \x01\x01\x90`\x01`\x01`\xF8\x1B\x03\x19\x16\x90\x81_\x1A\x90SP`\x04\x92\x90\x92\x1C\x91a\"\x0B\x81a*\"V[\x90Pa!\x9EV[P\x81\x15a\x14\xBDW`@Qc\xE2.'\xEB`\xE0\x1B\x81R`\x04\x81\x01\x86\x90R`$\x81\x01\x85\x90R`D\x01a\x06ZV[`\x05\x80T\x82Q_\x90\x81R`\x06` \x81\x81R`@\x80\x84 \x85\x90U`\x01\x85\x01\x86U\x94\x90\x92R\x84Q\x92\x02\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB0\x81\x01\x92\x83U\x81\x85\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB1\x82\x01U\x92\x84\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB2\x84\x01U``\x84\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB3\x84\x01\x80T`\x01`\x01`\xA0\x1B\x03\x92\x83\x16`\x01`\x01`\xA0\x1B\x03\x19\x91\x82\x16\x17\x90\x91U`\x80\x86\x01Q\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB4\x86\x01\x80T\x91\x90\x93\x16\x91\x16\x17\x90U`\xA0\x84\x01Q\x80Q\x85\x94a\x0B\xC6\x93\x7F\x03kc\x84\xB5\xEC\xA7\x91\xC6'a\x15-\x0Cy\xBB\x06\x04\xC1\x04\xA5\xFBoN\xB0p?1T\xBB=\xB5\x90\x91\x01\x92\x01\x90a#\xA5V[P\x80T_\x82U\x90_R` _ \x90\x81\x01\x90a\x0Eo\x91\x90a$\x08V[\x82\x80T\x82\x82U\x90_R` _ \x90\x81\x01\x92\x82\x15a#\xF8W\x91` \x02\x82\x01[\x82\x81\x11\x15a#\xF8W\x82Q\x82T`\x01`\x01`\xA0\x1B\x03\x19\x16`\x01`\x01`\xA0\x1B\x03\x90\x91\x16\x17\x82U` \x90\x92\x01\x91`\x01\x90\x91\x01\x90a#\xC3V[Pa$\x04\x92\x91Pa$\x08V[P\x90V[[\x80\x82\x11\x15a$\x04W_\x81U`\x01\x01a$\tV[`\x01`\x01`\xE0\x1B\x03\x19\x81\x16\x81\x14a\x0EoW__\xFD[_` \x82\x84\x03\x12\x15a$AW__\xFD[\x815a\x07\xE3\x81a$\x1CV[_\x81Q\x80\x84R\x80` \x84\x01` \x86\x01^_` \x82\x86\x01\x01R` `\x1F\x19`\x1F\x83\x01\x16\x85\x01\x01\x91PP\x92\x91PPV[` \x81R_a\x07\xE3` \x83\x01\x84a$LV[_` \x82\x84\x03\x12\x15a$\x9CW__\xFD[P5\x91\x90PV[\x805`\x01`\x01`\xA0\x1B\x03\x81\x16\x81\x14a\n\x83W__\xFD[__`@\x83\x85\x03\x12\x15a$\xCAW__\xFD[a$\xD3\x83a$\xA3V[\x94` \x93\x90\x93\x015\x93PPPV[___``\x84\x86\x03\x12\x15a$\xF3W__\xFD[\x835\x92Pa%\x03` \x85\x01a$\xA3V[\x92\x95\x92\x94PPP`@\x91\x90\x91\x015\x90V[___``\x84\x86\x03\x12\x15a%&W__\xFD[a%/\x84a$\xA3V[\x92Pa%\x03` \x85\x01a$\xA3V[___``\x84\x86\x03\x12\x15a%OW__\xFD[PP\x815\x93` \x83\x015\x93P`@\x90\x92\x015\x91\x90PV[_` \x82\x84\x03\x12\x15a%vW__\xFD[a\x07\xE3\x82a$\xA3V[\x80\x15\x15\x81\x14a\x0EoW__\xFD[__`@\x83\x85\x03\x12\x15a%\x9DW__\xFD[a%\xA6\x83a$\xA3V[\x91P` \x83\x015a%\xB6\x81a%\x7FV[\x80\x91PP\x92P\x92\x90PV[cNH{q`\xE0\x1B_R`A`\x04R`$_\xFD[`@Q`\x1F\x82\x01`\x1F\x19\x16\x81\x01g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x82\x82\x10\x17\x15a%\xFEWa%\xFEa%\xC1V[`@R\x91\x90PV[_g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x82\x11\x15a&\x1FWa&\x1Fa%\xC1V[P`\x1F\x01`\x1F\x19\x16` \x01\x90V[____`\x80\x85\x87\x03\x12\x15a&@W__\xFD[a&I\x85a$\xA3V[\x93Pa&W` \x86\x01a$\xA3V[\x92P`@\x85\x015\x91P``\x85\x015g\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a&yW__\xFD[\x85\x01`\x1F\x81\x01\x87\x13a&\x89W__\xFD[\x805a&\x9Ca&\x97\x82a&\x06V[a%\xD5V[\x81\x81R\x88` \x83\x85\x01\x01\x11\x15a&\xB0W__\xFD[\x81` \x84\x01` \x83\x017_` \x83\x83\x01\x01R\x80\x93PPPP\x92\x95\x91\x94P\x92PV[__`@\x83\x85\x03\x12\x15a&\xE2W__\xFD[\x825\x91Pa&\xF2` \x84\x01a$\xA3V[\x90P\x92P\x92\x90PV[__`@\x83\x85\x03\x12\x15a'\x0CW__\xFD[a'\x15\x83a$\xA3V[\x91Pa&\xF2` \x84\x01a$\xA3V[`\x01\x81\x81\x1C\x90\x82\x16\x80a'7W`\x7F\x82\x16\x91P[` \x82\x10\x81\x03a'UWcNH{q`\xE0\x1B_R`\"`\x04R`$_\xFD[P\x91\x90PV[cNH{q`\xE0\x1B_R`2`\x04R`$_\xFD[` \x80\x82R`\"\x90\x82\x01R\x7FERC3525: approval to current own`@\x82\x01Ra2\xB9`\xF1\x1B``\x82\x01R`\x80\x01\x90V[_\x81Q\x80` \x84\x01\x85^_\x93\x01\x92\x83RP\x90\x91\x90PV[_a'\xD3\x82\x85a'\xB1V[dslot/`\xD8\x1B\x81Ra'\xEB`\x05\x82\x01\x85a'\xB1V[\x95\x94PPPPPV[_` \x82\x84\x03\x12\x15a(\x04W__\xFD[\x81Qg\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\x81\x11\x15a(\x1AW__\xFD[\x82\x01`\x1F\x81\x01\x84\x13a(*W__\xFD[\x80Qa(8a&\x97\x82a&\x06V[\x81\x81R\x85` \x83\x85\x01\x01\x11\x15a(LW__\xFD[\x81` \x84\x01` \x83\x01^_\x91\x81\x01` \x01\x91\x90\x91R\x94\x93PPPPV[` \x80\x82R`2\x90\x82\x01R\x7FERC3525: transfer caller is not `@\x82\x01Rq\x1B\xDD\xDB\x99\\\x88\x1B\x9B\xDC\x88\x18\\\x1C\x1C\x9B\xDD\x99Y`r\x1B``\x82\x01R`\x80\x01\x90V[_a\x14\xBDa(\xC9\x83\x86a'\xB1V[\x84a'\xB1V[_a(\xDA\x82\x85a'\xB1V[hcontract/`\xB8\x1B\x81Ra'\xEB`\t\x82\x01\x85a'\xB1V[cNH{q`\xE0\x1B_R`\x11`\x04R`$_\xFD[\x81\x81\x03\x81\x81\x11\x15a\x059Wa\x059a(\xF6V[\x80\x82\x01\x80\x82\x11\x15a\x059Wa\x059a(\xF6V[_`\x01\x82\x01a)AWa)Aa(\xF6V[P`\x01\x01\x90V[_` \x82\x84\x03\x12\x15a)XW__\xFD[\x81Qa\x07\xE3\x81a%\x7FV[`\x01\x80`\xA0\x1B\x03\x86\x16\x81R\x84` \x82\x01R\x83`@\x82\x01R\x82``\x82\x01R`\xA0`\x80\x82\x01R_a)\x95`\xA0\x83\x01\x84a$LV[\x97\x96PPPPPPPV[_` \x82\x84\x03\x12\x15a)\xB0W__\xFD[\x81Qa\x07\xE3\x81a$\x1CV[cNH{q`\xE0\x1B_R`1`\x04R`$_\xFD[`\x01`\x01`\xA0\x1B\x03\x85\x81\x16\x82R\x84\x16` \x82\x01R`@\x81\x01\x83\x90R`\x80``\x82\x01\x81\x90R_\x90a*\x01\x90\x83\x01\x84a$LV[\x96\x95PPPPPPV[\x80\x82\x02\x81\x15\x82\x82\x04\x84\x14\x17a\x059Wa\x059a(\xF6V[_\x81a*0Wa*0a(\xF6V[P_\x19\x01\x90V\xFE\xA2dipfsX\"\x12 O\xE6\xF8u\xDF\"#~\xB2\"?\x88\n%\xF4uL9{w\x86i\r\x8D\x90\xE3\xE3b\x8E\xF1f-dsolcC\0\x08\x1C\x003",
    );
    /**Custom error with signature `StringsInsufficientHexLength(uint256,uint256)` and selector `0xe22e27eb`.
```solidity
error StringsInsufficientHexLength(uint256 value, uint256 length);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct StringsInsufficientHexLength {
        pub value: alloy::sol_types::private::primitives::aliases::U256,
        pub length: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[doc(hidden)]
        type UnderlyingSolTuple<'a> = (
            alloy::sol_types::sol_data::Uint<256>,
            alloy::sol_types::sol_data::Uint<256>,
        );
        #[doc(hidden)]
        type UnderlyingRustTuple<'a> = (
            alloy::sol_types::private::primitives::aliases::U256,
            alloy::sol_types::private::primitives::aliases::U256,
        );
        #[cfg(test)]
        #[allow(dead_code, unreachable_patterns)]
        fn _type_assertion(
            _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
        ) {
            match _t {
                alloy_sol_types::private::AssertTypeEq::<
                    <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                >(_) => {}
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<StringsInsufficientHexLength>
        for UnderlyingRustTuple<'_> {
            fn from(value: StringsInsufficientHexLength) -> Self {
                (value.value, value.length)
            }
        }
        #[automatically_derived]
        #[doc(hidden)]
        impl ::core::convert::From<UnderlyingRustTuple<'_>>
        for StringsInsufficientHexLength {
            fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                Self {
                    value: tuple.0,
                    length: tuple.1,
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolError for StringsInsufficientHexLength {
            type Parameters<'a> = UnderlyingSolTuple<'a>;
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "StringsInsufficientHexLength(uint256,uint256)";
            const SELECTOR: [u8; 4] = [226u8, 46u8, 39u8, 235u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.length),
                )
            }
        }
    };
    /**Event with signature `Approval(address,address,uint256)` and selector `0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925`.
```solidity
event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Approval {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _approved: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Approval {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Approval(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _owner: topics.1,
                    _approved: topics.2,
                    _tokenId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._owner.clone(),
                    self._approved.clone(),
                    self._tokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._approved,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._tokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Approval {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Approval> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Approval) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApprovalForAll(address,address,bool)` and selector `0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31`.
```solidity
event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApprovalForAll {
        #[allow(missing_docs)]
        pub _owner: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _approved: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApprovalForAll {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApprovalForAll(address,address,bool)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _owner: topics.1,
                    _operator: topics.2,
                    _approved: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self._approved,
                    ),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._owner.clone(),
                    self._operator.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._owner,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._operator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApprovalForAll {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApprovalForAll> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApprovalForAll) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `ApprovalValue(uint256,address,uint256)` and selector `0x621b050de0ad08b51d19b48b3e6df75348c4de6bdd93e81b252ca62e28265b1b`.
```solidity
event ApprovalValue(uint256 indexed _tokenId, address indexed _operator, uint256 _value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct ApprovalValue {
        #[allow(missing_docs)]
        pub _tokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _operator: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for ApprovalValue {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "ApprovalValue(uint256,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                98u8,
                27u8,
                5u8,
                13u8,
                224u8,
                173u8,
                8u8,
                181u8,
                29u8,
                25u8,
                180u8,
                139u8,
                62u8,
                109u8,
                247u8,
                83u8,
                72u8,
                196u8,
                222u8,
                107u8,
                221u8,
                147u8,
                232u8,
                27u8,
                37u8,
                44u8,
                166u8,
                46u8,
                40u8,
                38u8,
                91u8,
                27u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _tokenId: topics.1,
                    _operator: topics.2,
                    _value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._tokenId.clone(),
                    self._operator.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._tokenId);
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._operator,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for ApprovalValue {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&ApprovalValue> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &ApprovalValue) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SetMetadataDescriptor(address)` and selector `0x5252f52e45fc8ee6a7b43cef3645d23e9a470a34182b8b3a12627556635bfc9c`.
```solidity
event SetMetadataDescriptor(address indexed metadataDescriptor);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SetMetadataDescriptor {
        #[allow(missing_docs)]
        pub metadataDescriptor: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SetMetadataDescriptor {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
            );
            const SIGNATURE: &'static str = "SetMetadataDescriptor(address)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                82u8,
                82u8,
                245u8,
                46u8,
                69u8,
                252u8,
                142u8,
                230u8,
                167u8,
                180u8,
                60u8,
                239u8,
                54u8,
                69u8,
                210u8,
                62u8,
                154u8,
                71u8,
                10u8,
                52u8,
                24u8,
                43u8,
                139u8,
                58u8,
                18u8,
                98u8,
                117u8,
                86u8,
                99u8,
                91u8,
                252u8,
                156u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    metadataDescriptor: topics.1,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (Self::SIGNATURE_HASH.into(), self.metadataDescriptor.clone())
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self.metadataDescriptor,
                );
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SetMetadataDescriptor {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SetMetadataDescriptor> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SetMetadataDescriptor) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `SlotChanged(uint256,uint256,uint256)` and selector `0xe4f48c240d3b994948aa54f3e2f5fca59263dfe1d52b6e4cf39a5d249b5ccb65`.
```solidity
event SlotChanged(uint256 indexed _tokenId, uint256 indexed _oldSlot, uint256 indexed _newSlot);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct SlotChanged {
        #[allow(missing_docs)]
        pub _tokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _oldSlot: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _newSlot: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for SlotChanged {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "SlotChanged(uint256,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                228u8,
                244u8,
                140u8,
                36u8,
                13u8,
                59u8,
                153u8,
                73u8,
                72u8,
                170u8,
                84u8,
                243u8,
                226u8,
                245u8,
                252u8,
                165u8,
                146u8,
                99u8,
                223u8,
                225u8,
                213u8,
                43u8,
                110u8,
                76u8,
                243u8,
                154u8,
                93u8,
                36u8,
                155u8,
                92u8,
                203u8,
                101u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _tokenId: topics.1,
                    _oldSlot: topics.2,
                    _newSlot: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._tokenId.clone(),
                    self._oldSlot.clone(),
                    self._newSlot.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._tokenId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._oldSlot);
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._newSlot);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for SlotChanged {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&SlotChanged> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &SlotChanged) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `Transfer(address,address,uint256)` and selector `0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef`.
```solidity
event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct Transfer {
        #[allow(missing_docs)]
        pub _from: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _to: alloy::sol_types::private::Address,
        #[allow(missing_docs)]
        pub _tokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for Transfer {
            type DataTuple<'a> = ();
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "Transfer(address,address,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _from: topics.1,
                    _to: topics.2,
                    _tokenId: topics.3,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                ()
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._from.clone(),
                    self._to.clone(),
                    self._tokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._from,
                );
                out[2usize] = <alloy::sol_types::sol_data::Address as alloy_sol_types::EventTopic>::encode_topic(
                    &self._to,
                );
                out[3usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._tokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for Transfer {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&Transfer> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &Transfer) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Event with signature `TransferValue(uint256,uint256,uint256)` and selector `0x0b2aac84f3ec956911fd78eae5311062972ff949f38412e8da39069d9f068cc6`.
```solidity
event TransferValue(uint256 indexed _fromTokenId, uint256 indexed _toTokenId, uint256 _value);
```*/
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    #[derive(Clone)]
    pub struct TransferValue {
        #[allow(missing_docs)]
        pub _fromTokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _toTokenId: alloy::sol_types::private::primitives::aliases::U256,
        #[allow(missing_docs)]
        pub _value: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        #[automatically_derived]
        impl alloy_sol_types::SolEvent for TransferValue {
            type DataTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type DataToken<'a> = <Self::DataTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type TopicList = (
                alloy_sol_types::sol_data::FixedBytes<32>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            const SIGNATURE: &'static str = "TransferValue(uint256,uint256,uint256)";
            const SIGNATURE_HASH: alloy_sol_types::private::B256 = alloy_sol_types::private::B256::new([
                11u8,
                42u8,
                172u8,
                132u8,
                243u8,
                236u8,
                149u8,
                105u8,
                17u8,
                253u8,
                120u8,
                234u8,
                229u8,
                49u8,
                16u8,
                98u8,
                151u8,
                47u8,
                249u8,
                73u8,
                243u8,
                132u8,
                18u8,
                232u8,
                218u8,
                57u8,
                6u8,
                157u8,
                159u8,
                6u8,
                140u8,
                198u8,
            ]);
            const ANONYMOUS: bool = false;
            #[allow(unused_variables)]
            #[inline]
            fn new(
                topics: <Self::TopicList as alloy_sol_types::SolType>::RustType,
                data: <Self::DataTuple<'_> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                Self {
                    _fromTokenId: topics.1,
                    _toTokenId: topics.2,
                    _value: data.0,
                }
            }
            #[inline]
            fn check_signature(
                topics: &<Self::TopicList as alloy_sol_types::SolType>::RustType,
            ) -> alloy_sol_types::Result<()> {
                if topics.0 != Self::SIGNATURE_HASH {
                    return Err(
                        alloy_sol_types::Error::invalid_event_signature_hash(
                            Self::SIGNATURE,
                            topics.0,
                            Self::SIGNATURE_HASH,
                        ),
                    );
                }
                Ok(())
            }
            #[inline]
            fn tokenize_body(&self) -> Self::DataToken<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self._value),
                )
            }
            #[inline]
            fn topics(&self) -> <Self::TopicList as alloy_sol_types::SolType>::RustType {
                (
                    Self::SIGNATURE_HASH.into(),
                    self._fromTokenId.clone(),
                    self._toTokenId.clone(),
                )
            }
            #[inline]
            fn encode_topics_raw(
                &self,
                out: &mut [alloy_sol_types::abi::token::WordToken],
            ) -> alloy_sol_types::Result<()> {
                if out.len() < <Self::TopicList as alloy_sol_types::TopicList>::COUNT {
                    return Err(alloy_sol_types::Error::Overrun);
                }
                out[0usize] = alloy_sol_types::abi::token::WordToken(
                    Self::SIGNATURE_HASH,
                );
                out[1usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._fromTokenId);
                out[2usize] = <alloy::sol_types::sol_data::Uint<
                    256,
                > as alloy_sol_types::EventTopic>::encode_topic(&self._toTokenId);
                Ok(())
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::private::IntoLogData for TransferValue {
            fn to_log_data(&self) -> alloy_sol_types::private::LogData {
                From::from(self)
            }
            fn into_log_data(self) -> alloy_sol_types::private::LogData {
                From::from(&self)
            }
        }
        #[automatically_derived]
        impl From<&TransferValue> for alloy_sol_types::private::LogData {
            #[inline]
            fn from(this: &TransferValue) -> alloy_sol_types::private::LogData {
                alloy_sol_types::SolEvent::encode_log_data(this)
            }
        }
    };
    /**Constructor`.
```solidity
constructor(string name_, string symbol_, uint8 decimals_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct constructorCall {
        pub name_: alloy::sol_types::private::String,
        pub symbol_: alloy::sol_types::private::String,
        pub decimals_: u8,
    }
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<8>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::String,
                alloy::sol_types::private::String,
                u8,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<constructorCall> for UnderlyingRustTuple<'_> {
                fn from(value: constructorCall) -> Self {
                    (value.name_, value.symbol_, value.decimals_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for constructorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        name_: tuple.0,
                        symbol_: tuple.1,
                        decimals_: tuple.2,
                    }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolConstructor for constructorCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::String,
                alloy::sol_types::sol_data::Uint<8>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.name_,
                    ),
                    <alloy::sol_types::sol_data::String as alloy_sol_types::SolType>::tokenize(
                        &self.symbol_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        8,
                    > as alloy_sol_types::SolType>::tokenize(&self.decimals_),
                )
            }
        }
    };
    /**Function with signature `allowance(uint256,address)` and selector `0xe345e0bc`.
```solidity
function allowance(uint256 tokenId_, address operator_) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceCall {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        pub operator_: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`allowance(uint256,address)`](allowanceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct allowanceReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceCall> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceCall) -> Self {
                    (value.tokenId_, value.operator_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokenId_: tuple.0,
                        operator_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<allowanceReturn> for UnderlyingRustTuple<'_> {
                fn from(value: allowanceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for allowanceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for allowanceCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = allowanceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "allowance(uint256,address)";
            const SELECTOR: [u8; 4] = [227u8, 69u8, 224u8, 188u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(address,uint256)` and selector `0x095ea7b3`.
```solidity
function approve(address to_, uint256 tokenId_) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approve_0Call {
        pub to_: alloy::sol_types::private::Address,
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(address,uint256)`](approve_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approve_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approve_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: approve_0Call) -> Self {
                    (value.to_, value.tokenId_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approve_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        to_: tuple.0,
                        tokenId_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approve_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: approve_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approve_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approve_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approve_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(address,uint256)";
            const SELECTOR: [u8; 4] = [9u8, 94u8, 167u8, 179u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `approve(uint256,address,uint256)` and selector `0x8cb0a511`.
```solidity
function approve(uint256 tokenId_, address to_, uint256 value_) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approve_1Call {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        pub to_: alloy::sol_types::private::Address,
        pub value_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`approve(uint256,address,uint256)`](approve_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct approve_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approve_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: approve_1Call) -> Self {
                    (value.tokenId_, value.to_, value.value_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approve_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        tokenId_: tuple.0,
                        to_: tuple.1,
                        value_: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<approve_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: approve_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for approve_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for approve_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = approve_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "approve(uint256,address,uint256)";
            const SELECTOR: [u8; 4] = [140u8, 176u8, 165u8, 17u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(address)` and selector `0x70a08231`.
```solidity
function balanceOf(address owner_) external view returns (uint256 balance);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOf_0Call {
        pub owner_: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`balanceOf(address)`](balanceOf_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOf_0Return {
        pub balance: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOf_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOf_0Call) -> Self {
                    (value.owner_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOf_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOf_0Return> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOf_0Return) -> Self {
                    (value.balance,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOf_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { balance: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOf_0Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Address,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOf_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(address)";
            const SELECTOR: [u8; 4] = [112u8, 160u8, 130u8, 49u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `balanceOf(uint256)` and selector `0x9cc7f708`.
```solidity
function balanceOf(uint256 tokenId_) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOf_1Call {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`balanceOf(uint256)`](balanceOf_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct balanceOf_1Return {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOf_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOf_1Call) -> Self {
                    (value.tokenId_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOf_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<balanceOf_1Return> for UnderlyingRustTuple<'_> {
                fn from(value: balanceOf_1Return) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for balanceOf_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for balanceOf_1Call {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = balanceOf_1Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "balanceOf(uint256)";
            const SELECTOR: [u8; 4] = [156u8, 199u8, 247u8, 8u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `contractURI()` and selector `0xe8a3d485`.
```solidity
function contractURI() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractURICall {}
    ///Container type for the return parameters of the [`contractURI()`](contractURICall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct contractURIReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractURICall> for UnderlyingRustTuple<'_> {
                fn from(value: contractURICall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<contractURIReturn> for UnderlyingRustTuple<'_> {
                fn from(value: contractURIReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for contractURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for contractURICall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = contractURIReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "contractURI()";
            const SELECTOR: [u8; 4] = [232u8, 163u8, 212u8, 133u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `getApproved(uint256)` and selector `0x081812fc`.
```solidity
function getApproved(uint256 tokenId_) external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApprovedCall {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`getApproved(uint256)`](getApprovedCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct getApprovedReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApprovedCall> for UnderlyingRustTuple<'_> {
                fn from(value: getApprovedCall) -> Self {
                    (value.tokenId_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApprovedCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<getApprovedReturn> for UnderlyingRustTuple<'_> {
                fn from(value: getApprovedReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for getApprovedReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for getApprovedCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = getApprovedReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "getApproved(uint256)";
            const SELECTOR: [u8; 4] = [8u8, 24u8, 18u8, 252u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `isApprovedForAll(address,address)` and selector `0xe985e9c5`.
```solidity
function isApprovedForAll(address owner_, address operator_) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isApprovedForAllCall {
        pub owner_: alloy::sol_types::private::Address,
        pub operator_: alloy::sol_types::private::Address,
    }
    ///Container type for the return parameters of the [`isApprovedForAll(address,address)`](isApprovedForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct isApprovedForAllReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllCall) -> Self {
                    (value.owner_, value.operator_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner_: tuple.0,
                        operator_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<isApprovedForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: isApprovedForAllReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for isApprovedForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for isApprovedForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = isApprovedForAllReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "isApprovedForAll(address,address)";
            const SELECTOR: [u8; 4] = [233u8, 133u8, 233u8, 197u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `metadataDescriptor()` and selector `0x840f7113`.
```solidity
function metadataDescriptor() external view returns (address);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metadataDescriptorCall {}
    ///Container type for the return parameters of the [`metadataDescriptor()`](metadataDescriptorCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct metadataDescriptorReturn {
        pub _0: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metadataDescriptorCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: metadataDescriptorCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metadataDescriptorCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<metadataDescriptorReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: metadataDescriptorReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for metadataDescriptorReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for metadataDescriptorCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = metadataDescriptorReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "metadataDescriptor()";
            const SELECTOR: [u8; 4] = [132u8, 15u8, 113u8, 19u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `name()` and selector `0x06fdde03`.
```solidity
function name() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameCall {}
    ///Container type for the return parameters of the [`name()`](nameCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct nameReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameCall> for UnderlyingRustTuple<'_> {
                fn from(value: nameCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<nameReturn> for UnderlyingRustTuple<'_> {
                fn from(value: nameReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for nameReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for nameCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = nameReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "name()";
            const SELECTOR: [u8; 4] = [6u8, 253u8, 222u8, 3u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `ownerOf(uint256)` and selector `0x6352211e`.
```solidity
function ownerOf(uint256 tokenId_) external view returns (address owner_);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerOfCall {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`ownerOf(uint256)`](ownerOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct ownerOfReturn {
        pub owner_: alloy::sol_types::private::Address,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: ownerOfCall) -> Self {
                    (value.tokenId_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Address,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<ownerOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: ownerOfReturn) -> Self {
                    (value.owner_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for ownerOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { owner_: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for ownerOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = ownerOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Address,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "ownerOf(uint256)";
            const SELECTOR: [u8; 4] = [99u8, 82u8, 33u8, 30u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256)` and selector `0x42842e0e`.
```solidity
function safeTransferFrom(address from_, address to_, uint256 tokenId_) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_0Call {
        pub from_: alloy::sol_types::private::Address,
        pub to_: alloy::sol_types::private::Address,
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256)`](safeTransferFrom_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_0Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_0Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_0Call) -> Self {
                    (value.from_, value.to_, value.tokenId_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from_: tuple.0,
                        to_: tuple.1,
                        tokenId_: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_0Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFrom_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFrom_0Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [66u8, 132u8, 46u8, 14u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `safeTransferFrom(address,address,uint256,bytes)` and selector `0xb88d4fde`.
```solidity
function safeTransferFrom(address from_, address to_, uint256 tokenId_, bytes memory data_) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_1Call {
        pub from_: alloy::sol_types::private::Address,
        pub to_: alloy::sol_types::private::Address,
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        pub data_: alloy::sol_types::private::Bytes,
    }
    ///Container type for the return parameters of the [`safeTransferFrom(address,address,uint256,bytes)`](safeTransferFrom_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct safeTransferFrom_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Bytes,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_1Call>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_1Call) -> Self {
                    (value.from_, value.to_, value.tokenId_, value.data_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from_: tuple.0,
                        to_: tuple.1,
                        tokenId_: tuple.2,
                        data_: tuple.3,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<safeTransferFrom_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: safeTransferFrom_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for safeTransferFrom_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for safeTransferFrom_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Bytes,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = safeTransferFrom_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "safeTransferFrom(address,address,uint256,bytes)";
            const SELECTOR: [u8; 4] = [184u8, 141u8, 79u8, 222u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                    <alloy::sol_types::sol_data::Bytes as alloy_sol_types::SolType>::tokenize(
                        &self.data_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `setApprovalForAll(address,bool)` and selector `0xa22cb465`.
```solidity
function setApprovalForAll(address operator_, bool approved_) external;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setApprovalForAllCall {
        pub operator_: alloy::sol_types::private::Address,
        pub approved_: bool,
    }
    ///Container type for the return parameters of the [`setApprovalForAll(address,bool)`](setApprovalForAllCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct setApprovalForAllReturn {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::Address, bool);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllCall) -> Self {
                    (value.operator_, value.approved_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        operator_: tuple.0,
                        approved_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<setApprovalForAllReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: setApprovalForAllReturn) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for setApprovalForAllReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for setApprovalForAllCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Bool,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = setApprovalForAllReturn;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "setApprovalForAll(address,bool)";
            const SELECTOR: [u8; 4] = [162u8, 44u8, 180u8, 101u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.operator_,
                    ),
                    <alloy::sol_types::sol_data::Bool as alloy_sol_types::SolType>::tokenize(
                        &self.approved_,
                    ),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `slotOf(uint256)` and selector `0x263f3e7e`.
```solidity
function slotOf(uint256 tokenId_) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slotOfCall {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`slotOf(uint256)`](slotOfCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slotOfReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slotOfCall> for UnderlyingRustTuple<'_> {
                fn from(value: slotOfCall) -> Self {
                    (value.tokenId_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slotOfCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slotOfReturn> for UnderlyingRustTuple<'_> {
                fn from(value: slotOfReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slotOfReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for slotOfCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = slotOfReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "slotOf(uint256)";
            const SELECTOR: [u8; 4] = [38u8, 63u8, 62u8, 126u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `slotURI(uint256)` and selector `0x09c3dd87`.
```solidity
function slotURI(uint256 slot_) external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slotURICall {
        pub slot_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`slotURI(uint256)`](slotURICall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct slotURIReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slotURICall> for UnderlyingRustTuple<'_> {
                fn from(value: slotURICall) -> Self {
                    (value.slot_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slotURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { slot_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<slotURIReturn> for UnderlyingRustTuple<'_> {
                fn from(value: slotURIReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for slotURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for slotURICall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = slotURIReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "slotURI(uint256)";
            const SELECTOR: [u8; 4] = [9u8, 195u8, 221u8, 135u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.slot_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `supportsInterface(bytes4)` and selector `0x01ffc9a7`.
```solidity
function supportsInterface(bytes4 interfaceId) external view returns (bool);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceCall {
        pub interfaceId: alloy::sol_types::private::FixedBytes<4>,
    }
    ///Container type for the return parameters of the [`supportsInterface(bytes4)`](supportsInterfaceCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct supportsInterfaceReturn {
        pub _0: bool,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::FixedBytes<4>,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceCall) -> Self {
                    (value.interfaceId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { interfaceId: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (bool,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<supportsInterfaceReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: supportsInterfaceReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for supportsInterfaceReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for supportsInterfaceCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::FixedBytes<4>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = supportsInterfaceReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Bool,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "supportsInterface(bytes4)";
            const SELECTOR: [u8; 4] = [1u8, 255u8, 201u8, 167u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::FixedBytes<
                        4,
                    > as alloy_sol_types::SolType>::tokenize(&self.interfaceId),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `symbol()` and selector `0x95d89b41`.
```solidity
function symbol() external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolCall {}
    ///Container type for the return parameters of the [`symbol()`](symbolCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct symbolReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolCall> for UnderlyingRustTuple<'_> {
                fn from(value: symbolCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<symbolReturn> for UnderlyingRustTuple<'_> {
                fn from(value: symbolReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for symbolReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for symbolCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = symbolReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "symbol()";
            const SELECTOR: [u8; 4] = [149u8, 216u8, 155u8, 65u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenByIndex(uint256)` and selector `0x4f6ccce7`.
```solidity
function tokenByIndex(uint256 index_) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenByIndexCall {
        pub index_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`tokenByIndex(uint256)`](tokenByIndexCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenByIndexReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenByIndexCall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenByIndexCall) -> Self {
                    (value.index_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenByIndexCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { index_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenByIndexReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenByIndexReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenByIndexReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenByIndexCall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenByIndexReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenByIndex(uint256)";
            const SELECTOR: [u8; 4] = [79u8, 108u8, 204u8, 231u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenOfOwnerByIndex(address,uint256)` and selector `0x2f745c59`.
```solidity
function tokenOfOwnerByIndex(address owner_, uint256 index_) external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenOfOwnerByIndexCall {
        pub owner_: alloy::sol_types::private::Address,
        pub index_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`tokenOfOwnerByIndex(address,uint256)`](tokenOfOwnerByIndexCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenOfOwnerByIndexReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenOfOwnerByIndexCall>
            for UnderlyingRustTuple<'_> {
                fn from(value: tokenOfOwnerByIndexCall) -> Self {
                    (value.owner_, value.index_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for tokenOfOwnerByIndexCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        owner_: tuple.0,
                        index_: tuple.1,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenOfOwnerByIndexReturn>
            for UnderlyingRustTuple<'_> {
                fn from(value: tokenOfOwnerByIndexReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for tokenOfOwnerByIndexReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenOfOwnerByIndexCall {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenOfOwnerByIndexReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenOfOwnerByIndex(address,uint256)";
            const SELECTOR: [u8; 4] = [47u8, 116u8, 92u8, 89u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.owner_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.index_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `tokenURI(uint256)` and selector `0xc87b56dd`.
```solidity
function tokenURI(uint256 tokenId_) external view returns (string memory);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenURICall {
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`tokenURI(uint256)`](tokenURICall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct tokenURIReturn {
        pub _0: alloy::sol_types::private::String,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenURICall> for UnderlyingRustTuple<'_> {
                fn from(value: tokenURICall) -> Self {
                    (value.tokenId_,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenURICall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { tokenId_: tuple.0 }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::String,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (alloy::sol_types::private::String,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<tokenURIReturn> for UnderlyingRustTuple<'_> {
                fn from(value: tokenURIReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for tokenURIReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for tokenURICall {
            type Parameters<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = tokenURIReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::String,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "tokenURI(uint256)";
            const SELECTOR: [u8; 4] = [200u8, 123u8, 86u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `totalSupply()` and selector `0x18160ddd`.
```solidity
function totalSupply() external view returns (uint256);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyCall {}
    ///Container type for the return parameters of the [`totalSupply()`](totalSupplyCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct totalSupplyReturn {
        pub _0: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyCall> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<totalSupplyReturn> for UnderlyingRustTuple<'_> {
                fn from(value: totalSupplyReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for totalSupplyReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for totalSupplyCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = totalSupplyReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "totalSupply()";
            const SELECTOR: [u8; 4] = [24u8, 22u8, 13u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(uint256,address,uint256)` and selector `0x0f485c02`.
```solidity
function transferFrom(uint256 fromTokenId_, address to_, uint256 value_) external payable returns (uint256 newTokenId);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFrom_0Call {
        pub fromTokenId_: alloy::sol_types::private::primitives::aliases::U256,
        pub to_: alloy::sol_types::private::Address,
        pub value_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(uint256,address,uint256)`](transferFrom_0Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFrom_0Return {
        pub newTokenId: alloy::sol_types::private::primitives::aliases::U256,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFrom_0Call> for UnderlyingRustTuple<'_> {
                fn from(value: transferFrom_0Call) -> Self {
                    (value.fromTokenId_, value.to_, value.value_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFrom_0Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fromTokenId_: tuple.0,
                        to_: tuple.1,
                        value_: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFrom_0Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferFrom_0Return) -> Self {
                    (value.newTokenId,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferFrom_0Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { newTokenId: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFrom_0Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFrom_0Return;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<256>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(uint256,address,uint256)";
            const SELECTOR: [u8; 4] = [15u8, 72u8, 92u8, 2u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.fromTokenId_),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(address,address,uint256)` and selector `0x23b872dd`.
```solidity
function transferFrom(address from_, address to_, uint256 tokenId_) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFrom_1Call {
        pub from_: alloy::sol_types::private::Address,
        pub to_: alloy::sol_types::private::Address,
        pub tokenId_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(address,address,uint256)`](transferFrom_1Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFrom_1Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::Address,
                alloy::sol_types::private::Address,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFrom_1Call> for UnderlyingRustTuple<'_> {
                fn from(value: transferFrom_1Call) -> Self {
                    (value.from_, value.to_, value.tokenId_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFrom_1Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        from_: tuple.0,
                        to_: tuple.1,
                        tokenId_: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFrom_1Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferFrom_1Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferFrom_1Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFrom_1Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Address,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFrom_1Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(address,address,uint256)";
            const SELECTOR: [u8; 4] = [35u8, 184u8, 114u8, 221u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.from_,
                    ),
                    <alloy::sol_types::sol_data::Address as alloy_sol_types::SolType>::tokenize(
                        &self.to_,
                    ),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.tokenId_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `transferFrom(uint256,uint256,uint256)` and selector `0x310ed7f0`.
```solidity
function transferFrom(uint256 fromTokenId_, uint256 toTokenId_, uint256 value_) external payable;
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFrom_2Call {
        pub fromTokenId_: alloy::sol_types::private::primitives::aliases::U256,
        pub toTokenId_: alloy::sol_types::private::primitives::aliases::U256,
        pub value_: alloy::sol_types::private::primitives::aliases::U256,
    }
    ///Container type for the return parameters of the [`transferFrom(uint256,uint256,uint256)`](transferFrom_2Call) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct transferFrom_2Return {}
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
                alloy::sol_types::private::primitives::aliases::U256,
            );
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFrom_2Call> for UnderlyingRustTuple<'_> {
                fn from(value: transferFrom_2Call) -> Self {
                    (value.fromTokenId_, value.toTokenId_, value.value_)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for transferFrom_2Call {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {
                        fromTokenId_: tuple.0,
                        toTokenId_: tuple.1,
                        value_: tuple.2,
                    }
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<transferFrom_2Return>
            for UnderlyingRustTuple<'_> {
                fn from(value: transferFrom_2Return) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>>
            for transferFrom_2Return {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for transferFrom_2Call {
            type Parameters<'a> = (
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
                alloy::sol_types::sol_data::Uint<256>,
            );
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = transferFrom_2Return;
            type ReturnTuple<'a> = ();
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "transferFrom(uint256,uint256,uint256)";
            const SELECTOR: [u8; 4] = [49u8, 14u8, 215u8, 240u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                (
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.fromTokenId_),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.toTokenId_),
                    <alloy::sol_types::sol_data::Uint<
                        256,
                    > as alloy_sol_types::SolType>::tokenize(&self.value_),
                )
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    /**Function with signature `valueDecimals()` and selector `0x3e7e8669`.
```solidity
function valueDecimals() external view returns (uint8);
```*/
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct valueDecimalsCall {}
    ///Container type for the return parameters of the [`valueDecimals()`](valueDecimalsCall) function.
    #[allow(non_camel_case_types, non_snake_case, clippy::pub_underscore_fields)]
    #[derive(Clone)]
    pub struct valueDecimalsReturn {
        pub _0: u8,
    }
    #[allow(
        non_camel_case_types,
        non_snake_case,
        clippy::pub_underscore_fields,
        clippy::style
    )]
    const _: () = {
        use alloy::sol_types as alloy_sol_types;
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = ();
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = ();
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<valueDecimalsCall> for UnderlyingRustTuple<'_> {
                fn from(value: valueDecimalsCall) -> Self {
                    ()
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for valueDecimalsCall {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self {}
                }
            }
        }
        {
            #[doc(hidden)]
            type UnderlyingSolTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            #[doc(hidden)]
            type UnderlyingRustTuple<'a> = (u8,);
            #[cfg(test)]
            #[allow(dead_code, unreachable_patterns)]
            fn _type_assertion(
                _t: alloy_sol_types::private::AssertTypeEq<UnderlyingRustTuple>,
            ) {
                match _t {
                    alloy_sol_types::private::AssertTypeEq::<
                        <UnderlyingSolTuple as alloy_sol_types::SolType>::RustType,
                    >(_) => {}
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<valueDecimalsReturn> for UnderlyingRustTuple<'_> {
                fn from(value: valueDecimalsReturn) -> Self {
                    (value._0,)
                }
            }
            #[automatically_derived]
            #[doc(hidden)]
            impl ::core::convert::From<UnderlyingRustTuple<'_>> for valueDecimalsReturn {
                fn from(tuple: UnderlyingRustTuple<'_>) -> Self {
                    Self { _0: tuple.0 }
                }
            }
        }
        #[automatically_derived]
        impl alloy_sol_types::SolCall for valueDecimalsCall {
            type Parameters<'a> = ();
            type Token<'a> = <Self::Parameters<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            type Return = valueDecimalsReturn;
            type ReturnTuple<'a> = (alloy::sol_types::sol_data::Uint<8>,);
            type ReturnToken<'a> = <Self::ReturnTuple<
                'a,
            > as alloy_sol_types::SolType>::Token<'a>;
            const SIGNATURE: &'static str = "valueDecimals()";
            const SELECTOR: [u8; 4] = [62u8, 126u8, 134u8, 105u8];
            #[inline]
            fn new<'a>(
                tuple: <Self::Parameters<'a> as alloy_sol_types::SolType>::RustType,
            ) -> Self {
                tuple.into()
            }
            #[inline]
            fn tokenize(&self) -> Self::Token<'_> {
                ()
            }
            #[inline]
            fn abi_decode_returns(
                data: &[u8],
                validate: bool,
            ) -> alloy_sol_types::Result<Self::Return> {
                <Self::ReturnTuple<
                    '_,
                > as alloy_sol_types::SolType>::abi_decode_sequence(data, validate)
                    .map(Into::into)
            }
        }
    };
    ///Container for all the [`ERC3525`](self) function calls.
    pub enum ERC3525Calls {
        allowance(allowanceCall),
        approve_0(approve_0Call),
        approve_1(approve_1Call),
        balanceOf_0(balanceOf_0Call),
        balanceOf_1(balanceOf_1Call),
        contractURI(contractURICall),
        getApproved(getApprovedCall),
        isApprovedForAll(isApprovedForAllCall),
        metadataDescriptor(metadataDescriptorCall),
        name(nameCall),
        ownerOf(ownerOfCall),
        safeTransferFrom_0(safeTransferFrom_0Call),
        safeTransferFrom_1(safeTransferFrom_1Call),
        setApprovalForAll(setApprovalForAllCall),
        slotOf(slotOfCall),
        slotURI(slotURICall),
        supportsInterface(supportsInterfaceCall),
        symbol(symbolCall),
        tokenByIndex(tokenByIndexCall),
        tokenOfOwnerByIndex(tokenOfOwnerByIndexCall),
        tokenURI(tokenURICall),
        totalSupply(totalSupplyCall),
        transferFrom_0(transferFrom_0Call),
        transferFrom_1(transferFrom_1Call),
        transferFrom_2(transferFrom_2Call),
        valueDecimals(valueDecimalsCall),
    }
    #[automatically_derived]
    impl ERC3525Calls {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[
            [1u8, 255u8, 201u8, 167u8],
            [6u8, 253u8, 222u8, 3u8],
            [8u8, 24u8, 18u8, 252u8],
            [9u8, 94u8, 167u8, 179u8],
            [9u8, 195u8, 221u8, 135u8],
            [15u8, 72u8, 92u8, 2u8],
            [24u8, 22u8, 13u8, 221u8],
            [35u8, 184u8, 114u8, 221u8],
            [38u8, 63u8, 62u8, 126u8],
            [47u8, 116u8, 92u8, 89u8],
            [49u8, 14u8, 215u8, 240u8],
            [62u8, 126u8, 134u8, 105u8],
            [66u8, 132u8, 46u8, 14u8],
            [79u8, 108u8, 204u8, 231u8],
            [99u8, 82u8, 33u8, 30u8],
            [112u8, 160u8, 130u8, 49u8],
            [132u8, 15u8, 113u8, 19u8],
            [140u8, 176u8, 165u8, 17u8],
            [149u8, 216u8, 155u8, 65u8],
            [156u8, 199u8, 247u8, 8u8],
            [162u8, 44u8, 180u8, 101u8],
            [184u8, 141u8, 79u8, 222u8],
            [200u8, 123u8, 86u8, 221u8],
            [227u8, 69u8, 224u8, 188u8],
            [232u8, 163u8, 212u8, 133u8],
            [233u8, 133u8, 233u8, 197u8],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ERC3525Calls {
        const NAME: &'static str = "ERC3525Calls";
        const MIN_DATA_LENGTH: usize = 0usize;
        const COUNT: usize = 26usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::allowance(_) => {
                    <allowanceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve_0(_) => {
                    <approve_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::approve_1(_) => {
                    <approve_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::balanceOf_0(_) => {
                    <balanceOf_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::balanceOf_1(_) => {
                    <balanceOf_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::contractURI(_) => {
                    <contractURICall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::getApproved(_) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::isApprovedForAll(_) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::metadataDescriptor(_) => {
                    <metadataDescriptorCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::name(_) => <nameCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::ownerOf(_) => <ownerOfCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::safeTransferFrom_0(_) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::safeTransferFrom_1(_) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::setApprovalForAll(_) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::slotOf(_) => <slotOfCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::slotURI(_) => <slotURICall as alloy_sol_types::SolCall>::SELECTOR,
                Self::supportsInterface(_) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::symbol(_) => <symbolCall as alloy_sol_types::SolCall>::SELECTOR,
                Self::tokenByIndex(_) => {
                    <tokenByIndexCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tokenOfOwnerByIndex(_) => {
                    <tokenOfOwnerByIndexCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::tokenURI(_) => <tokenURICall as alloy_sol_types::SolCall>::SELECTOR,
                Self::totalSupply(_) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferFrom_0(_) => {
                    <transferFrom_0Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferFrom_1(_) => {
                    <transferFrom_1Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::transferFrom_2(_) => {
                    <transferFrom_2Call as alloy_sol_types::SolCall>::SELECTOR
                }
                Self::valueDecimals(_) => {
                    <valueDecimalsCall as alloy_sol_types::SolCall>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ERC3525Calls>] = &[
                {
                    fn supportsInterface(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::supportsInterface)
                    }
                    supportsInterface
                },
                {
                    fn name(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <nameCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::name)
                    }
                    name
                },
                {
                    fn getApproved(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <getApprovedCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::getApproved)
                    }
                    getApproved
                },
                {
                    fn approve_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <approve_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::approve_0)
                    }
                    approve_0
                },
                {
                    fn slotURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <slotURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::slotURI)
                    }
                    slotURI
                },
                {
                    fn transferFrom_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <transferFrom_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::transferFrom_0)
                    }
                    transferFrom_0
                },
                {
                    fn totalSupply(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <totalSupplyCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::totalSupply)
                    }
                    totalSupply
                },
                {
                    fn transferFrom_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <transferFrom_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::transferFrom_1)
                    }
                    transferFrom_1
                },
                {
                    fn slotOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <slotOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::slotOf)
                    }
                    slotOf
                },
                {
                    fn tokenOfOwnerByIndex(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <tokenOfOwnerByIndexCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::tokenOfOwnerByIndex)
                    }
                    tokenOfOwnerByIndex
                },
                {
                    fn transferFrom_2(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <transferFrom_2Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::transferFrom_2)
                    }
                    transferFrom_2
                },
                {
                    fn valueDecimals(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <valueDecimalsCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::valueDecimals)
                    }
                    valueDecimals
                },
                {
                    fn safeTransferFrom_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::safeTransferFrom_0)
                    }
                    safeTransferFrom_0
                },
                {
                    fn tokenByIndex(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <tokenByIndexCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::tokenByIndex)
                    }
                    tokenByIndex
                },
                {
                    fn ownerOf(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <ownerOfCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::ownerOf)
                    }
                    ownerOf
                },
                {
                    fn balanceOf_0(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <balanceOf_0Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::balanceOf_0)
                    }
                    balanceOf_0
                },
                {
                    fn metadataDescriptor(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <metadataDescriptorCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::metadataDescriptor)
                    }
                    metadataDescriptor
                },
                {
                    fn approve_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <approve_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::approve_1)
                    }
                    approve_1
                },
                {
                    fn symbol(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <symbolCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::symbol)
                    }
                    symbol
                },
                {
                    fn balanceOf_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <balanceOf_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::balanceOf_1)
                    }
                    balanceOf_1
                },
                {
                    fn setApprovalForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::setApprovalForAll)
                    }
                    setApprovalForAll
                },
                {
                    fn safeTransferFrom_1(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::safeTransferFrom_1)
                    }
                    safeTransferFrom_1
                },
                {
                    fn tokenURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <tokenURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::tokenURI)
                    }
                    tokenURI
                },
                {
                    fn allowance(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <allowanceCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::allowance)
                    }
                    allowance
                },
                {
                    fn contractURI(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <contractURICall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::contractURI)
                    }
                    contractURI
                },
                {
                    fn isApprovedForAll(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Calls> {
                        <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Calls::isApprovedForAll)
                    }
                    isApprovedForAll
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve_0(inner) => {
                    <approve_0Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::approve_1(inner) => {
                    <approve_1Call as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::balanceOf_0(inner) => {
                    <balanceOf_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::balanceOf_1(inner) => {
                    <balanceOf_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::contractURI(inner) => {
                    <contractURICall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::getApproved(inner) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::metadataDescriptor(inner) => {
                    <metadataDescriptorCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::ownerOf(inner) => {
                    <ownerOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::safeTransferFrom_0(inner) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::safeTransferFrom_1(inner) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::slotOf(inner) => {
                    <slotOfCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::slotURI(inner) => {
                    <slotURICall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::tokenByIndex(inner) => {
                    <tokenByIndexCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tokenOfOwnerByIndex(inner) => {
                    <tokenOfOwnerByIndexCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::tokenURI(inner) => {
                    <tokenURICall as alloy_sol_types::SolCall>::abi_encoded_size(inner)
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferFrom_0(inner) => {
                    <transferFrom_0Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferFrom_1(inner) => {
                    <transferFrom_1Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::transferFrom_2(inner) => {
                    <transferFrom_2Call as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
                Self::valueDecimals(inner) => {
                    <valueDecimalsCall as alloy_sol_types::SolCall>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::allowance(inner) => {
                    <allowanceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve_0(inner) => {
                    <approve_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::approve_1(inner) => {
                    <approve_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::balanceOf_0(inner) => {
                    <balanceOf_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::balanceOf_1(inner) => {
                    <balanceOf_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::contractURI(inner) => {
                    <contractURICall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::getApproved(inner) => {
                    <getApprovedCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::isApprovedForAll(inner) => {
                    <isApprovedForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::metadataDescriptor(inner) => {
                    <metadataDescriptorCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::name(inner) => {
                    <nameCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::ownerOf(inner) => {
                    <ownerOfCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::safeTransferFrom_0(inner) => {
                    <safeTransferFrom_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::safeTransferFrom_1(inner) => {
                    <safeTransferFrom_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::setApprovalForAll(inner) => {
                    <setApprovalForAllCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::slotOf(inner) => {
                    <slotOfCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::slotURI(inner) => {
                    <slotURICall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::supportsInterface(inner) => {
                    <supportsInterfaceCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::symbol(inner) => {
                    <symbolCall as alloy_sol_types::SolCall>::abi_encode_raw(inner, out)
                }
                Self::tokenByIndex(inner) => {
                    <tokenByIndexCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tokenOfOwnerByIndex(inner) => {
                    <tokenOfOwnerByIndexCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::tokenURI(inner) => {
                    <tokenURICall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::totalSupply(inner) => {
                    <totalSupplyCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom_0(inner) => {
                    <transferFrom_0Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom_1(inner) => {
                    <transferFrom_1Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::transferFrom_2(inner) => {
                    <transferFrom_2Call as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
                Self::valueDecimals(inner) => {
                    <valueDecimalsCall as alloy_sol_types::SolCall>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ERC3525`](self) custom errors.
    pub enum ERC3525Errors {
        StringsInsufficientHexLength(StringsInsufficientHexLength),
    }
    #[automatically_derived]
    impl ERC3525Errors {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 4usize]] = &[[226u8, 46u8, 39u8, 235u8]];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolInterface for ERC3525Errors {
        const NAME: &'static str = "ERC3525Errors";
        const MIN_DATA_LENGTH: usize = 64usize;
        const COUNT: usize = 1usize;
        #[inline]
        fn selector(&self) -> [u8; 4] {
            match self {
                Self::StringsInsufficientHexLength(_) => {
                    <StringsInsufficientHexLength as alloy_sol_types::SolError>::SELECTOR
                }
            }
        }
        #[inline]
        fn selector_at(i: usize) -> ::core::option::Option<[u8; 4]> {
            Self::SELECTORS.get(i).copied()
        }
        #[inline]
        fn valid_selector(selector: [u8; 4]) -> bool {
            Self::SELECTORS.binary_search(&selector).is_ok()
        }
        #[inline]
        #[allow(unsafe_code, non_snake_case)]
        fn abi_decode_raw(
            selector: [u8; 4],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            static DECODE_SHIMS: &[fn(
                &[u8],
                bool,
            ) -> alloy_sol_types::Result<ERC3525Errors>] = &[
                {
                    fn StringsInsufficientHexLength(
                        data: &[u8],
                        validate: bool,
                    ) -> alloy_sol_types::Result<ERC3525Errors> {
                        <StringsInsufficientHexLength as alloy_sol_types::SolError>::abi_decode_raw(
                                data,
                                validate,
                            )
                            .map(ERC3525Errors::StringsInsufficientHexLength)
                    }
                    StringsInsufficientHexLength
                },
            ];
            let Ok(idx) = Self::SELECTORS.binary_search(&selector) else {
                return Err(
                    alloy_sol_types::Error::unknown_selector(
                        <Self as alloy_sol_types::SolInterface>::NAME,
                        selector,
                    ),
                );
            };
            (unsafe { DECODE_SHIMS.get_unchecked(idx) })(data, validate)
        }
        #[inline]
        fn abi_encoded_size(&self) -> usize {
            match self {
                Self::StringsInsufficientHexLength(inner) => {
                    <StringsInsufficientHexLength as alloy_sol_types::SolError>::abi_encoded_size(
                        inner,
                    )
                }
            }
        }
        #[inline]
        fn abi_encode_raw(&self, out: &mut alloy_sol_types::private::Vec<u8>) {
            match self {
                Self::StringsInsufficientHexLength(inner) => {
                    <StringsInsufficientHexLength as alloy_sol_types::SolError>::abi_encode_raw(
                        inner,
                        out,
                    )
                }
            }
        }
    }
    ///Container for all the [`ERC3525`](self) events.
    pub enum ERC3525Events {
        Approval(Approval),
        ApprovalForAll(ApprovalForAll),
        ApprovalValue(ApprovalValue),
        SetMetadataDescriptor(SetMetadataDescriptor),
        SlotChanged(SlotChanged),
        Transfer(Transfer),
        TransferValue(TransferValue),
    }
    #[automatically_derived]
    impl ERC3525Events {
        /// All the selectors of this enum.
        ///
        /// Note that the selectors might not be in the same order as the variants.
        /// No guarantees are made about the order of the selectors.
        ///
        /// Prefer using `SolInterface` methods instead.
        pub const SELECTORS: &'static [[u8; 32usize]] = &[
            [
                11u8,
                42u8,
                172u8,
                132u8,
                243u8,
                236u8,
                149u8,
                105u8,
                17u8,
                253u8,
                120u8,
                234u8,
                229u8,
                49u8,
                16u8,
                98u8,
                151u8,
                47u8,
                249u8,
                73u8,
                243u8,
                132u8,
                18u8,
                232u8,
                218u8,
                57u8,
                6u8,
                157u8,
                159u8,
                6u8,
                140u8,
                198u8,
            ],
            [
                23u8,
                48u8,
                126u8,
                171u8,
                57u8,
                171u8,
                97u8,
                7u8,
                232u8,
                137u8,
                152u8,
                69u8,
                173u8,
                61u8,
                89u8,
                189u8,
                150u8,
                83u8,
                242u8,
                0u8,
                242u8,
                32u8,
                146u8,
                4u8,
                137u8,
                202u8,
                43u8,
                89u8,
                55u8,
                105u8,
                108u8,
                49u8,
            ],
            [
                82u8,
                82u8,
                245u8,
                46u8,
                69u8,
                252u8,
                142u8,
                230u8,
                167u8,
                180u8,
                60u8,
                239u8,
                54u8,
                69u8,
                210u8,
                62u8,
                154u8,
                71u8,
                10u8,
                52u8,
                24u8,
                43u8,
                139u8,
                58u8,
                18u8,
                98u8,
                117u8,
                86u8,
                99u8,
                91u8,
                252u8,
                156u8,
            ],
            [
                98u8,
                27u8,
                5u8,
                13u8,
                224u8,
                173u8,
                8u8,
                181u8,
                29u8,
                25u8,
                180u8,
                139u8,
                62u8,
                109u8,
                247u8,
                83u8,
                72u8,
                196u8,
                222u8,
                107u8,
                221u8,
                147u8,
                232u8,
                27u8,
                37u8,
                44u8,
                166u8,
                46u8,
                40u8,
                38u8,
                91u8,
                27u8,
            ],
            [
                140u8,
                91u8,
                225u8,
                229u8,
                235u8,
                236u8,
                125u8,
                91u8,
                209u8,
                79u8,
                113u8,
                66u8,
                125u8,
                30u8,
                132u8,
                243u8,
                221u8,
                3u8,
                20u8,
                192u8,
                247u8,
                178u8,
                41u8,
                30u8,
                91u8,
                32u8,
                10u8,
                200u8,
                199u8,
                195u8,
                185u8,
                37u8,
            ],
            [
                221u8,
                242u8,
                82u8,
                173u8,
                27u8,
                226u8,
                200u8,
                155u8,
                105u8,
                194u8,
                176u8,
                104u8,
                252u8,
                55u8,
                141u8,
                170u8,
                149u8,
                43u8,
                167u8,
                241u8,
                99u8,
                196u8,
                161u8,
                22u8,
                40u8,
                245u8,
                90u8,
                77u8,
                245u8,
                35u8,
                179u8,
                239u8,
            ],
            [
                228u8,
                244u8,
                140u8,
                36u8,
                13u8,
                59u8,
                153u8,
                73u8,
                72u8,
                170u8,
                84u8,
                243u8,
                226u8,
                245u8,
                252u8,
                165u8,
                146u8,
                99u8,
                223u8,
                225u8,
                213u8,
                43u8,
                110u8,
                76u8,
                243u8,
                154u8,
                93u8,
                36u8,
                155u8,
                92u8,
                203u8,
                101u8,
            ],
        ];
    }
    #[automatically_derived]
    impl alloy_sol_types::SolEventInterface for ERC3525Events {
        const NAME: &'static str = "ERC3525Events";
        const COUNT: usize = 7usize;
        fn decode_raw_log(
            topics: &[alloy_sol_types::Word],
            data: &[u8],
            validate: bool,
        ) -> alloy_sol_types::Result<Self> {
            match topics.first().copied() {
                Some(<Approval as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Approval as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Approval)
                }
                Some(<ApprovalForAll as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApprovalForAll as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApprovalForAll)
                }
                Some(<ApprovalValue as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <ApprovalValue as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::ApprovalValue)
                }
                Some(
                    <SetMetadataDescriptor as alloy_sol_types::SolEvent>::SIGNATURE_HASH,
                ) => {
                    <SetMetadataDescriptor as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SetMetadataDescriptor)
                }
                Some(<SlotChanged as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <SlotChanged as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::SlotChanged)
                }
                Some(<Transfer as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <Transfer as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::Transfer)
                }
                Some(<TransferValue as alloy_sol_types::SolEvent>::SIGNATURE_HASH) => {
                    <TransferValue as alloy_sol_types::SolEvent>::decode_raw_log(
                            topics,
                            data,
                            validate,
                        )
                        .map(Self::TransferValue)
                }
                _ => {
                    alloy_sol_types::private::Err(alloy_sol_types::Error::InvalidLog {
                        name: <Self as alloy_sol_types::SolEventInterface>::NAME,
                        log: alloy_sol_types::private::Box::new(
                            alloy_sol_types::private::LogData::new_unchecked(
                                topics.to_vec(),
                                data.to_vec().into(),
                            ),
                        ),
                    })
                }
            }
        }
    }
    #[automatically_derived]
    impl alloy_sol_types::private::IntoLogData for ERC3525Events {
        fn to_log_data(&self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::ApprovalValue(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SetMetadataDescriptor(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::SlotChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
                Self::TransferValue(inner) => {
                    alloy_sol_types::private::IntoLogData::to_log_data(inner)
                }
            }
        }
        fn into_log_data(self) -> alloy_sol_types::private::LogData {
            match self {
                Self::Approval(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApprovalForAll(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::ApprovalValue(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SetMetadataDescriptor(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::SlotChanged(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::Transfer(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
                Self::TransferValue(inner) => {
                    alloy_sol_types::private::IntoLogData::into_log_data(inner)
                }
            }
        }
    }
    use alloy::contract as alloy_contract;
    /**Creates a new wrapper around an on-chain [`ERC3525`](self) contract instance.

See the [wrapper's documentation](`ERC3525Instance`) for more details.*/
    #[inline]
    pub const fn new<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        address: alloy_sol_types::private::Address,
        provider: P,
    ) -> ERC3525Instance<T, P, N> {
        ERC3525Instance::<T, P, N>::new(address, provider)
    }
    /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
    #[inline]
    pub fn deploy<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        name_: alloy::sol_types::private::String,
        symbol_: alloy::sol_types::private::String,
        decimals_: u8,
    ) -> impl ::core::future::Future<
        Output = alloy_contract::Result<ERC3525Instance<T, P, N>>,
    > {
        ERC3525Instance::<T, P, N>::deploy(provider, name_, symbol_, decimals_)
    }
    /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
    #[inline]
    pub fn deploy_builder<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    >(
        provider: P,
        name_: alloy::sol_types::private::String,
        symbol_: alloy::sol_types::private::String,
        decimals_: u8,
    ) -> alloy_contract::RawCallBuilder<T, P, N> {
        ERC3525Instance::<T, P, N>::deploy_builder(provider, name_, symbol_, decimals_)
    }
    /**A [`ERC3525`](self) instance.

Contains type-safe methods for interacting with an on-chain instance of the
[`ERC3525`](self) contract located at a given `address`, using a given
provider `P`.

If the contract bytecode is available (see the [`sol!`](alloy_sol_types::sol!)
documentation on how to provide it), the `deploy` and `deploy_builder` methods can
be used to deploy a new instance of the contract.

See the [module-level documentation](self) for all the available methods.*/
    #[derive(Clone)]
    pub struct ERC3525Instance<T, P, N = alloy_contract::private::Ethereum> {
        address: alloy_sol_types::private::Address,
        provider: P,
        _network_transport: ::core::marker::PhantomData<(N, T)>,
    }
    #[automatically_derived]
    impl<T, P, N> ::core::fmt::Debug for ERC3525Instance<T, P, N> {
        #[inline]
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_tuple("ERC3525Instance").field(&self.address).finish()
        }
    }
    /// Instantiation and getters/setters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC3525Instance<T, P, N> {
        /**Creates a new wrapper around an on-chain [`ERC3525`](self) contract instance.

See the [wrapper's documentation](`ERC3525Instance`) for more details.*/
        #[inline]
        pub const fn new(
            address: alloy_sol_types::private::Address,
            provider: P,
        ) -> Self {
            Self {
                address,
                provider,
                _network_transport: ::core::marker::PhantomData,
            }
        }
        /**Deploys this contract using the given `provider` and constructor arguments, if any.

Returns a new instance of the contract, if the deployment was successful.

For more fine-grained control over the deployment process, use [`deploy_builder`] instead.*/
        #[inline]
        pub async fn deploy(
            provider: P,
            name_: alloy::sol_types::private::String,
            symbol_: alloy::sol_types::private::String,
            decimals_: u8,
        ) -> alloy_contract::Result<ERC3525Instance<T, P, N>> {
            let call_builder = Self::deploy_builder(provider, name_, symbol_, decimals_);
            let contract_address = call_builder.deploy().await?;
            Ok(Self::new(contract_address, call_builder.provider))
        }
        /**Creates a `RawCallBuilder` for deploying this contract using the given `provider`
and constructor arguments, if any.

This is a simple wrapper around creating a `RawCallBuilder` with the data set to
the bytecode concatenated with the constructor's ABI-encoded arguments.*/
        #[inline]
        pub fn deploy_builder(
            provider: P,
            name_: alloy::sol_types::private::String,
            symbol_: alloy::sol_types::private::String,
            decimals_: u8,
        ) -> alloy_contract::RawCallBuilder<T, P, N> {
            alloy_contract::RawCallBuilder::new_raw_deploy(
                provider,
                [
                    &BYTECODE[..],
                    &alloy_sol_types::SolConstructor::abi_encode(
                        &constructorCall {
                            name_,
                            symbol_,
                            decimals_,
                        },
                    )[..],
                ]
                    .concat()
                    .into(),
            )
        }
        /// Returns a reference to the address.
        #[inline]
        pub const fn address(&self) -> &alloy_sol_types::private::Address {
            &self.address
        }
        /// Sets the address.
        #[inline]
        pub fn set_address(&mut self, address: alloy_sol_types::private::Address) {
            self.address = address;
        }
        /// Sets the address and returns `self`.
        pub fn at(mut self, address: alloy_sol_types::private::Address) -> Self {
            self.set_address(address);
            self
        }
        /// Returns a reference to the provider.
        #[inline]
        pub const fn provider(&self) -> &P {
            &self.provider
        }
    }
    impl<T, P: ::core::clone::Clone, N> ERC3525Instance<T, &P, N> {
        /// Clones the provider and returns a new instance with the cloned provider.
        #[inline]
        pub fn with_cloned_provider(self) -> ERC3525Instance<T, P, N> {
            ERC3525Instance {
                address: self.address,
                provider: ::core::clone::Clone::clone(&self.provider),
                _network_transport: ::core::marker::PhantomData,
            }
        }
    }
    /// Function calls.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC3525Instance<T, P, N> {
        /// Creates a new call builder using this contract instance's provider and address.
        ///
        /// Note that the call can be any function call, not just those defined in this
        /// contract. Prefer using the other methods for building type-safe contract calls.
        pub fn call_builder<C: alloy_sol_types::SolCall>(
            &self,
            call: &C,
        ) -> alloy_contract::SolCallBuilder<T, &P, C, N> {
            alloy_contract::SolCallBuilder::new_sol(&self.provider, &self.address, call)
        }
        ///Creates a new call builder for the [`allowance`] function.
        pub fn allowance(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
            operator_: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, allowanceCall, N> {
            self.call_builder(
                &allowanceCall {
                    tokenId_,
                    operator_,
                },
            )
        }
        ///Creates a new call builder for the [`approve_0`] function.
        pub fn approve_0(
            &self,
            to_: alloy::sol_types::private::Address,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approve_0Call, N> {
            self.call_builder(&approve_0Call { to_, tokenId_ })
        }
        ///Creates a new call builder for the [`approve_1`] function.
        pub fn approve_1(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
            to_: alloy::sol_types::private::Address,
            value_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, approve_1Call, N> {
            self.call_builder(
                &approve_1Call {
                    tokenId_,
                    to_,
                    value_,
                },
            )
        }
        ///Creates a new call builder for the [`balanceOf_0`] function.
        pub fn balanceOf_0(
            &self,
            owner_: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOf_0Call, N> {
            self.call_builder(&balanceOf_0Call { owner_ })
        }
        ///Creates a new call builder for the [`balanceOf_1`] function.
        pub fn balanceOf_1(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, balanceOf_1Call, N> {
            self.call_builder(&balanceOf_1Call { tokenId_ })
        }
        ///Creates a new call builder for the [`contractURI`] function.
        pub fn contractURI(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, contractURICall, N> {
            self.call_builder(&contractURICall {})
        }
        ///Creates a new call builder for the [`getApproved`] function.
        pub fn getApproved(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, getApprovedCall, N> {
            self.call_builder(&getApprovedCall { tokenId_ })
        }
        ///Creates a new call builder for the [`isApprovedForAll`] function.
        pub fn isApprovedForAll(
            &self,
            owner_: alloy::sol_types::private::Address,
            operator_: alloy::sol_types::private::Address,
        ) -> alloy_contract::SolCallBuilder<T, &P, isApprovedForAllCall, N> {
            self.call_builder(
                &isApprovedForAllCall {
                    owner_,
                    operator_,
                },
            )
        }
        ///Creates a new call builder for the [`metadataDescriptor`] function.
        pub fn metadataDescriptor(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, metadataDescriptorCall, N> {
            self.call_builder(&metadataDescriptorCall {})
        }
        ///Creates a new call builder for the [`name`] function.
        pub fn name(&self) -> alloy_contract::SolCallBuilder<T, &P, nameCall, N> {
            self.call_builder(&nameCall {})
        }
        ///Creates a new call builder for the [`ownerOf`] function.
        pub fn ownerOf(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, ownerOfCall, N> {
            self.call_builder(&ownerOfCall { tokenId_ })
        }
        ///Creates a new call builder for the [`safeTransferFrom_0`] function.
        pub fn safeTransferFrom_0(
            &self,
            from_: alloy::sol_types::private::Address,
            to_: alloy::sol_types::private::Address,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFrom_0Call, N> {
            self.call_builder(
                &safeTransferFrom_0Call {
                    from_,
                    to_,
                    tokenId_,
                },
            )
        }
        ///Creates a new call builder for the [`safeTransferFrom_1`] function.
        pub fn safeTransferFrom_1(
            &self,
            from_: alloy::sol_types::private::Address,
            to_: alloy::sol_types::private::Address,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
            data_: alloy::sol_types::private::Bytes,
        ) -> alloy_contract::SolCallBuilder<T, &P, safeTransferFrom_1Call, N> {
            self.call_builder(
                &safeTransferFrom_1Call {
                    from_,
                    to_,
                    tokenId_,
                    data_,
                },
            )
        }
        ///Creates a new call builder for the [`setApprovalForAll`] function.
        pub fn setApprovalForAll(
            &self,
            operator_: alloy::sol_types::private::Address,
            approved_: bool,
        ) -> alloy_contract::SolCallBuilder<T, &P, setApprovalForAllCall, N> {
            self.call_builder(
                &setApprovalForAllCall {
                    operator_,
                    approved_,
                },
            )
        }
        ///Creates a new call builder for the [`slotOf`] function.
        pub fn slotOf(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, slotOfCall, N> {
            self.call_builder(&slotOfCall { tokenId_ })
        }
        ///Creates a new call builder for the [`slotURI`] function.
        pub fn slotURI(
            &self,
            slot_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, slotURICall, N> {
            self.call_builder(&slotURICall { slot_ })
        }
        ///Creates a new call builder for the [`supportsInterface`] function.
        pub fn supportsInterface(
            &self,
            interfaceId: alloy::sol_types::private::FixedBytes<4>,
        ) -> alloy_contract::SolCallBuilder<T, &P, supportsInterfaceCall, N> {
            self.call_builder(
                &supportsInterfaceCall {
                    interfaceId,
                },
            )
        }
        ///Creates a new call builder for the [`symbol`] function.
        pub fn symbol(&self) -> alloy_contract::SolCallBuilder<T, &P, symbolCall, N> {
            self.call_builder(&symbolCall {})
        }
        ///Creates a new call builder for the [`tokenByIndex`] function.
        pub fn tokenByIndex(
            &self,
            index_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenByIndexCall, N> {
            self.call_builder(&tokenByIndexCall { index_ })
        }
        ///Creates a new call builder for the [`tokenOfOwnerByIndex`] function.
        pub fn tokenOfOwnerByIndex(
            &self,
            owner_: alloy::sol_types::private::Address,
            index_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenOfOwnerByIndexCall, N> {
            self.call_builder(
                &tokenOfOwnerByIndexCall {
                    owner_,
                    index_,
                },
            )
        }
        ///Creates a new call builder for the [`tokenURI`] function.
        pub fn tokenURI(
            &self,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, tokenURICall, N> {
            self.call_builder(&tokenURICall { tokenId_ })
        }
        ///Creates a new call builder for the [`totalSupply`] function.
        pub fn totalSupply(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, totalSupplyCall, N> {
            self.call_builder(&totalSupplyCall {})
        }
        ///Creates a new call builder for the [`transferFrom_0`] function.
        pub fn transferFrom_0(
            &self,
            fromTokenId_: alloy::sol_types::private::primitives::aliases::U256,
            to_: alloy::sol_types::private::Address,
            value_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFrom_0Call, N> {
            self.call_builder(
                &transferFrom_0Call {
                    fromTokenId_,
                    to_,
                    value_,
                },
            )
        }
        ///Creates a new call builder for the [`transferFrom_1`] function.
        pub fn transferFrom_1(
            &self,
            from_: alloy::sol_types::private::Address,
            to_: alloy::sol_types::private::Address,
            tokenId_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFrom_1Call, N> {
            self.call_builder(
                &transferFrom_1Call {
                    from_,
                    to_,
                    tokenId_,
                },
            )
        }
        ///Creates a new call builder for the [`transferFrom_2`] function.
        pub fn transferFrom_2(
            &self,
            fromTokenId_: alloy::sol_types::private::primitives::aliases::U256,
            toTokenId_: alloy::sol_types::private::primitives::aliases::U256,
            value_: alloy::sol_types::private::primitives::aliases::U256,
        ) -> alloy_contract::SolCallBuilder<T, &P, transferFrom_2Call, N> {
            self.call_builder(
                &transferFrom_2Call {
                    fromTokenId_,
                    toTokenId_,
                    value_,
                },
            )
        }
        ///Creates a new call builder for the [`valueDecimals`] function.
        pub fn valueDecimals(
            &self,
        ) -> alloy_contract::SolCallBuilder<T, &P, valueDecimalsCall, N> {
            self.call_builder(&valueDecimalsCall {})
        }
    }
    /// Event filters.
    #[automatically_derived]
    impl<
        T: alloy_contract::private::Transport + ::core::clone::Clone,
        P: alloy_contract::private::Provider<T, N>,
        N: alloy_contract::private::Network,
    > ERC3525Instance<T, P, N> {
        /// Creates a new event filter using this contract instance's provider and address.
        ///
        /// Note that the type can be any event, not just those defined in this contract.
        /// Prefer using the other methods for building type-safe event filters.
        pub fn event_filter<E: alloy_sol_types::SolEvent>(
            &self,
        ) -> alloy_contract::Event<T, &P, E, N> {
            alloy_contract::Event::new_sol(&self.provider, &self.address)
        }
        ///Creates a new event filter for the [`Approval`] event.
        pub fn Approval_filter(&self) -> alloy_contract::Event<T, &P, Approval, N> {
            self.event_filter::<Approval>()
        }
        ///Creates a new event filter for the [`ApprovalForAll`] event.
        pub fn ApprovalForAll_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApprovalForAll, N> {
            self.event_filter::<ApprovalForAll>()
        }
        ///Creates a new event filter for the [`ApprovalValue`] event.
        pub fn ApprovalValue_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, ApprovalValue, N> {
            self.event_filter::<ApprovalValue>()
        }
        ///Creates a new event filter for the [`SetMetadataDescriptor`] event.
        pub fn SetMetadataDescriptor_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SetMetadataDescriptor, N> {
            self.event_filter::<SetMetadataDescriptor>()
        }
        ///Creates a new event filter for the [`SlotChanged`] event.
        pub fn SlotChanged_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, SlotChanged, N> {
            self.event_filter::<SlotChanged>()
        }
        ///Creates a new event filter for the [`Transfer`] event.
        pub fn Transfer_filter(&self) -> alloy_contract::Event<T, &P, Transfer, N> {
            self.event_filter::<Transfer>()
        }
        ///Creates a new event filter for the [`TransferValue`] event.
        pub fn TransferValue_filter(
            &self,
        ) -> alloy_contract::Event<T, &P, TransferValue, N> {
            self.event_filter::<TransferValue>()
        }
    }
}
